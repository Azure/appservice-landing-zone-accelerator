{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.17.1.54307",
      "templateHash": "15757305463107983899"
    }
  },
  "parameters": {
    "workloadName": {
      "type": "string",
      "defaultValue": "[format('appsvc{0}', take(uniqueString(subscription().id), 4))]",
      "metadata": {
        "description": "suffix (max 10 characters long) that will be used to name the resources in a pattern like <resourceAbbreviation>-<workloadName>"
      },
      "maxLength": 10
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Azure region where the resources will be deployed in"
      }
    },
    "environmentName": {
      "type": "string",
      "defaultValue": "test",
      "maxLength": 8,
      "metadata": {
        "description": "Required. The name of the environmentName (e.g. \"dev\", \"test\", \"prod\", \"preprod\", \"staging\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long."
      }
    },
    "vnetHubAddressSpace": {
      "type": "string",
      "defaultValue": "10.242.0.0/20",
      "metadata": {
        "description": "CIDR of the HUB vnet i.e. 192.168.0.0/24 - optional if you want to use an existing hub vnet (vnetHubResourceId)"
      }
    },
    "subnetHubFirewallAddressSpace": {
      "type": "string",
      "defaultValue": "10.242.0.0/26",
      "metadata": {
        "description": "CIDR of the subnet hosting the azure Firewall - optional if you want to use an existing hub vnet (vnetHubResourceId)"
      }
    },
    "subnetHubBastionAddressSpace": {
      "type": "string",
      "defaultValue": "10.242.0.64/26",
      "metadata": {
        "description": "CIDR of the subnet hosting the Bastion Service - optional if you want to use an existing hub vnet (vnetHubResourceId)"
      }
    },
    "vnetSpokeAddressSpace": {
      "type": "string",
      "defaultValue": "10.240.0.0/20",
      "metadata": {
        "description": "CIDR of the SPOKE vnet i.e. 192.168.0.0/24"
      }
    },
    "subnetSpokeAppSvcAddressSpace": {
      "type": "string",
      "defaultValue": "10.240.0.0/26",
      "metadata": {
        "description": "CIDR of the subnet that will hold the app services plan"
      }
    },
    "subnetSpokeDevOpsAddressSpace": {
      "type": "string",
      "defaultValue": "10.240.10.128/26",
      "metadata": {
        "description": "CIDR of the subnet that will hold devOps agents etc "
      }
    },
    "subnetSpokePrivateEndpointAddressSpace": {
      "type": "string",
      "defaultValue": "10.240.11.0/24",
      "metadata": {
        "description": "CIDR of the subnet that will hold the private endpoints of the supporting services"
      }
    },
    "numericSuffix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. A numeric suffix (e.g. \"001\") to be appended on the naming generated for the resources. Defaults to empty."
      }
    },
    "resourceTags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Resource tags that we might need to add to all resources (i.e. Environment, Cost center, application name etc)"
      }
    },
    "vnetHubResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Default is empty. If empty, then a new hub will be created. If given, no new hub will be created and we create the  peering between spoke and and existing hub vnet"
      }
    },
    "firewallInternalIp": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Internal IP of the Azure firewall deployed in Hub. Used for creating UDR to route all vnet egress traffic through Firewall. If empty no UDR"
      }
    },
    "webAppPlanSku": {
      "type": "string",
      "defaultValue": "S1",
      "allowedValues": [
        "S1",
        "S2",
        "S3",
        "P1V3",
        "P2V3",
        "P3V3",
        "P1V3_AZ",
        "P2V3_AZ",
        "P3V3_AZ"
      ],
      "metadata": {
        "description": "Defines the name, tier, size, family and capacity of the App Service Plan. Plans ending to _AZ, are deplying at least three instances in three Availability Zones. EP* is only for functions"
      }
    },
    "webAppBaseOs": {
      "type": "string",
      "defaultValue": "Windows",
      "allowedValues": [
        "Windows",
        "Linux"
      ],
      "metadata": {
        "description": "Kind of server OS of the App Service Plan"
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "mandatory, the username of the admin user of the jumpbox VM"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "mandatory, the password of the admin user of the jumpbox VM "
      }
    },
    "sqlServerAdministrators": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Conditional. The Azure Active Directory (AAD) administrator authentication. Required if no `sqlAdminLogin` & `sqlAdminPassword` is provided."
      }
    },
    "sqlAdminLogin": {
      "type": "string",
      "defaultValue": "sqluser",
      "metadata": {
        "description": "Conditional. If sqlServerAdministrators is given, this is not required. "
      }
    },
    "sqlAdminPassword": {
      "type": "securestring",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Conditional. If sqlServerAdministrators is given, this is not required -check password policy: https://learn.microsoft.com/en-us/sql/relational-databases/security/password-policy?view=azuresqldb-current"
      }
    },
    "enableEgressLockdown": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "set to true if you want to intercept all outbound traffic with azure firewall"
      }
    },
    "deployRedis": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "set to true if you want to a redis cache"
      }
    },
    "deployAzureSql": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "set to true if you want to deploy a azure SQL server and default database"
      }
    },
    "deployAppConfig": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "set to true if you want to deploy application configuration"
      }
    },
    "deployJumpHost": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "set to true if you want to deploy a jumpbox/devops VM"
      }
    },
    "githubRepository": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The URL of the Github repository to use for the Github Actions Runner. This parameter is optional. If not provided, the Github Actions Runner will not be installed. If this parameter is provided, then github_token must also be provided."
      }
    },
    "githubToken": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The token to use for the Github Actions Runner. This parameter is optional. If not provided, the Github Actions Runner will not be installed. If this parameter is provided, then github_repository must also be provided."
      }
    },
    "adoOrganization": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The URL of the Azure DevOps organization to use for the Azure DevOps Agent. This parameter is optional. If not provided, the Github Azure DevOps will not be installed. If this parameter is provided, then ado_token must also be provided."
      }
    },
    "adoToken": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The PAT token to use for the Azure DevOps Agent. This parameter is optional. If not provided, the Github Azure DevOps will not be installed. If this parameter is provided, then ado_organization must also be provided."
      }
    },
    "installClis": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "A switch to indicate whether or not to install the Azure CLI, AZD CLI and git. This parameter is optional. If not provided, the Azure CLI, AZD CLI and git will not be installed"
      }
    },
    "installSsms": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "A switch to indicate whether or not to install Sql Server Management Studio (SSMS). This parameter is optional. If not provided, SSMS will not be installed."
      }
    },
    "autoApproveAfdPrivateEndpoint": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "set to true if you want to auto approve the Private Endpoint of the AFD"
      }
    }
  },
  "variables": {
    "tags": "[union(createObject('workloadName', parameters('workloadName'), 'environment', parameters('environmentName')), parameters('resourceTags'))]",
    "resourceSuffix": "[format('{0}-{1}-{2}', parameters('workloadName'), parameters('environmentName'), parameters('location'))]",
    "hubResourceGroupName": "[format('rg-hub-{0}', variables('resourceSuffix'))]",
    "spokeResourceGroupName": "[format('rg-spoke-{0}', variables('resourceSuffix'))]",
    "defaultSuffixes": [
      "[parameters('workloadName')]",
      "[parameters('environmentName')]",
      "**location**"
    ],
    "namingSuffixes": "[if(empty(parameters('numericSuffix')), variables('defaultSuffixes'), concat(variables('defaultSuffixes'), createArray(parameters('numericSuffix'))))]",
    "administrators": "[if(or(empty(parameters('sqlServerAdministrators')), equals(parameters('sqlServerAdministrators').sid, 'xxxx-xxxx-xxxx-xxxx-xxxx')), createObject(), union(createObject('administratorType', 'ActiveDirectory', 'principalType', 'Group', 'azureADOnlyAuthentication', false()), parameters('sqlServerAdministrators')))]",
    "enableTelemetry": true,
    "telemetryId": "[format('cf7e9f0a-f872-49db-b72f-f2e318189a6d-{0}-msb', parameters('location'))]"
  },
  "resources": [
    {
      "condition": "[empty(parameters('vnetHubResourceId'))]",
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2022-09-01",
      "name": "[variables('hubResourceGroupName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]"
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2022-09-01",
      "name": "[variables('spokeResourceGroupName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]"
    },
    {
      "condition": "[variables('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[variables('telemetryId')]",
      "location": "[parameters('location')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
          "contentVersion": "1.0.0.0",
          "resources": {}
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "namingModule-Deployment",
      "resourceGroup": "[variables('spokeResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "suffix": {
            "value": "[variables('namingSuffixes')]"
          },
          "uniqueLength": {
            "value": 6
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "9105389791545313673"
            }
          },
          "parameters": {
            "prefix": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. It is not recommended that you use prefix by azure you should be using a suffix for your resources."
              }
            },
            "suffix": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. It is recommended that you specify a suffix for consistency. Please use only lowercase characters when possible."
              }
            },
            "uniqueSeed": {
              "type": "string",
              "defaultValue": "[resourceGroup().id]",
              "metadata": {
                "description": "Optional. Custom seed value for the unique string to be created -defaults to resourceGroup Id."
              }
            },
            "uniqueLength": {
              "type": "int",
              "defaultValue": 4,
              "metadata": {
                "description": "Optional. Max length of the uniqueness suffix to be added -defaults to 4"
              }
            },
            "useDashes": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Use dashes as separator where applicable -defaults to true"
              }
            },
            "useLowerCase": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Create names using lowercase letters -defaults to true"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Used when region abbreviation is needed (placeholder value is \"**location**)"
              }
            }
          },
          "variables": {
            "uniquePart": "[substring(uniqueString(parameters('uniqueSeed')), 0, parameters('uniqueLength'))]",
            "delimiter": "[if(parameters('useDashes'), '-', '')]",
            "locationPlaceholder": "**location**",
            "regionAbbreviations": {
              "australiacentral": "auc",
              "australiacentral2": "auc2",
              "australiaeast": "aue",
              "australiasoutheast": "ause",
              "brazilsouth": "brs",
              "brazilsoutheast": "brse",
              "canadacentral": "canc",
              "canadaeast": "cane",
              "centralindia": "cin",
              "centralus": "cus",
              "centraluseuap": "cuseuap",
              "eastasia": "ea",
              "eastus": "eus",
              "eastus2": "eus2",
              "eastus2euap": "eus2euap",
              "francecentral": "frc",
              "francesouth": "frs",
              "germanynorth": "gern",
              "germanywestcentral": "gerwc",
              "japaneast": "jae",
              "japanwest": "jaw",
              "jioindiacentral": "jioinc",
              "jioindiawest": "jioinw",
              "koreacentral": "koc",
              "koreasouth": "kors",
              "northcentralus": "ncus",
              "northeurope": "neu",
              "norwayeast": "nore",
              "norwaywest": "norw",
              "southafricanorth": "san",
              "southafricawest": "saw",
              "southcentralus": "scus",
              "southeastasia": "sea",
              "southindia": "sin",
              "swedencentral": "swc",
              "switzerlandnorth": "swn",
              "switzerlandwest": "sww",
              "uaecentral": "uaec",
              "uaenorth": "uaen",
              "uksouth": "uks",
              "ukwest": "ukw",
              "westcentralus": "wcus",
              "westeurope": "weu",
              "westindia": "win",
              "westus": "wus",
              "westus2": "wus2",
              "westus3": "wus3"
            },
            "strPrefixJoined": "[if(empty(parameters('prefix')), '', format('{0}{1}', replace(replace(replace(string(parameters('prefix')), '[\"', ''), '\"]', ''), '\",\"', variables('delimiter')), variables('delimiter')))]",
            "strPrefixInterim": "[if(parameters('useLowerCase'), toLower(variables('strPrefixJoined')), variables('strPrefixJoined'))]",
            "strPrefix": "[replace(variables('strPrefixInterim'), variables('locationPlaceholder'), variables('regionAbbreviations')[parameters('location')])]",
            "strSuffixJoined": "[if(empty(parameters('suffix')), '', format('{0}{1}', variables('delimiter'), replace(replace(replace(string(parameters('suffix')), '[\"', ''), '\"]', ''), '\",\"', variables('delimiter'))))]",
            "strSuffixInterim": "[if(parameters('useLowerCase'), toLower(variables('strSuffixJoined')), variables('strSuffixJoined'))]",
            "strSuffix": "[replace(variables('strSuffixInterim'), variables('locationPlaceholder'), variables('regionAbbreviations')[parameters('location')])]",
            "placeholder": "[[****]",
            "nameTemplate": "[format('{0}{1}{2}', variables('strPrefix'), variables('placeholder'), variables('strSuffix'))]",
            "nameUniqueTemplate": "[format('{0}{1}{2}{3}{4}', variables('strPrefix'), variables('placeholder'), variables('strSuffix'), variables('delimiter'), variables('uniquePart'))]",
            "nameSafeTemplate": "[toLower(replace(variables('nameTemplate'), variables('delimiter'), ''))]",
            "nameUniqueSafeTemplate": "[toLower(replace(variables('nameUniqueTemplate'), variables('delimiter'), ''))]",
            "d": "[variables('delimiter')]",
            "ph": "[variables('placeholder')]",
            "nt": "[variables('nameTemplate')]",
            "nut": "[variables('nameUniqueTemplate')]",
            "nst": "[variables('nameSafeTemplate')]",
            "nust": "[variables('nameUniqueSafeTemplate')]",
            "names": {
              "analysisServicesServer": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'as'), 63)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'as'), 63)]",
                "slug": "as"
              },
              "apiManagement": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'apim'), 50)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'apim'), 50)]",
                "slug": "apim"
              },
              "appConfiguration": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'appcs'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'appcs'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'appcs'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'appcs'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'appcs'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'appcs'), 50))]",
                "slug": "appcs"
              },
              "appServiceEnvironment": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ase'), 36), variables('d')), take(replace(variables('nt'), variables('ph'), 'ase'), sub(36, 1)), take(replace(variables('nt'), variables('ph'), 'ase'), 36))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ase'), 36), variables('d')), take(replace(variables('nut'), variables('ph'), 'ase'), sub(36, 1)), take(replace(variables('nut'), variables('ph'), 'ase'), 36))]",
                "slug": "ase"
              },
              "appServicePlan": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'plan'), 40), variables('d')), take(replace(variables('nt'), variables('ph'), 'plan'), sub(40, 1)), take(replace(variables('nt'), variables('ph'), 'plan'), 40))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'plan'), 40), variables('d')), take(replace(variables('nut'), variables('ph'), 'plan'), sub(40, 1)), take(replace(variables('nut'), variables('ph'), 'plan'), 40))]",
                "slug": "plan"
              },
              "appService": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'app'), 60), variables('d')), take(replace(variables('nt'), variables('ph'), 'app'), sub(60, 1)), take(replace(variables('nt'), variables('ph'), 'app'), 60))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'app'), 60), variables('d')), take(replace(variables('nut'), variables('ph'), 'app'), sub(60, 1)), take(replace(variables('nut'), variables('ph'), 'app'), 60))]",
                "slug": "app"
              },
              "applicationGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'agw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'agw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'agw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'agw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'agw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'agw'), 80))]",
                "slug": "agw"
              },
              "applicationInsights": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'appi'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'appi'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'appi'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'appi'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'appi'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'appi'), 260))]",
                "slug": "appi"
              },
              "applicationSecurityGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asg'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'asg'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'asg'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asg'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'asg'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'asg'), 80))]",
                "slug": "asg"
              },
              "automationAccount": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aa'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'aa'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'aa'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aa'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'aa'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'aa'), 50))]",
                "slug": "aa"
              },
              "automationCertificate": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aacert'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'aacert'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'aacert'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aacert'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'aacert'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'aacert'), 128))]",
                "slug": "aacert"
              },
              "automationCredential": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aacred'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'aacred'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'aacred'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aacred'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'aacred'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'aacred'), 128))]",
                "slug": "aacred"
              },
              "automationRunbook": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aacred'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'aacred'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'aacred'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aacred'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'aacred'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'aacred'), 63))]",
                "slug": "aacred"
              },
              "automationSchedule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aasched'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'aasched'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'aasched'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aasched'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'aasched'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'aasched'), 128))]",
                "slug": "aasched"
              },
              "automationVariable": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aavar'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'aavar'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'aavar'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aavar'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'aavar'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'aavar'), 128))]",
                "slug": "aavar"
              },
              "availabilitySet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'avail'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'avail'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'avail'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'avail'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'avail'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'avail'), 80))]",
                "slug": "avail"
              },
              "bastionHost": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'bas'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'bas'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'bas'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'bas'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'bas'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'bas'), 80))]",
                "slug": "bas"
              },
              "batchAccount": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'ba'), 24)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'ba'), 24)]",
                "slug": "ba"
              },
              "batchApplication": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'baapp'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'baapp'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'baapp'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'baapp'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'baapp'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'baapp'), 64))]",
                "slug": "baapp"
              },
              "batchCertificate": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'bacert'), 45), variables('d')), take(replace(variables('nt'), variables('ph'), 'bacert'), sub(45, 1)), take(replace(variables('nt'), variables('ph'), 'bacert'), 45))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'bacert'), 45), variables('d')), take(replace(variables('nut'), variables('ph'), 'bacert'), sub(45, 1)), take(replace(variables('nut'), variables('ph'), 'bacert'), 45))]",
                "slug": "bacert"
              },
              "batchPool": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'bapool'), 24), variables('d')), take(replace(variables('nt'), variables('ph'), 'bapool'), sub(24, 1)), take(replace(variables('nt'), variables('ph'), 'bapool'), 24))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'bapool'), 24), variables('d')), take(replace(variables('nut'), variables('ph'), 'bapool'), sub(24, 1)), take(replace(variables('nut'), variables('ph'), 'bapool'), 24))]",
                "slug": "bapool"
              },
              "botChannelDirectline": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botline'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botline'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botline'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botline'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botline'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botline'), 64))]",
                "slug": "botline"
              },
              "botChannelEmail": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botmail'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botmail'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botmail'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botmail'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botmail'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botmail'), 64))]",
                "slug": "botmail"
              },
              "botChannelMsTeams": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botteams'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botteams'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botteams'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botteams'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botteams'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botteams'), 64))]",
                "slug": "botteams"
              },
              "botChannelSlack": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botslack'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botslack'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botslack'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botslack'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botslack'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botslack'), 64))]",
                "slug": "botslack"
              },
              "botChannelsRegistration": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botchan'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botchan'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botchan'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botchan'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botchan'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botchan'), 64))]",
                "slug": "botchan"
              },
              "botConnection": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botcon'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botcon'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botcon'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botcon'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botcon'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botcon'), 64))]",
                "slug": "botcon"
              },
              "botWebApp": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'bot'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'bot'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'bot'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'bot'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'bot'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'bot'), 64))]",
                "slug": "bot"
              },
              "cdnEndpoint": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cdn'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'cdn'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'cdn'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cdn'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'cdn'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'cdn'), 50))]",
                "slug": "cdn"
              },
              "cdnProfile": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cdnprof'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'cdnprof'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'cdnprof'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cdnprof'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'cdnprof'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'cdnprof'), 260))]",
                "slug": "cdnprof"
              },
              "cognitiveAccount": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cog'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'cog'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'cog'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cog'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'cog'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'cog'), 64))]",
                "slug": "cog"
              },
              "containerApps": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ca'), 32), variables('d')), take(replace(variables('nt'), variables('ph'), 'ca'), sub(32, 1)), take(replace(variables('nt'), variables('ph'), 'ca'), 32))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ca'), 32), variables('d')), take(replace(variables('nut'), variables('ph'), 'ca'), sub(32, 1)), take(replace(variables('nut'), variables('ph'), 'ca'), 32))]",
                "slug": "ca"
              },
              "containerAppsEnvironment": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cae'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'cae'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'cae'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cae'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'cae'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'cae'), 64))]",
                "slug": "cae"
              },
              "containerGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cg'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'cg'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'cg'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cg'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'cg'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'cg'), 63))]",
                "slug": "cg"
              },
              "containerRegistry": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'acr'), 63)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'acr'), 63)]",
                "slug": "acr"
              },
              "containerRegistryWebhook": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'crwh'), 50)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'crwh'), 50)]",
                "slug": "crwh"
              },
              "cosmosdbAccount": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cosmos'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'cosmos'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'cosmos'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cosmos'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'cosmos'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'cosmos'), 63))]",
                "slug": "cosmos"
              },
              "customProvider": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'prov'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'prov'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'prov'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'prov'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'prov'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'prov'), 64))]",
                "slug": "prov"
              },
              "dashboard": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dsb'), 160), variables('d')), take(replace(variables('nt'), variables('ph'), 'dsb'), sub(160, 1)), take(replace(variables('nt'), variables('ph'), 'dsb'), 160))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dsb'), 160), variables('d')), take(replace(variables('nut'), variables('ph'), 'dsb'), sub(160, 1)), take(replace(variables('nut'), variables('ph'), 'dsb'), 160))]",
                "slug": "dsb"
              },
              "dataFactory": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adf'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'adf'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'adf'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adf'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'adf'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'adf'), 63))]",
                "slug": "adf"
              },
              "dataFactoryDatasetMysql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfmysql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfmysql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfmysql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfmysql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfmysql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfmysql'), 260))]",
                "slug": "adfmysql"
              },
              "dataFactoryDatasetPostgresql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfpsql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfpsql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfpsql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfpsql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfpsql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfpsql'), 260))]",
                "slug": "adfpsql"
              },
              "dataFactoryDatasetSqlServerTable": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfmssql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfmssql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfmssql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfmssql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfmssql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfmssql'), 260))]",
                "slug": "adfmssql"
              },
              "dataFactoryIntegrationRuntimeManaged": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfir'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfir'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'adfir'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfir'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfir'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'adfir'), 63))]",
                "slug": "adfir"
              },
              "dataFactoryLinkedServiceDataLakeStorageGen2": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvst'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvst'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvst'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvst'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvst'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvst'), 260))]",
                "slug": "adfsvst"
              },
              "dataFactoryLinkedServiceKeyVault": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvkv'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvkv'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvkv'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvkv'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvkv'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvkv'), 260))]",
                "slug": "adfsvkv"
              },
              "dataFactoryLinkedServiceMysql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvmysql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvmysql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvmysql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvmysql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvmysql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvmysql'), 260))]",
                "slug": "adfsvmysql"
              },
              "dataFactoryLinkedServicePostgresql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvpsql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvpsql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvpsql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvpsql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvpsql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvpsql'), 260))]",
                "slug": "adfsvpsql"
              },
              "dataFactoryLinkedServiceSqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvmssql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvmssql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvmssql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvmssql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvmssql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvmssql'), 260))]",
                "slug": "adfsvmssql"
              },
              "dataFactoryPipeline": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfpl'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfpl'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfpl'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfpl'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfpl'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfpl'), 260))]",
                "slug": "adfpl"
              },
              "dataFactoryTriggerSchedule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adftg'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adftg'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adftg'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adftg'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adftg'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adftg'), 260))]",
                "slug": "adftg"
              },
              "dataLakeAnalyticsAccount": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'dla'), 24)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'dla'), 24)]",
                "slug": "dla"
              },
              "dataLakeAnalyticsFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dlfw'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'dlfw'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'dlfw'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dlfw'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'dlfw'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'dlfw'), 50))]",
                "slug": "dlfw"
              },
              "dataLakeStore": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'dls'), 24)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'dls'), 24)]",
                "slug": "dls"
              },
              "dataLakeStoreFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dlsfw'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'dlsfw'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'dlsfw'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dlsfw'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'dlsfw'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'dlsfw'), 50))]",
                "slug": "dlsfw"
              },
              "databaseMigrationProject": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'migr'), 57), variables('d')), take(replace(variables('nt'), variables('ph'), 'migr'), sub(57, 1)), take(replace(variables('nt'), variables('ph'), 'migr'), 57))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'migr'), 57), variables('d')), take(replace(variables('nut'), variables('ph'), 'migr'), sub(57, 1)), take(replace(variables('nut'), variables('ph'), 'migr'), 57))]",
                "slug": "migr"
              },
              "databaseMigrationService": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dms'), 62), variables('d')), take(replace(variables('nt'), variables('ph'), 'dms'), sub(62, 1)), take(replace(variables('nt'), variables('ph'), 'dms'), 62))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dms'), 62), variables('d')), take(replace(variables('nut'), variables('ph'), 'dms'), sub(62, 1)), take(replace(variables('nut'), variables('ph'), 'dms'), 62))]",
                "slug": "dms"
              },
              "databricksWorkspace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dbw'), 30), variables('d')), take(replace(variables('nt'), variables('ph'), 'dbw'), sub(30, 1)), take(replace(variables('nt'), variables('ph'), 'dbw'), 30))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dbw'), 30), variables('d')), take(replace(variables('nut'), variables('ph'), 'dbw'), sub(30, 1)), take(replace(variables('nut'), variables('ph'), 'dbw'), 30))]",
                "slug": "dbw"
              },
              "devTestLab": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lab'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'lab'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'lab'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lab'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'lab'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'lab'), 50))]",
                "slug": "lab"
              },
              "devTestLinuxVirtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'labvm'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'labvm'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'labvm'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'labvm'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'labvm'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'labvm'), 64))]",
                "slug": "labvm"
              },
              "devTestWindowsVirtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'labvm'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'labvm'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'labvm'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'labvm'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'labvm'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'labvm'), 15))]",
                "slug": "labvm"
              },
              "diskEncryptionSet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'des'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'des'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'des'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'des'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'des'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'des'), 80))]",
                "slug": "des"
              },
              "dnsZone": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dns'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'dns'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'dns'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dns'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'dns'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'dns'), 63))]",
                "slug": "dns"
              },
              "eventGridDomain": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'egd'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'egd'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'egd'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'egd'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'egd'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'egd'), 50))]",
                "slug": "egd"
              },
              "eventGridDomainTopic": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'egdt'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'egdt'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'egdt'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'egdt'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'egdt'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'egdt'), 50))]",
                "slug": "egdt"
              },
              "eventGridEventSubscription": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'egs'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'egs'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'egs'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'egs'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'egs'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'egs'), 64))]",
                "slug": "egs"
              },
              "eventGridTopic": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'egt'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'egt'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'egt'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'egt'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'egt'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'egt'), 50))]",
                "slug": "egt"
              },
              "eventHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'evh'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'evh'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'evh'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'evh'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'evh'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'evh'), 50))]",
                "slug": "evh"
              },
              "eventHubAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehar'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehar'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehar'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehar'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehar'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehar'), 50))]",
                "slug": "ehar"
              },
              "eventHubConsumerGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehcg'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehcg'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehcg'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehcg'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehcg'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehcg'), 50))]",
                "slug": "ehcg"
              },
              "eventHubNamespace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehn'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehn'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehn'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehn'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehn'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehn'), 50))]",
                "slug": "ehn"
              },
              "eventHubNamespaceAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehnar'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehnar'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehnar'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehnar'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehnar'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehnar'), 50))]",
                "slug": "ehnar"
              },
              "eventHubNamespaceDisasterRecoveryConfig": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehdr'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehdr'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehdr'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehdr'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehdr'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehdr'), 50))]",
                "slug": "ehdr"
              },
              "expressRouteCircuit": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'erc'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'erc'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'erc'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'erc'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'erc'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'erc'), 80))]",
                "slug": "erc"
              },
              "expressRouteGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ergw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'ergw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'ergw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ergw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'ergw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'ergw'), 80))]",
                "slug": "ergw"
              },
              "firewall": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'afw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'afw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'afw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'afw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'afw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'afw'), 80))]",
                "slug": "afw"
              },
              "firewallPolicy": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'afwp'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'afwp'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'afwp'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'afwp'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'afwp'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'afwp'), 80))]",
                "slug": "afwp"
              },
              "frontDoor": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'afd'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'afd'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'afd'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'afd'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'afd'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'afd'), 64))]",
                "slug": "afd"
              },
              "frontDoorFirewallPolicy": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'fdfp'), 128)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'fdfp'), 128)]",
                "slug": "fdfp"
              },
              "functionApp": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'func'), 60), variables('d')), take(replace(variables('nt'), variables('ph'), 'func'), sub(60, 1)), take(replace(variables('nt'), variables('ph'), 'func'), 60))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'func'), 60), variables('d')), take(replace(variables('nut'), variables('ph'), 'func'), sub(60, 1)), take(replace(variables('nut'), variables('ph'), 'func'), 60))]",
                "slug": "func"
              },
              "hdInsightHadoopCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'hadoop'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'hadoop'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'hadoop'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'hadoop'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'hadoop'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'hadoop'), 59))]",
                "slug": "hadoop"
              },
              "hdInsightHbaseCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'hbase'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'hbase'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'hbase'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'hbase'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'hbase'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'hbase'), 59))]",
                "slug": "hbase"
              },
              "hdInsightInteractiveQueryCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'iqr'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'iqr'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'iqr'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'iqr'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'iqr'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'iqr'), 59))]",
                "slug": "iqr"
              },
              "hdInsightKafkaCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kafka'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'kafka'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'kafka'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kafka'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'kafka'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'kafka'), 59))]",
                "slug": "kafka"
              },
              "hdInsightMlServicesCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mls'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'mls'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'mls'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mls'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'mls'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'mls'), 59))]",
                "slug": "mls"
              },
              "hdInsightRserverCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rsv'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'rsv'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'rsv'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rsv'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'rsv'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'rsv'), 59))]",
                "slug": "rsv"
              },
              "hdInsightSparkCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'spark'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'spark'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'spark'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'spark'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'spark'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'spark'), 59))]",
                "slug": "spark"
              },
              "hdInsightStormCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'storm'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'storm'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'storm'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'storm'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'storm'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'storm'), 59))]",
                "slug": "storm"
              },
              "image": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'img'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'img'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'img'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'img'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'img'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'img'), 80))]",
                "slug": "img"
              },
              "iotCentralApplication": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'iotapp'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'iotapp'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'iotapp'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'iotapp'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'iotapp'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'iotapp'), 63))]",
                "slug": "iotapp"
              },
              "iotHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'iot'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'iot'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'iot'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'iot'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'iot'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'iot'), 50))]",
                "slug": "iot"
              },
              "iotHubConsumerGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'iotcg'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'iotcg'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'iotcg'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'iotcg'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'iotcg'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'iotcg'), 50))]",
                "slug": "iotcg"
              },
              "iotHubDps": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dps'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'dps'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'dps'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dps'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'dps'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'dps'), 64))]",
                "slug": "dps"
              },
              "iotHubDpsCertificate": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dpscert'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'dpscert'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'dpscert'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dpscert'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'dpscert'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'dpscert'), 64))]",
                "slug": "dpscert"
              },
              "keyVault": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kv'), 24), variables('d')), take(replace(variables('nt'), variables('ph'), 'kv'), sub(24, 1)), take(replace(variables('nt'), variables('ph'), 'kv'), 24))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kv'), 24), variables('d')), take(replace(variables('nut'), variables('ph'), 'kv'), sub(24, 1)), take(replace(variables('nut'), variables('ph'), 'kv'), 24))]",
                "slug": "kv"
              },
              "keyVaultCertificate": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kvc'), 127), variables('d')), take(replace(variables('nt'), variables('ph'), 'kvc'), sub(127, 1)), take(replace(variables('nt'), variables('ph'), 'kvc'), 127))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kvc'), 127), variables('d')), take(replace(variables('nut'), variables('ph'), 'kvc'), sub(127, 1)), take(replace(variables('nut'), variables('ph'), 'kvc'), 127))]",
                "slug": "kvc"
              },
              "keyVaultKey": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kvk'), 127), variables('d')), take(replace(variables('nt'), variables('ph'), 'kvk'), sub(127, 1)), take(replace(variables('nt'), variables('ph'), 'kvk'), 127))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kvk'), 127), variables('d')), take(replace(variables('nut'), variables('ph'), 'kvk'), sub(127, 1)), take(replace(variables('nut'), variables('ph'), 'kvk'), 127))]",
                "slug": "kvk"
              },
              "keyVaultSecret": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kvs'), 127), variables('d')), take(replace(variables('nt'), variables('ph'), 'kvs'), sub(127, 1)), take(replace(variables('nt'), variables('ph'), 'kvs'), 127))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kvs'), 127), variables('d')), take(replace(variables('nut'), variables('ph'), 'kvs'), sub(127, 1)), take(replace(variables('nut'), variables('ph'), 'kvs'), 127))]",
                "slug": "kvs"
              },
              "kubernetesCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aks'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'aks'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'aks'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aks'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'aks'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'aks'), 63))]",
                "slug": "aks"
              },
              "kustoCluster": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'kc'), 22)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'kc'), 22)]",
                "slug": "kc"
              },
              "kustoDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kdb'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'kdb'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'kdb'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kdb'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'kdb'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'kdb'), 260))]",
                "slug": "kdb"
              },
              "kustoEventHubDataConnection": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kehc'), 40), variables('d')), take(replace(variables('nt'), variables('ph'), 'kehc'), sub(40, 1)), take(replace(variables('nt'), variables('ph'), 'kehc'), 40))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kehc'), 40), variables('d')), take(replace(variables('nut'), variables('ph'), 'kehc'), sub(40, 1)), take(replace(variables('nut'), variables('ph'), 'kehc'), 40))]",
                "slug": "kehc"
              },
              "loadBalancer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lb'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'lb'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'lb'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lb'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'lb'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'lb'), 80))]",
                "slug": "lb"
              },
              "loadBalancerNatRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lbnatrl'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'lbnatrl'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'lbnatrl'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lbnatrl'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'lbnatrl'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'lbnatrl'), 80))]",
                "slug": "lbnatrl"
              },
              "loadTesting": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lt'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'lt'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'lt'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lt'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'lt'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'lt'), 64))]",
                "slug": "lt"
              },
              "linuxVirtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vm'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'vm'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'vm'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vm'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'vm'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'vm'), 64))]",
                "slug": "vm"
              },
              "linuxVirtualMachineScaleSet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vmss'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'vmss'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'vmss'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vmss'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'vmss'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'vmss'), 64))]",
                "slug": "vmss"
              },
              "localNetworkGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lgw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'lgw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'lgw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lgw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'lgw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'lgw'), 80))]",
                "slug": "lgw"
              },
              "logAnalyticsWorkspace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'log'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'log'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'log'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'log'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'log'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'log'), 63))]",
                "slug": "log"
              },
              "machineLearningWorkspace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mlw'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'mlw'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'mlw'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mlw'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'mlw'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'mlw'), 260))]",
                "slug": "mlw"
              },
              "managedDisk": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dsk'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'dsk'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'dsk'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dsk'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'dsk'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'dsk'), 80))]",
                "slug": "dsk"
              },
              "mapsAccount": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'map'), 98), variables('d')), take(replace(variables('nt'), variables('ph'), 'map'), sub(98, 1)), take(replace(variables('nt'), variables('ph'), 'map'), 98))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'map'), 98), variables('d')), take(replace(variables('nut'), variables('ph'), 'map'), sub(98, 1)), take(replace(variables('nut'), variables('ph'), 'map'), 98))]",
                "slug": "map"
              },
              "mariadbDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mariadb'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'mariadb'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'mariadb'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mariadb'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'mariadb'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'mariadb'), 63))]",
                "slug": "mariadb"
              },
              "mariadbFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mariafw'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'mariafw'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'mariafw'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mariafw'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'mariafw'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'mariafw'), 128))]",
                "slug": "mariafw"
              },
              "mariadbServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'maria'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'maria'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'maria'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'maria'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'maria'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'maria'), 63))]",
                "slug": "maria"
              },
              "mariadbVirtualNetworkRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mariavn'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'mariavn'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'mariavn'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mariavn'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'mariavn'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'mariavn'), 128))]",
                "slug": "mariavn"
              },
              "mssqlDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqldb'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqldb'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'sqldb'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqldb'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqldb'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'sqldb'), 128))]",
                "slug": "sqldb"
              },
              "mssqlElasticpool": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqlep'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqlep'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'sqlep'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqlep'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqlep'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'sqlep'), 128))]",
                "slug": "sqlep"
              },
              "mssqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sql'), 63))]",
                "slug": "sql"
              },
              "mysqlDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mysqldb'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'mysqldb'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'mysqldb'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mysqldb'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'mysqldb'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'mysqldb'), 63))]",
                "slug": "mysqldb"
              },
              "mysqlFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mysqlfw'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'mysqlfw'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'mysqlfw'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mysqlfw'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'mysqlfw'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'mysqlfw'), 128))]",
                "slug": "mysqlfw"
              },
              "mysqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mysql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'mysql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'mysql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mysql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'mysql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'mysql'), 63))]",
                "slug": "mysql"
              },
              "mysqlVirtualNetworkRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mysqlvn'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'mysqlvn'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'mysqlvn'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mysqlvn'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'mysqlvn'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'mysqlvn'), 128))]",
                "slug": "mysqlvn"
              },
              "networkInterface": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nic'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nic'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nic'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nic'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nic'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nic'), 80))]",
                "slug": "nic"
              },
              "networkSecurityGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nsg'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nsg'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nsg'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nsg'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nsg'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nsg'), 80))]",
                "slug": "nsg"
              },
              "networkSecurityGroupRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nsgr'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nsgr'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nsgr'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nsgr'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nsgr'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nsgr'), 80))]",
                "slug": "nsgr"
              },
              "networkSecurityRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nsgr'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nsgr'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nsgr'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nsgr'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nsgr'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nsgr'), 80))]",
                "slug": "nsgr"
              },
              "networkWatcher": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nw'), 80))]",
                "slug": "nw"
              },
              "notificationHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nh'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'nh'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'nh'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nh'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'nh'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'nh'), 260))]",
                "slug": "nh"
              },
              "notificationHubAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dnsrec'), 256), variables('d')), take(replace(variables('nt'), variables('ph'), 'dnsrec'), sub(256, 1)), take(replace(variables('nt'), variables('ph'), 'dnsrec'), 256))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dnsrec'), 256), variables('d')), take(replace(variables('nut'), variables('ph'), 'dnsrec'), sub(256, 1)), take(replace(variables('nut'), variables('ph'), 'dnsrec'), 256))]",
                "slug": "dnsrec"
              },
              "notificationHubNamespace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dnsrec'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'dnsrec'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'dnsrec'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dnsrec'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'dnsrec'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'dnsrec'), 50))]",
                "slug": "dnsrec"
              },
              "pointToSiteVpnGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vpngw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'vpngw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'vpngw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vpngw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'vpngw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'vpngw'), 80))]",
                "slug": "vpngw"
              },
              "postgresqlDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'psqldb'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'psqldb'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'psqldb'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'psqldb'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'psqldb'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'psqldb'), 63))]",
                "slug": "psqldb"
              },
              "postgresqlFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'psqlfw'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'psqlfw'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'psqlfw'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'psqlfw'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'psqlfw'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'psqlfw'), 128))]",
                "slug": "psqlfw"
              },
              "postgresqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'psql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'psql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'psql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'psql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'psql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'psql'), 63))]",
                "slug": "psql"
              },
              "postgresqlVirtualNetworkRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'psqlvn'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'psqlvn'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'psqlvn'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'psqlvn'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'psqlvn'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'psqlvn'), 128))]",
                "slug": "psqlvn"
              },
              "powerbiEmbedded": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'pbi'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'pbi'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'pbi'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'pbi'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'pbi'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'pbi'), 63))]",
                "slug": "pbi"
              },
              "privateDnsZone": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'pdns'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'pdns'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'pdns'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'pdns'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'pdns'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'pdns'), 63))]",
                "slug": "pdns"
              },
              "publicIp": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'pip'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'pip'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'pip'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'pip'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'pip'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'pip'), 80))]",
                "slug": "pip"
              },
              "publicIpPrefix": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'pippf'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'pippf'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'pippf'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'pippf'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'pippf'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'pippf'), 80))]",
                "slug": "pippf"
              },
              "redisCache": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'redis'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'redis'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'redis'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'redis'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'redis'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'redis'), 63))]",
                "slug": "redis"
              },
              "redisFirewallRule": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'redisfw'), 256)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'redisfw'), 256)]",
                "slug": "redisfw"
              },
              "relayHybridConnection": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rlhc'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'rlhc'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'rlhc'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rlhc'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'rlhc'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'rlhc'), 260))]",
                "slug": "rlhc"
              },
              "relayNamespace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rln'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'rln'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'rln'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rln'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'rln'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'rln'), 50))]",
                "slug": "rln"
              },
              "resourceGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rg'), 90), variables('d')), take(replace(variables('nt'), variables('ph'), 'rg'), sub(90, 1)), take(replace(variables('nt'), variables('ph'), 'rg'), 90))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rg'), 90), variables('d')), take(replace(variables('nut'), variables('ph'), 'rg'), sub(90, 1)), take(replace(variables('nut'), variables('ph'), 'rg'), 90))]",
                "slug": "rg"
              },
              "roleAssignment": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ra'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'ra'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'ra'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ra'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'ra'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'ra'), 64))]",
                "slug": "ra"
              },
              "roleDefinition": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rd'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'rd'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'rd'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rd'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'rd'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'rd'), 64))]",
                "slug": "rd"
              },
              "route": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rt'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'rt'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'rt'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rt'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'rt'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'rt'), 80))]",
                "slug": "udr"
              },
              "routeTable": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'route'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'route'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'route'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'route'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'route'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'route'), 80))]",
                "slug": "rt"
              },
              "serviceFabricCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sf'), 23), variables('d')), take(replace(variables('nt'), variables('ph'), 'sf'), sub(23, 1)), take(replace(variables('nt'), variables('ph'), 'sf'), 23))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sf'), 23), variables('d')), take(replace(variables('nut'), variables('ph'), 'sf'), sub(23, 1)), take(replace(variables('nut'), variables('ph'), 'sf'), 23))]",
                "slug": "sf"
              },
              "serviceBusNamespace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sb'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sb'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sb'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sb'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sb'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sb'), 50))]",
                "slug": "sb"
              },
              "serviceBusNamespaceAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbar'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbar'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sbar'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbar'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbar'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sbar'), 50))]",
                "slug": "sbar"
              },
              "serviceBusQueue": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbq'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbq'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'sbq'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbq'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbq'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'sbq'), 260))]",
                "slug": "sbq"
              },
              "serviceBusQueueAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbqar'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbqar'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sbqar'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbqar'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbqar'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sbqar'), 50))]",
                "slug": "sbqar"
              },
              "serviceBusSubscription": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbs'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbs'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sbs'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbs'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbs'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sbs'), 50))]",
                "slug": "sbs"
              },
              "serviceBusSubscriptionRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbsr'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbsr'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sbsr'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbsr'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbsr'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sbsr'), 50))]",
                "slug": "sbsr"
              },
              "serviceBusTopic": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbt'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbt'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'sbt'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbt'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbt'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'sbt'), 260))]",
                "slug": "sbt"
              },
              "serviceBusTopicAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dnsrec'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'dnsrec'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'dnsrec'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dnsrec'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'dnsrec'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'dnsrec'), 50))]",
                "slug": "dnsrec"
              },
              "sharedImage": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'si'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'si'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'si'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'si'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'si'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'si'), 80))]",
                "slug": "si"
              },
              "sharedImageGallery": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'sig'), 80)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'sig'), 80)]",
                "slug": "sig"
              },
              "signalrService": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sgnlr'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sgnlr'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sgnlr'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sgnlr'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sgnlr'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sgnlr'), 63))]",
                "slug": "sgnlr"
              },
              "snapshots": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'snap'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'snap'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'snap'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'snap'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'snap'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'snap'), 80))]",
                "slug": "snap"
              },
              "sqlElasticpool": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqlep'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqlep'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'sqlep'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqlep'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqlep'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'sqlep'), 128))]",
                "slug": "sqlep"
              },
              "sqlFailoverGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqlfg'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqlfg'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sqlfg'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqlfg'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqlfg'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sqlfg'), 63))]",
                "slug": "sqlfg"
              },
              "sqlFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqlfw'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqlfw'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'sqlfw'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqlfw'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqlfw'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'sqlfw'), 128))]",
                "slug": "sqlfw"
              },
              "sqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sql'), 63))]",
                "slug": "sql"
              },
              "storageAccount": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'st'), 24)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'st'), 24)]",
                "slug": "st"
              },
              "storageBlob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'blob'), 1024), variables('d')), take(replace(variables('nt'), variables('ph'), 'blob'), sub(1024, 1)), take(replace(variables('nt'), variables('ph'), 'blob'), 1024))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'blob'), 1024), variables('d')), take(replace(variables('nut'), variables('ph'), 'blob'), sub(1024, 1)), take(replace(variables('nut'), variables('ph'), 'blob'), 1024))]",
                "slug": "blob"
              },
              "storageContainer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'stct'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'stct'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'stct'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'stct'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'stct'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'stct'), 63))]",
                "slug": "stct"
              },
              "storageDataLakeGen2Filesystem": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'stdl'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'stdl'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'stdl'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'stdl'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'stdl'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'stdl'), 63))]",
                "slug": "stdl"
              },
              "storageQueue": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'stq'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'stq'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'stq'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'stq'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'stq'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'stq'), 63))]",
                "slug": "stq"
              },
              "storageShare": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sts'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sts'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sts'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sts'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sts'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sts'), 63))]",
                "slug": "sts"
              },
              "storageShareDirectory": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sts'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sts'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sts'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sts'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sts'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sts'), 63))]",
                "slug": "sts"
              },
              "storageTable": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'stt'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'stt'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'stt'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'stt'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'stt'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'stt'), 63))]",
                "slug": "stt"
              },
              "streamAnalyticsFunctionJavascriptUdf": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asafunc'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asafunc'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asafunc'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asafunc'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asafunc'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asafunc'), 63))]",
                "slug": "asafunc"
              },
              "streamAnalyticsJob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asa'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asa'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asa'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asa'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asa'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asa'), 63))]",
                "slug": "asa"
              },
              "streamAnalyticsOutputBlob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaoblob'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaoblob'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaoblob'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaoblob'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaoblob'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaoblob'), 63))]",
                "slug": "asaoblob"
              },
              "streamAnalyticsOutputEventHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaoeh'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaoeh'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaoeh'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaoeh'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaoeh'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaoeh'), 63))]",
                "slug": "asaoeh"
              },
              "streamAnalyticsOutputMssql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaomssql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaomssql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaomssql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaomssql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaomssql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaomssql'), 63))]",
                "slug": "asaomssql"
              },
              "streamAnalyticsOutputServiceBusQueue": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaosbq'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaosbq'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaosbq'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaosbq'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaosbq'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaosbq'), 63))]",
                "slug": "asaosbq"
              },
              "streamAnalyticsOutputServiceBusTopic": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaosbt'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaosbt'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaosbt'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaosbt'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaosbt'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaosbt'), 63))]",
                "slug": "asaosbt"
              },
              "streamAnalyticsReferenceInputBlob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asarblob'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asarblob'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asarblob'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asarblob'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asarblob'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asarblob'), 63))]",
                "slug": "asarblob"
              },
              "streamAnalyticsStreamInputBlob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaiblob'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaiblob'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaiblob'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaiblob'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaiblob'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaiblob'), 63))]",
                "slug": "asaiblob"
              },
              "streamAnalyticsStreamInputEventHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaieh'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaieh'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaieh'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaieh'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaieh'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaieh'), 63))]",
                "slug": "asaieh"
              },
              "streamAnalyticsStreamInputIotHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaiiot'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaiiot'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaiiot'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaiiot'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaiiot'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaiiot'), 63))]",
                "slug": "asaiiot"
              },
              "subnet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'snet'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'snet'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'snet'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'snet'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'snet'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'snet'), 80))]",
                "slug": "snet"
              },
              "templateDeployment": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'deploy'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'deploy'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'deploy'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'deploy'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'deploy'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'deploy'), 64))]",
                "slug": "deploy"
              },
              "trafficManagerProfile": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'traf'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'traf'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'traf'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'traf'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'traf'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'traf'), 63))]",
                "slug": "traf"
              },
              "virtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vm'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'vm'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'vm'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vm'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'vm'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'vm'), 15))]",
                "slug": "vm"
              },
              "virtualMachineScaleSet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vmss'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'vmss'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'vmss'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vmss'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'vmss'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'vmss'), 15))]",
                "slug": "vmss"
              },
              "virtualNetwork": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vnet'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'vnet'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'vnet'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vnet'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'vnet'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'vnet'), 64))]",
                "slug": "vnet"
              },
              "virtualNetworkGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vgw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'vgw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'vgw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vgw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'vgw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'vgw'), 80))]",
                "slug": "vgw"
              },
              "virtualNetworkPeering": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vpeer'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'vpeer'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'vpeer'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vpeer'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'vpeer'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'vpeer'), 80))]",
                "slug": "vpeer"
              },
              "virtualWan": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vwan'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'vwan'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'vwan'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vwan'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'vwan'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'vwan'), 80))]",
                "slug": "vwan"
              },
              "windowsVirtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vm'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'vm'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'vm'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vm'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'vm'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'vm'), 15))]",
                "slug": "vm"
              },
              "windowsVirtualMachineScaleSet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vmss'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'vmss'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'vmss'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vmss'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'vmss'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'vmss'), 15))]",
                "slug": "vmss"
              },
              "userAssignedManagedIdentity": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'id'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'id'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'id'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'id'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'id'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'id'), 128))]",
                "slug": "id"
              }
            }
          },
          "resources": [],
          "outputs": {
            "names": {
              "type": "object",
              "value": "[variables('names')]"
            },
            "regionAbbreviations": {
              "type": "object",
              "value": "[variables('regionAbbreviations')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('spokeResourceGroupName'))]"
      ]
    },
    {
      "condition": "[empty(parameters('vnetHubResourceId'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('hub-{0}-deployment', deployment().name), 64)]",
      "resourceGroup": "[variables('hubResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "naming": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('spokeResourceGroupName')), 'Microsoft.Resources/deployments', 'namingModule-Deployment'), '2022-09-01').outputs.names.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vnetHubAddressSpace": {
            "value": "[parameters('vnetHubAddressSpace')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "subnetHubBastionAddressSpace": {
            "value": "[parameters('subnetHubBastionAddressSpace')]"
          },
          "subnetHubFirewallAddressSpace": {
            "value": "[parameters('subnetHubFirewallAddressSpace')]"
          },
          "vnetSpokeAddressSpace": {
            "value": "[parameters('vnetSpokeAddressSpace')]"
          },
          "subnetSpokeDevOpsAddressSpace": {
            "value": "[parameters('subnetSpokeDevOpsAddressSpace')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "5647597518375120293"
            }
          },
          "parameters": {
            "naming": {
              "type": "object"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Azure region where the resources will be deployed in"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Resource tags that we might need to add to all resources (i.e. Environment Cost center application name etc)"
              }
            },
            "vnetHubAddressSpace": {
              "type": "string",
              "metadata": {
                "description": "CIDR of the HUB vnet i.e. 192.168.0.0/24"
              }
            },
            "subnetHubFirewallAddressSpace": {
              "type": "string",
              "metadata": {
                "description": "CIDR of the subnet hosting the azure Firewall"
              }
            },
            "subnetHubBastionAddressSpace": {
              "type": "string",
              "metadata": {
                "description": "CIDR of the subnet hosting the Bastion Service"
              }
            },
            "vnetSpokeAddressSpace": {
              "type": "string",
              "metadata": {
                "description": "CIDR of the SPOKE vnet i.e. 192.168.0.0/24"
              }
            },
            "subnetSpokeDevOpsAddressSpace": {
              "type": "string",
              "metadata": {
                "description": "CIDR of the subnet that will hold devOps agents etc "
              }
            }
          },
          "variables": {
            "resourceNames": {
              "bastionService": "[parameters('naming').bastionHost.name]",
              "laws": "[take(format('{0}-hub', parameters('naming').logAnalyticsWorkspace.name), 63)]",
              "azFw": "[parameters('naming').firewall.name]",
              "vnetHub": "[take(format('{0}-hub', parameters('naming').virtualNetwork.name), 80)]",
              "subnetFirewall": "AzureFirewallSubnet",
              "subnetBastion": "AzureBastionSubnet"
            },
            "subnets": [
              {
                "name": "[variables('resourceNames').subnetFirewall]",
                "properties": {
                  "addressPrefix": "[parameters('subnetHubFirewallAddressSpace')]",
                  "privateEndpointNetworkPolicies": "Disabled"
                }
              },
              {
                "name": "[variables('resourceNames').subnetBastion]",
                "properties": {
                  "addressPrefix": "[parameters('subnetHubBastionAddressSpace')]",
                  "privateEndpointNetworkPolicies": "Disabled"
                }
              }
            ],
            "applicationRules": [
              {
                "name": "Azure-Monitor-FQDNs",
                "properties": {
                  "action": {
                    "type": "allow"
                  },
                  "priority": 201,
                  "rules": [
                    {
                      "fqdnTags": [],
                      "targetFqdns": [
                        "dc.applicationinsights.azure.com",
                        "dc.applicationinsights.microsoft.com",
                        "dc.services.visualstudio.com",
                        "*.in.applicationinsights.azure.com",
                        "live.applicationinsights.azure.com",
                        "rt.applicationinsights.microsoft.com",
                        "rt.services.visualstudio.com",
                        "*.livediagnostics.monitor.azure.com",
                        "*.monitoring.azure.com",
                        "agent.azureserviceprofiler.net",
                        "*.agent.azureserviceprofiler.net",
                        "*.monitor.azure.com"
                      ],
                      "name": "allow-azure-monitor",
                      "protocols": [
                        {
                          "port": "443",
                          "protocolType": "HTTPS"
                        }
                      ],
                      "sourceAddresses": [
                        "[parameters('vnetHubAddressSpace')]",
                        "[parameters('vnetSpokeAddressSpace')]"
                      ]
                    },
                    {
                      "name": "allow-azure-ad-join",
                      "protocols": [
                        {
                          "port": "443",
                          "protocolType": "HTTPS"
                        }
                      ],
                      "sourceAddresses": [
                        "[parameters('subnetSpokeDevOpsAddressSpace')]"
                      ],
                      "targetFqdns": [
                        "enterpriseregistration.windows.net",
                        "pas.windows.net",
                        "login.microsoftonline.com",
                        "device.login.microsoftonline.com",
                        "autologon.microsoftazuread-sso.com",
                        "manage-beta.microsoft.com",
                        "manage.microsoft.com",
                        "aadcdn.msauth.net",
                        "aadcdn.msftauth.net",
                        "aadcdn.msftauthimages.net",
                        "*.sts.microsoft.com",
                        "*.manage-beta.microsoft.com",
                        "*.manage.microsoft.com"
                      ]
                    }
                  ]
                }
              },
              {
                "name": "Devops-VM-Dependencies-FQDNs",
                "properties": {
                  "action": {
                    "type": "allow"
                  },
                  "priority": 202,
                  "rules": [
                    {
                      "fqdnTags": [],
                      "targetFqdns": [
                        "enterpriseregistration.windows.net",
                        "pas.windows.net",
                        "login.microsoftonline.com",
                        "device.login.microsoftonline.com",
                        "autologon.microsoftazuread-sso.com",
                        "manage-beta.microsoft.com",
                        "manage.microsoft.com",
                        "aadcdn.msauth.net",
                        "aadcdn.msftauth.net",
                        "aadcdn.msftauthimages.net",
                        "*.sts.microsoft.com",
                        "*.manage-beta.microsoft.com",
                        "*.manage.microsoft.com"
                      ],
                      "name": "allow-azure-ad-join",
                      "protocols": [
                        {
                          "port": "443",
                          "protocolType": "HTTPS"
                        }
                      ],
                      "sourceAddresses": [
                        "[parameters('subnetSpokeDevOpsAddressSpace')]"
                      ]
                    },
                    {
                      "name": "allow-vm-dependencies-and-tools",
                      "protocols": [
                        {
                          "port": "443",
                          "protocolType": "HTTPS"
                        }
                      ],
                      "sourceAddresses": [
                        "[parameters('subnetSpokeDevOpsAddressSpace')]"
                      ],
                      "targetFqdns": [
                        "aka.ms",
                        "go.microsoft.com",
                        "download.microsoft.com",
                        "edge.microsoft.com",
                        "fs.microsoft.com",
                        "wdcp.microsoft.com",
                        "wdcpalt.microsoft.com",
                        "msedge.api.cdp.microsoft.com",
                        "winatp-gw-cane.microsoft.com",
                        "*.google.com",
                        "*.live.com",
                        "*.bing.com",
                        "*.msappproxy.net",
                        "*.delivery.mp.microsoft.com",
                        "*.data.microsoft.com",
                        "*.blob.storage.azure.net",
                        "*.blob.core.windows.net",
                        "*.dl.delivery.mp.microsoft.com",
                        "*.prod.do.dsp.mp.microsoft.com",
                        "*.update.microsoft.com",
                        "*.windowsupdate.com",
                        "*.apps.qualys.com",
                        "*.bootstrapcdn.com",
                        "*.jsdelivr.net",
                        "*.jquery.com",
                        "*.msecnd.net"
                      ]
                    }
                  ]
                }
              },
              {
                "name": "Core-Dependencies-FQDNs",
                "properties": {
                  "action": {
                    "type": "allow"
                  },
                  "priority": 200,
                  "rules": [
                    {
                      "fqdnTags": [],
                      "targetFqdns": [
                        "management.azure.com",
                        "management.core.windows.net",
                        "login.microsoftonline.com",
                        "login.windows.net",
                        "login.live.com",
                        "graph.windows.net"
                      ],
                      "name": "allow-core-apis",
                      "protocols": [
                        {
                          "port": "443",
                          "protocolType": "HTTPS"
                        }
                      ],
                      "sourceAddresses": [
                        "[parameters('vnetSpokeAddressSpace')]",
                        "[parameters('vnetHubAddressSpace')]"
                      ]
                    },
                    {
                      "name": "allow-developer-services",
                      "protocols": [
                        {
                          "port": "443",
                          "protocolType": "HTTPS"
                        }
                      ],
                      "sourceAddresses": [
                        "[parameters('vnetSpokeAddressSpace')]",
                        "[parameters('vnetHubAddressSpace')]"
                      ],
                      "targetFqdns": [
                        "github.com",
                        "*.github.com",
                        "*.nuget.org",
                        "*.blob.core.windows.net",
                        "raw.githubusercontent.com",
                        "dev.azure.com",
                        "portal.azure.com",
                        "*.portal.azure.com",
                        "*.portal.azure.net",
                        "appservice.azureedge.net",
                        "*.azurewebsites.net",
                        "edge.management.azure.com"
                      ]
                    },
                    {
                      "name": "allow-certificate-dependencies",
                      "protocols": [
                        {
                          "port": "80",
                          "protocolType": "HTTP"
                        },
                        {
                          "port": "443",
                          "protocolType": "HTTPS"
                        }
                      ],
                      "sourceAddresses": [
                        "[parameters('vnetSpokeAddressSpace')]",
                        "[parameters('vnetHubAddressSpace')]"
                      ],
                      "targetFqdns": [
                        "*.delivery.mp.microsoft.com",
                        "ctldl.windowsupdate.com",
                        "ocsp.msocsp.com",
                        "oneocsp.microsoft.com",
                        "crl.microsoft.com",
                        "www.microsoft.com",
                        "*.digicert.com",
                        "*.symantec.com",
                        "*.symcb.com",
                        "*.d-trust.net"
                      ]
                    }
                  ]
                }
              }
            ],
            "networkRules": [
              {
                "name": "Windows-VM-Connectivity-Requirements",
                "properties": {
                  "action": {
                    "type": "allow"
                  },
                  "priority": 202,
                  "rules": [
                    {
                      "destinationAddresses": [
                        "20.118.99.224",
                        "40.83.235.53",
                        "23.102.135.246",
                        "51.4.143.248",
                        "23.97.0.13",
                        "52.126.105.2"
                      ],
                      "destinationPorts": [
                        "*"
                      ],
                      "name": "allow-kms-activation",
                      "protocols": [
                        "Any"
                      ],
                      "sourceAddresses": [
                        "[parameters('subnetSpokeDevOpsAddressSpace')]"
                      ]
                    },
                    {
                      "destinationAddresses": [
                        "*"
                      ],
                      "destinationPorts": [
                        "123",
                        "12000"
                      ],
                      "name": "allow-ntp",
                      "protocols": [
                        "Any"
                      ],
                      "sourceAddresses": [
                        "[parameters('subnetSpokeDevOpsAddressSpace')]"
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "vnetHub-Deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[variables('resourceNames').vnetHub]"
                  },
                  "subnetsInfo": {
                    "value": "[variables('subnets')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "vnetAddressSpace": {
                    "value": "[parameters('vnetHubAddressSpace')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "10598031696640381029"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 80,
                      "minLength": 2,
                      "metadata": {
                        "description": "Name of the resource Virtual Network (The name must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens)"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure Region where the resource will be deployed in"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "key-value pairs as tags, to identify the resource"
                      }
                    },
                    "vnetAddressSpace": {
                      "type": "string",
                      "metadata": {
                        "description": "CIDR to be allocated to the new vnet i.e. 192.168.0.0/24"
                      }
                    },
                    "subnetsInfo": {
                      "type": "array",
                      "metadata": {
                        "description": "Pass an array of objects for all the required subnets"
                      }
                    },
                    "ddosProtectionPlanId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
                      }
                    }
                  },
                  "variables": {
                    "vnetNameMaxLength": 80,
                    "vnetName": "[take(parameters('name'), variables('vnetNameMaxLength'))]",
                    "ddosProtectionPlan": {
                      "id": "[parameters('ddosProtectionPlanId')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2022-07-01",
                      "name": "[variables('vnetName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "addressSpace": {
                          "addressPrefixes": [
                            "[parameters('vnetAddressSpace')]"
                          ]
                        },
                        "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanId'))), variables('ddosProtectionPlan'), null())]",
                        "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanId')))]",
                        "subnets": "[parameters('subnetsInfo')]"
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "vnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource id of the newly created Virtual network"
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                    },
                    "vnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource name of the newly created Virtual network"
                      },
                      "value": "[variables('vnetName')]"
                    },
                    "vnetSubnets": {
                      "type": "array",
                      "metadata": {
                        "description": "Outputs the array of the subnets, printing: index, subnetResourceId, subnerName. "
                      },
                      "copy": {
                        "count": "[length(parameters('subnetsInfo'))]",
                        "input": {
                          "subnetIndex": "[copyIndex()]",
                          "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2022-07-01').subnets[copyIndex()].id]",
                          "name": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2022-07-01').subnets[copyIndex()].name]"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "bastionSvc-Deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[variables('resourceNames').bastionService]"
                  },
                  "vnetId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnetHub-Deployment'), '2022-09-01').outputs.vnetId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "sku": {
                    "value": "Standard"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "6201606284384486522"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Bastion Service."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region where the resources will be deployed in"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the Azure Firewall resource."
                      }
                    },
                    "vnetId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The virtual network ID containing AzureBastionSubnet. "
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "Basic",
                      "allowedValues": [
                        "Basic",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Bastion sku, default is basic"
                      }
                    }
                  },
                  "variables": {
                    "bastionNameMaxLength": 80,
                    "bastionNameSantized": "[if(greater(length(parameters('name')), variables('bastionNameMaxLength')), substring(parameters('name'), 0, variables('bastionNameMaxLength')), parameters('name'))]",
                    "snetBastion": {
                      "id": "[format('{0}/subnets/AzureBastionSubnet', parameters('vnetId'))]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/bastionHosts",
                      "apiVersion": "2022-07-01",
                      "name": "[variables('bastionNameSantized')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('sku')]"
                      },
                      "properties": {
                        "enableTunneling": "[if(equals(parameters('sku'), 'Standard'), true(), false())]",
                        "ipConfigurations": [
                          {
                            "name": "IpConf",
                            "properties": {
                              "subnet": "[variables('snetBastion')]",
                              "publicIPAddress": {
                                "id": "[reference(resourceId('Microsoft.Resources/deployments', 'pipBastionHostDeployment'), '2022-09-01').outputs.pipResourceId.value]"
                              }
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'pipBastionHostDeployment')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "pipBastionHostDeployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "[format('pip-{0}', variables('bastionNameSantized'))]"
                          },
                          "skuTier": {
                            "value": "Regional"
                          },
                          "skuName": {
                            "value": "Standard"
                          },
                          "publicIPAllocationMethod": {
                            "value": "Static"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "9758115776705728804"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Bastion Service."
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Azure region where the resources will be deployed in"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "publicIPPrefixResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                              }
                            },
                            "publicIPAllocationMethod": {
                              "type": "string",
                              "defaultValue": "Dynamic",
                              "allowedValues": [
                                "Dynamic",
                                "Static"
                              ],
                              "metadata": {
                                "description": "Optional, default is dynamic. The public IP address allocation method."
                              }
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "Basic",
                              "allowedValues": [
                                "Basic",
                                "Standard"
                              ],
                              "metadata": {
                                "description": "Optional defaulr is Basic. Name of a public IP address SKU."
                              }
                            },
                            "skuTier": {
                              "type": "string",
                              "defaultValue": "Regional",
                              "allowedValues": [
                                "Global",
                                "Regional"
                              ],
                              "metadata": {
                                "description": "Optional, default is Regional. Tier of a public IP address SKU."
                              }
                            },
                            "zones": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional, default no zones. A list of availability zones denoting the IP allocated for the resource needs to come from."
                              }
                            },
                            "publicIPAddressVersion": {
                              "type": "string",
                              "defaultValue": "IPv4",
                              "allowedValues": [
                                "IPv4",
                                "IPv6"
                              ],
                              "metadata": {
                                "description": "Optional, default is IPv4. IP address version."
                              }
                            },
                            "domainNameLabel": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                              }
                            },
                            "fqdn": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                              }
                            },
                            "reverseFqdn": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2022-07-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('skuName')]",
                                "tier": "[parameters('skuTier')]"
                              },
                              "zones": "[parameters('zones')]",
                              "properties": {
                                "dnsSettings": "[if(not(empty(parameters('domainNameLabel'))), createObject('domainNameLabel', parameters('domainNameLabel'), 'fqdn', parameters('fqdn'), 'reverseFqdn', parameters('reverseFqdn')), null())]",
                                "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixResourceId'))), createObject('id', parameters('publicIPPrefixResourceId')), null())]",
                                "idleTimeoutInMinutes": 4,
                                "ipTags": []
                              }
                            }
                          ],
                          "outputs": {
                            "pipName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the public IP address."
                              },
                              "value": "[parameters('name')]"
                            },
                            "pipResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the public IP address."
                              },
                              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                            },
                            "ipAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "The public IP address of the public IP address resource."
                              },
                              "value": "[if(contains(reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2022-07-01'), 'ipAddress'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2022-07-01').ipAddress, '')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "bastionPublicIp": {
                      "type": "string",
                      "metadata": {
                        "description": "The standard public IP assigned to the Bastion Service"
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'pipBastionHostDeployment'), '2022-09-01').outputs.ipAddress.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'vnetHub-Deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "laws-Deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[variables('resourceNames').laws]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "12368266901679986884"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 4,
                      "metadata": {
                        "description": "Required. Name of the Log Analytics Workspace Service. It must be between 4 and 63 characters and can contain only letters, numbers and \"-\". The \"-\" should not be the first or the last symbol"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region where the resources will be deployed in"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "serviceTier": {
                      "type": "string",
                      "defaultValue": "PerGB2018",
                      "allowedValues": [
                        "Free",
                        "Standalone",
                        "PerNode",
                        "PerGB2018"
                      ],
                      "metadata": {
                        "description": "Optional. Service Tier: PerGB2018, Free, Standalone, PerGB or PerNode."
                      }
                    },
                    "dataRetention": {
                      "type": "int",
                      "defaultValue": 90,
                      "maxValue": 730,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional, default 90. Number of days data will be retained for."
                      }
                    },
                    "publicNetworkAccessForIngestion": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Log Analytics ingestion."
                      }
                    },
                    "publicNetworkAccessForQuery": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Log Analytics query."
                      }
                    },
                    "useResourcePermissions": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Set to 'true' to use resource or workspace permissions and 'false' (or leave empty) to require workspace permissions."
                      }
                    }
                  },
                  "variables": {
                    "lawsMaxLength": 63,
                    "lawsNameSantized": "[replace(replace(parameters('name'), '_', '-'), '.', '-')]",
                    "lawsName": "[if(greater(length(variables('lawsNameSantized')), variables('lawsMaxLength')), substring(variables('lawsNameSantized'), 0, variables('lawsMaxLength')), variables('lawsNameSantized'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2022-10-01",
                      "name": "[variables('lawsName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "retentionInDays": "[parameters('dataRetention')]",
                        "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                        "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                        "sku": {
                          "name": "[parameters('serviceTier')]"
                        },
                        "features": {
                          "enableLogAccessUsingOnlyResourcePermissions": "[parameters('useResourcePermissions')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "logAnalyticsWsName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource."
                      },
                      "value": "[variables('lawsName')]"
                    },
                    "logAnalyticsWsId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the resource."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('lawsName'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "azFW-Deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[variables('resourceNames').azFw]"
                  },
                  "vnetId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnetHub-Deployment'), '2022-09-01').outputs.vnetId.value]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'laws-Deployment'), '2022-09-01').outputs.logAnalyticsWsId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "applicationRuleCollections": {
                    "value": "[variables('applicationRules')]"
                  },
                  "networkRuleCollections": {
                    "value": "[variables('networkRules')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "16272670385761547337"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Azure Firewall."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the Azure Firewall resource."
                      }
                    },
                    "azureSkuTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Standard",
                        "Premium"
                      ],
                      "metadata": {
                        "description": "Optional. Tier of an Azure Firewall."
                      }
                    },
                    "vnetId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The virtual network ID containing AzureFirewallSubnet. If a public ip is not provided, then the public ip that is created as part of this module will be applied with the subnet provided in this variable."
                      }
                    },
                    "applicationRuleCollections": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Collection of application rule collections used by Azure Firewall."
                      }
                    },
                    "networkRuleCollections": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Collection of network rule collections used by Azure Firewall."
                      }
                    },
                    "natRuleCollections": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Collection of NAT rule collections used by Azure Firewall."
                      }
                    },
                    "firewallPolicyId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the Firewall Policy that should be attached."
                      }
                    },
                    "threatIntelMode": {
                      "type": "string",
                      "defaultValue": "Deny",
                      "metadata": {
                        "description": "Optional. The operation mode for Threat Intel."
                      },
                      "allowedValues": [
                        "Alert",
                        "Deny",
                        "Off"
                      ]
                    },
                    "zones": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Zone numbers e.g. 1,2,3."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Diagnostic Storage Account resource identifier."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Log Analytics workspace resource identifier."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "allLogs",
                        "AzureFirewallApplicationRule",
                        "AzureFirewallNetworkRule",
                        "AzureFirewallDnsProxy"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ],
                    "azFwNameMaxLength": 56,
                    "azFwNameSantized": "[if(greater(length(parameters('name')), variables('azFwNameMaxLength')), substring(parameters('name'), 0, variables('azFwNameMaxLength')), parameters('name'))]",
                    "azureSkuName": "AZFW_VNet",
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true(), 'retentionPolicy', createObject('enabled', true(), 'days', parameters('diagnosticLogsRetentionInDays')))), variables('diagnosticsLogsSpecified'))]"
                  },
                  "resources": [
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/azureFirewalls/{0}', variables('azFwNameSantized'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/azureFirewalls', variables('azFwNameSantized'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/azureFirewalls",
                      "apiVersion": "2022-07-01",
                      "name": "[variables('azFwNameSantized')]",
                      "location": "[parameters('location')]",
                      "zones": "[if(equals(length(parameters('zones')), 0), null(), parameters('zones'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "threatIntelMode": "[parameters('threatIntelMode')]",
                        "firewallPolicy": "[if(not(empty(parameters('firewallPolicyId'))), createObject('id', parameters('firewallPolicyId')), null())]",
                        "ipConfigurations": [
                          {
                            "name": "azFwIpConf1",
                            "properties": {
                              "subnet": {
                                "id": "[format('{0}/subnets/AzureFirewallSubnet', parameters('vnetId'))]"
                              },
                              "publicIPAddress": {
                                "id": "[reference(resourceId('Microsoft.Resources/deployments', 'pipAzFwDeployment'), '2022-09-01').outputs.pipResourceId.value]"
                              }
                            }
                          }
                        ],
                        "sku": {
                          "name": "[variables('azureSkuName')]",
                          "tier": "[parameters('azureSkuTier')]"
                        },
                        "applicationRuleCollections": "[parameters('applicationRuleCollections')]",
                        "natRuleCollections": "[parameters('natRuleCollections')]",
                        "networkRuleCollections": "[parameters('networkRuleCollections')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'pipAzFwDeployment')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "pipAzFwDeployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "[format('pip-{0}', variables('azFwNameSantized'))]"
                          },
                          "skuTier": {
                            "value": "Regional"
                          },
                          "skuName": {
                            "value": "Standard"
                          },
                          "publicIPAllocationMethod": {
                            "value": "Static"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "9758115776705728804"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Bastion Service."
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Azure region where the resources will be deployed in"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "publicIPPrefixResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                              }
                            },
                            "publicIPAllocationMethod": {
                              "type": "string",
                              "defaultValue": "Dynamic",
                              "allowedValues": [
                                "Dynamic",
                                "Static"
                              ],
                              "metadata": {
                                "description": "Optional, default is dynamic. The public IP address allocation method."
                              }
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "Basic",
                              "allowedValues": [
                                "Basic",
                                "Standard"
                              ],
                              "metadata": {
                                "description": "Optional defaulr is Basic. Name of a public IP address SKU."
                              }
                            },
                            "skuTier": {
                              "type": "string",
                              "defaultValue": "Regional",
                              "allowedValues": [
                                "Global",
                                "Regional"
                              ],
                              "metadata": {
                                "description": "Optional, default is Regional. Tier of a public IP address SKU."
                              }
                            },
                            "zones": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional, default no zones. A list of availability zones denoting the IP allocated for the resource needs to come from."
                              }
                            },
                            "publicIPAddressVersion": {
                              "type": "string",
                              "defaultValue": "IPv4",
                              "allowedValues": [
                                "IPv4",
                                "IPv6"
                              ],
                              "metadata": {
                                "description": "Optional, default is IPv4. IP address version."
                              }
                            },
                            "domainNameLabel": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                              }
                            },
                            "fqdn": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                              }
                            },
                            "reverseFqdn": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2022-07-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('skuName')]",
                                "tier": "[parameters('skuTier')]"
                              },
                              "zones": "[parameters('zones')]",
                              "properties": {
                                "dnsSettings": "[if(not(empty(parameters('domainNameLabel'))), createObject('domainNameLabel', parameters('domainNameLabel'), 'fqdn', parameters('fqdn'), 'reverseFqdn', parameters('reverseFqdn')), null())]",
                                "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixResourceId'))), createObject('id', parameters('publicIPPrefixResourceId')), null())]",
                                "idleTimeoutInMinutes": 4,
                                "ipTags": []
                              }
                            }
                          ],
                          "outputs": {
                            "pipName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the public IP address."
                              },
                              "value": "[parameters('name')]"
                            },
                            "pipResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the public IP address."
                              },
                              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                            },
                            "ipAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "The public IP address of the public IP address resource."
                              },
                              "value": "[if(contains(reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2022-07-01'), 'ipAddress'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2022-07-01').ipAddress, '')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "azureFirewallId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Azure Firewall."
                      },
                      "value": "[resourceId('Microsoft.Network/azureFirewalls', variables('azFwNameSantized'))]"
                    },
                    "azureFirewallName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Azure Firewall."
                      },
                      "value": "[variables('azFwNameSantized')]"
                    },
                    "azFwPrivateIp": {
                      "type": "string",
                      "metadata": {
                        "description": "The private IP of the Azure firewall."
                      },
                      "value": "[if(contains(reference(resourceId('Microsoft.Network/azureFirewalls', variables('azFwNameSantized')), '2022-07-01'), 'ipConfigurations'), reference(resourceId('Microsoft.Network/azureFirewalls', variables('azFwNameSantized')), '2022-07-01').ipConfigurations[0].properties.privateIPAddress, '')]"
                    },
                    "ipConfAzureFirewallSubnet": {
                      "type": "object",
                      "metadata": {
                        "description": "The public IP configuration object for the Azure Firewall Subnet."
                      },
                      "value": "[if(contains(reference(resourceId('Microsoft.Network/azureFirewalls', variables('azFwNameSantized')), '2022-07-01'), 'ipConfigurations'), reference(resourceId('Microsoft.Network/azureFirewalls', variables('azFwNameSantized')), '2022-07-01').ipConfigurations[0], createObject())]"
                    },
                    "azFwApplicationRuleCollections": {
                      "type": "array",
                      "metadata": {
                        "description": "List of Application Rule Collections."
                      },
                      "value": "[parameters('applicationRuleCollections')]"
                    },
                    "azFwANetworkRuleCollections": {
                      "type": "array",
                      "metadata": {
                        "description": "List of Network Rule Collections."
                      },
                      "value": "[parameters('networkRuleCollections')]"
                    },
                    "azFwANatRuleCollections": {
                      "type": "array",
                      "metadata": {
                        "description": "Collection of NAT rule collections used by Azure Firewall."
                      },
                      "value": "[parameters('natRuleCollections')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'laws-Deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'vnetHub-Deployment')]"
              ]
            }
          ],
          "outputs": {
            "vnetHubName": {
              "type": "string",
              "metadata": {
                "description": "Resource name of the hub vnet"
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnetHub-Deployment'), '2022-09-01').outputs.vnetName.value]"
            },
            "vnetHubId": {
              "type": "string",
              "metadata": {
                "description": "Resource Id of the hub vnet"
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnetHub-Deployment'), '2022-09-01').outputs.vnetId.value]"
            },
            "firewallPrivateIp": {
              "type": "string",
              "metadata": {
                "description": "The private IP of the Azure firewall."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'azFW-Deployment'), '2022-09-01').outputs.azFwPrivateIp.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('hubResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('spokeResourceGroupName')), 'Microsoft.Resources/deployments', 'namingModule-Deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('spoke-{0}-deployment', deployment().name), 64)]",
      "resourceGroup": "[variables('spokeResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "naming": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('spokeResourceGroupName')), 'Microsoft.Resources/deployments', 'namingModule-Deployment'), '2022-09-01').outputs.names.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "firewallInternalIp": "[if(empty(parameters('vnetHubResourceId')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hubResourceGroupName')), 'Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.firewallPrivateIp.value), createObject('value', parameters('firewallInternalIp')))]",
          "vnetSpokeAddressSpace": {
            "value": "[parameters('vnetSpokeAddressSpace')]"
          },
          "subnetSpokeAppSvcAddressSpace": {
            "value": "[parameters('subnetSpokeAppSvcAddressSpace')]"
          },
          "subnetSpokeDevOpsAddressSpace": {
            "value": "[parameters('subnetSpokeDevOpsAddressSpace')]"
          },
          "subnetSpokePrivateEndpointAddressSpace": {
            "value": "[parameters('subnetSpokePrivateEndpointAddressSpace')]"
          },
          "vnetHubResourceId": "[if(empty(parameters('vnetHubResourceId')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hubResourceGroupName')), 'Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.vnetHubId.value), createObject('value', parameters('vnetHubResourceId')))]",
          "webAppBaseOs": {
            "value": "[parameters('webAppBaseOs')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "sqlServerAdministrators": {
            "value": "[variables('administrators')]"
          },
          "sqlAdminLogin": {
            "value": "[parameters('sqlAdminLogin')]"
          },
          "sqlAdminPassword": {
            "value": "[parameters('sqlAdminPassword')]"
          },
          "webAppPlanSku": {
            "value": "[parameters('webAppPlanSku')]"
          },
          "enableEgressLockdown": {
            "value": "[parameters('enableEgressLockdown')]"
          },
          "deployJumpHost": {
            "value": "[parameters('deployJumpHost')]"
          },
          "deployRedis": {
            "value": "[parameters('deployRedis')]"
          },
          "deployAzureSql": {
            "value": "[parameters('deployAzureSql')]"
          },
          "deployAppConfig": {
            "value": "[parameters('deployAppConfig')]"
          },
          "autoApproveAfdPrivateEndpoint": {
            "value": "[parameters('autoApproveAfdPrivateEndpoint')]"
          },
          "githubRepository": {
            "value": "[parameters('githubRepository')]"
          },
          "githubToken": {
            "value": "[parameters('githubToken')]"
          },
          "adoOrganization": {
            "value": "[parameters('adoOrganization')]"
          },
          "adoToken": {
            "value": "[parameters('adoToken')]"
          },
          "installClis": {
            "value": "[parameters('installClis')]"
          },
          "installSsms": {
            "value": "[parameters('installSsms')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "15597731126636010887"
            }
          },
          "parameters": {
            "naming": {
              "type": "object"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Azure region where the resources will be deployed in"
              }
            },
            "vnetSpokeAddressSpace": {
              "type": "string",
              "metadata": {
                "description": "CIDR of the SPOKE vnet i.e. 192.168.0.0/24"
              }
            },
            "subnetSpokeAppSvcAddressSpace": {
              "type": "string",
              "metadata": {
                "description": "CIDR of the subnet that will hold the app services plan"
              }
            },
            "subnetSpokeDevOpsAddressSpace": {
              "type": "string",
              "metadata": {
                "description": "CIDR of the subnet that will hold devOps agents etc "
              }
            },
            "subnetSpokePrivateEndpointAddressSpace": {
              "type": "string",
              "metadata": {
                "description": "CIDR of the subnet that will hold the private endpoints of the supporting services"
              }
            },
            "firewallInternalIp": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Internal IP of the Azure firewall deployed in Hub. Used for creating UDR to route all vnet egress traffic through Firewall. If empty no UDR"
              }
            },
            "vnetHubResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "if empty, private dns zone will be deployed in the current RG scope"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Resource tags that we might need to add to all resources (i.e. Environment, Cost center, application name etc)"
              }
            },
            "enableEgressLockdown": {
              "type": "bool",
              "metadata": {
                "description": "Create (or not) a UDR for the App Service Subnet, to route all egress traffic through Hub Azure Firewall"
              }
            },
            "deployRedis": {
              "type": "bool",
              "metadata": {
                "description": "Deploy (or not) a redis cache"
              }
            },
            "deployAzureSql": {
              "type": "bool",
              "metadata": {
                "description": "Deploy (or not) an Azure SQL with default database "
              }
            },
            "deployAppConfig": {
              "type": "bool",
              "metadata": {
                "description": "Deploy (or not) an Azure app configuration"
              }
            },
            "deployJumpHost": {
              "type": "bool",
              "metadata": {
                "description": "Deploy (or not) an Azure virtual machine (to be used as jumphost)"
              }
            },
            "githubRepository": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The URL of the Github repository to use for the Github Actions Runner. This parameter is optional. If not provided, the Github Actions Runner will not be installed. If this parameter is provided, then github_token must also be provided."
              }
            },
            "githubToken": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The token to use for the Github Actions Runner. This parameter is optional. If not provided, the Github Actions Runner will not be installed. If this parameter is provided, then github_repository must also be provided."
              }
            },
            "adoOrganization": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The URL of the Azure DevOps organization to use for the Azure DevOps Agent. This parameter is optional. If not provided, the Github Azure DevOps will not be installed. If this parameter is provided, then ado_token must also be provided."
              }
            },
            "adoToken": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The PAT token to use for the Azure DevOps Agent. This parameter is optional. If not provided, the Github Azure DevOps will not be installed. If this parameter is provided, then ado_organization must also be provided."
              }
            },
            "installClis": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "A switch to indicate whether or not to install the Azure CLI, AZD CLI and git. This parameter is optional. If not provided, the Azure CLI, AZD CLI and git will not be installed"
              }
            },
            "installSsms": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "A switch to indicate whether or not to install Sql Server Management Studio (SSMS). This parameter is optional. If not provided, SSMS will not be installed."
              }
            },
            "webAppPlanSku": {
              "type": "string",
              "allowedValues": [
                "S1",
                "S2",
                "S3",
                "P1V3",
                "P2V3",
                "P3V3",
                "P1V3_AZ",
                "P2V3_AZ",
                "P3V3_AZ",
                "EP1",
                "EP2",
                "EP3"
              ],
              "metadata": {
                "description": "Optional S1 is default. Defines the name, tier, size, family and capacity of the App Service Plan. Plans ending to _AZ, are deplying at least three instances in three Availability Zones. EP* is only for functions"
              }
            },
            "webAppBaseOs": {
              "type": "string",
              "allowedValues": [
                "Windows",
                "Linux"
              ],
              "metadata": {
                "description": "Kind of server OS of the App Service Plan"
              }
            },
            "adminUsername": {
              "type": "string",
              "metadata": {
                "description": "optional, default value is azureuser"
              }
            },
            "adminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "mandatory, the password of the admin user"
              }
            },
            "sqlServerAdministrators": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Conditional. The Azure Active Directory (AAD) administrator authentication. Required if no `sqlAdminLogin` & `sqlAdminPassword` is provided."
              }
            },
            "sqlAdminLogin": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. If sqlServerAdministrators is given, this is not required"
              }
            },
            "sqlAdminPassword": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. If sqlServerAdministrators is given, this is not required"
              }
            },
            "autoApproveAfdPrivateEndpoint": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "set to true if you want to auto approve the Private Endpoint of the AFD"
              }
            }
          },
          "variables": {
            "resourceNames": {
              "storageAccount": "[parameters('naming').storageAccount.nameUnique]",
              "vnetSpoke": "[take(format('{0}-spoke', parameters('naming').virtualNetwork.name), 80)]",
              "snetAppSvc": "[format('snet-appSvc-{0}-spoke', parameters('naming').virtualNetwork.name)]",
              "snetDevOps": "[format('snet-devOps-{0}-spoke', parameters('naming').virtualNetwork.name)]",
              "snetPe": "[format('snet-pe-{0}-spoke', parameters('naming').virtualNetwork.name)]",
              "appSvcUserAssignedManagedIdentity": "[take(format('{0}-appSvc', parameters('naming').userAssignedManagedIdentity.name), 128)]",
              "vmJumpHostUserAssignedManagedIdentity": "[take(format('{0}-vmJumpHost', parameters('naming').userAssignedManagedIdentity.name), 128)]",
              "keyvault": "[parameters('naming').keyVault.nameUnique]",
              "logAnalyticsWs": "[parameters('naming').logAnalyticsWorkspace.name]",
              "appInsights": "[parameters('naming').applicationInsights.name]",
              "aspName": "[parameters('naming').appServicePlan.name]",
              "webApp": "[parameters('naming').appService.nameUnique]",
              "vmWindowsJumpbox": "[take(format('{0}-win-jumpbox', parameters('naming').windowsVirtualMachine.name), 64)]",
              "redisCache": "[parameters('naming').redisCache.nameUnique]",
              "sqlServer": "[parameters('naming').mssqlServer.nameUnique]",
              "sqlDb": "sample-db",
              "appConfig": "[take(format('{0}-{1}', parameters('naming').appConfiguration.nameUnique, take(uniqueString(resourceGroup().id, subscription().id), 6)), 50)]",
              "frontDoor": "[parameters('naming').frontDoor.name]",
              "frontDoorEndPoint": "[format('webAppLza-{0}', take(uniqueString(resourceGroup().id, subscription().id), 6))]",
              "frontDoorWaf": "[parameters('naming').frontDoorFirewallPolicy.name]",
              "routeTable": "[parameters('naming').routeTable.name]",
              "routeEgressLockdown": "[format('{0}-egress-lockdown', parameters('naming').route.name)]",
              "idAfdApprovePeAutoApprover": "[take(format('{0}-AfdApprovePe', parameters('naming').userAssignedManagedIdentity.name), 128)]"
            },
            "udrRoutes": [
              {
                "name": "defaultEgressLockdown",
                "properties": {
                  "addressPrefix": "0.0.0.0/0",
                  "nextHopIpAddress": "[parameters('firewallInternalIp')]",
                  "nextHopType": "VirtualAppliance"
                }
              }
            ],
            "vnetHubSplitTokens": "[if(not(empty(parameters('vnetHubResourceId'))), split(parameters('vnetHubResourceId'), '/'), array(''))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "vnetSpoke-Deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').vnetSpoke]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "vnetAddressSpace": {
                    "value": "[parameters('vnetSpokeAddressSpace')]"
                  },
                  "subnetsInfo": {
                    "value": [
                      {
                        "name": "[variables('resourceNames').snetAppSvc]",
                        "properties": {
                          "addressPrefix": "[parameters('subnetSpokeAppSvcAddressSpace')]",
                          "privateEndpointNetworkPolicies": "Enabled",
                          "delegations": [
                            {
                              "name": "delegation",
                              "properties": {
                                "serviceName": "Microsoft.Web/serverfarms"
                              }
                            }
                          ],
                          "routeTable": "[if(and(not(empty(parameters('firewallInternalIp'))), parameters('enableEgressLockdown')), createObject('id', reference(resourceId('Microsoft.Resources/deployments', 'routeTableToFirewall-Deployment'), '2022-09-01').outputs.resourceId.value), null())]"
                        }
                      },
                      {
                        "name": "[variables('resourceNames').snetDevOps]",
                        "properties": {
                          "addressPrefix": "[parameters('subnetSpokeDevOpsAddressSpace')]",
                          "privateEndpointNetworkPolicies": "Enabled"
                        }
                      },
                      {
                        "name": "[variables('resourceNames').snetPe]",
                        "properties": {
                          "addressPrefix": "[parameters('subnetSpokePrivateEndpointAddressSpace')]",
                          "privateEndpointNetworkPolicies": "Disabled"
                        }
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "10598031696640381029"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 80,
                      "minLength": 2,
                      "metadata": {
                        "description": "Name of the resource Virtual Network (The name must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens)"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure Region where the resource will be deployed in"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "key-value pairs as tags, to identify the resource"
                      }
                    },
                    "vnetAddressSpace": {
                      "type": "string",
                      "metadata": {
                        "description": "CIDR to be allocated to the new vnet i.e. 192.168.0.0/24"
                      }
                    },
                    "subnetsInfo": {
                      "type": "array",
                      "metadata": {
                        "description": "Pass an array of objects for all the required subnets"
                      }
                    },
                    "ddosProtectionPlanId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
                      }
                    }
                  },
                  "variables": {
                    "vnetNameMaxLength": 80,
                    "vnetName": "[take(parameters('name'), variables('vnetNameMaxLength'))]",
                    "ddosProtectionPlan": {
                      "id": "[parameters('ddosProtectionPlanId')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2022-07-01",
                      "name": "[variables('vnetName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "addressSpace": {
                          "addressPrefixes": [
                            "[parameters('vnetAddressSpace')]"
                          ]
                        },
                        "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanId'))), variables('ddosProtectionPlan'), null())]",
                        "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanId')))]",
                        "subnets": "[parameters('subnetsInfo')]"
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "vnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource id of the newly created Virtual network"
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                    },
                    "vnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource name of the newly created Virtual network"
                      },
                      "value": "[variables('vnetName')]"
                    },
                    "vnetSubnets": {
                      "type": "array",
                      "metadata": {
                        "description": "Outputs the array of the subnets, printing: index, subnetResourceId, subnerName. "
                      },
                      "copy": {
                        "count": "[length(parameters('subnetsInfo'))]",
                        "input": {
                          "subnetIndex": "[copyIndex()]",
                          "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2022-07-01').subnets[copyIndex()].id]",
                          "name": "[reference(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '2022-07-01').subnets[copyIndex()].name]"
                        }
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'routeTableToFirewall-Deployment')]"
              ]
            },
            {
              "condition": "[and(not(empty(parameters('firewallInternalIp'))), parameters('enableEgressLockdown'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "routeTableToFirewall-Deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').routeTable]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "routes": {
                    "value": "[variables('udrRoutes')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "16318526785325373726"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name given for the hub route table."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "routes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An Array of Routes to be established within the hub route table."
                      }
                    },
                    "disableBgpRoutePropagation": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Switch to disable BGP route propagation."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/routeTables",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "routes": "[parameters('routes')]",
                        "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]"
                      }
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the route table was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the route table."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the route table."
                      },
                      "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Network/routeTables', parameters('name')), '2022-07-01', 'full').location]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "logAnalyticsWs-Deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').logAnalyticsWs]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "12368266901679986884"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 63,
                      "minLength": 4,
                      "metadata": {
                        "description": "Required. Name of the Log Analytics Workspace Service. It must be between 4 and 63 characters and can contain only letters, numbers and \"-\". The \"-\" should not be the first or the last symbol"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region where the resources will be deployed in"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "serviceTier": {
                      "type": "string",
                      "defaultValue": "PerGB2018",
                      "allowedValues": [
                        "Free",
                        "Standalone",
                        "PerNode",
                        "PerGB2018"
                      ],
                      "metadata": {
                        "description": "Optional. Service Tier: PerGB2018, Free, Standalone, PerGB or PerNode."
                      }
                    },
                    "dataRetention": {
                      "type": "int",
                      "defaultValue": 90,
                      "maxValue": 730,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional, default 90. Number of days data will be retained for."
                      }
                    },
                    "publicNetworkAccessForIngestion": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Log Analytics ingestion."
                      }
                    },
                    "publicNetworkAccessForQuery": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Log Analytics query."
                      }
                    },
                    "useResourcePermissions": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Set to 'true' to use resource or workspace permissions and 'false' (or leave empty) to require workspace permissions."
                      }
                    }
                  },
                  "variables": {
                    "lawsMaxLength": 63,
                    "lawsNameSantized": "[replace(replace(parameters('name'), '_', '-'), '.', '-')]",
                    "lawsName": "[if(greater(length(variables('lawsNameSantized')), variables('lawsMaxLength')), substring(variables('lawsNameSantized'), 0, variables('lawsMaxLength')), variables('lawsNameSantized'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2022-10-01",
                      "name": "[variables('lawsName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "retentionInDays": "[parameters('dataRetention')]",
                        "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                        "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                        "sku": {
                          "name": "[parameters('serviceTier')]"
                        },
                        "features": {
                          "enableLogAccessUsingOnlyResourcePermissions": "[parameters('useResourcePermissions')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "logAnalyticsWsName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource."
                      },
                      "value": "[variables('lawsName')]"
                    },
                    "logAnalyticsWsId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the resource."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('lawsName'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-keyvaultModule-Deployment', variables('resourceNames').keyvault), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').keyvault]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "vnetHubResourceId": {
                    "value": "[parameters('vnetHubResourceId')]"
                  },
                  "subnetPrivateEndpointId": {
                    "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetName.value, variables('resourceNames').snetPe), '/')[0], split(format('{0}/{1}', reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetName.value, variables('resourceNames').snetPe), '/')[1])]"
                  },
                  "virtualNetworkLinks": {
                    "value": [
                      {
                        "vnetName": "[reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetName.value]",
                        "vnetId": "[reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetId.value]",
                        "registrationEnabled": false
                      },
                      {
                        "vnetName": "[variables('vnetHubSplitTokens')[8]]",
                        "vnetId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('vnetHubSplitTokens')[2], variables('vnetHubSplitTokens')[4]), 'Microsoft.Network/virtualNetworks', variables('vnetHubSplitTokens')[8])]",
                        "registrationEnabled": false
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "18167978876521385399"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Required. Name of the Key Vault. Must be globally unique."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Resource tags that we might need to add to all resources (i.e. Environment, Cost center, application name etc)"
                      }
                    },
                    "virtualNetworkLinks": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                      }
                    },
                    "subnetPrivateEndpointId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Default is empty. If empty no Private endpoint will be created fro the resoure. Otherwise, the subnet where the private endpoint will be attached to"
                      }
                    },
                    "vnetHubResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "if empty, private dns zone will be deployed in the current RG scope"
                      }
                    }
                  },
                  "variables": {
                    "vnetHubSplitTokens": "[if(not(empty(parameters('vnetHubResourceId'))), split(parameters('vnetHubResourceId'), '/'), array(''))]",
                    "keyvaultDnsZoneName": "privatelink.vaultcore.azure.net"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "keyvaultDeployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('name')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "hasPrivateEndpoint": {
                            "value": "[not(empty(parameters('subnetPrivateEndpointId')))]"
                          },
                          "enableRbacAuthorization": {
                            "value": true
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "4337185038207822605"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Required. Name of the Key Vault. Must be globally unique."
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Resource tags that we might need to add to all resources (i.e. Environment, Cost center, application name etc)"
                              }
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "standard",
                              "allowedValues": [
                                "standard",
                                "premium"
                              ]
                            },
                            "enableSoftDelete": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Switch to enable/disable Key Vault's soft delete feature."
                              }
                            },
                            "softDeleteRetentionInDays": {
                              "type": "int",
                              "defaultValue": 90,
                              "metadata": {
                                "description": "Optional. softDelete data retention days. It accepts >=7 and <=90."
                              }
                            },
                            "enablePurgeProtection": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional default is false. Provide 'true' to enable Key Vault's purge protection feature."
                              }
                            },
                            "networkAcls": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Service endpoint object information. For security reasons, it is recommended to set the DefaultAction Deny."
                              }
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "",
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                              }
                            },
                            "enableRbacAuthorization": {
                              "type": "bool",
                              "metadata": {
                                "description": "Use RBAC for keyvault access - and not accesspolicy (https://learn.microsoft.com/en-us/azure/key-vault/general/rbac-guide?tabs=azure-cli)"
                              }
                            },
                            "accessPolicies": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Array of access policy configurations, schema ref: https://docs.microsoft.com/en-us/azure/templates/microsoft.keyvault/vaults/accesspolicies?tabs=json#microsoftkeyvaultvaultsaccesspolicies-object"
                              }
                            },
                            "hasPrivateEndpoint": {
                              "type": "bool",
                              "metadata": {
                                "description": "If the keyvault has private endpoints enabled."
                              }
                            }
                          },
                          "variables": {
                            "keyvaultNameLength": 24,
                            "keyvaultNameValid": "[replace(replace(parameters('name'), '_', '-'), '.', '-')]",
                            "keyvaultName": "[if(greater(length(variables('keyvaultNameValid')), variables('keyvaultNameLength')), substring(variables('keyvaultNameValid'), 0, variables('keyvaultNameLength')), variables('keyvaultNameValid'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2022-07-01",
                              "name": "[variables('keyvaultName')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "tenantId": "[subscription().tenantId]",
                                "sku": {
                                  "family": "A",
                                  "name": "[parameters('skuName')]"
                                },
                                "accessPolicies": "[parameters('accessPolicies')]",
                                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                                "enablePurgeProtection": "[if(parameters('enablePurgeProtection'), true(), null())]",
                                "networkAcls": "[if(not(empty(parameters('networkAcls'))), createObject('bypass', if(contains(parameters('networkAcls'), 'bypass'), parameters('networkAcls').bypass, null()), 'defaultAction', if(contains(parameters('networkAcls'), 'defaultAction'), parameters('networkAcls').defaultAction, null()), 'virtualNetworkRules', if(contains(parameters('networkAcls'), 'virtualNetworkRules'), parameters('networkAcls').virtualNetworkRules, createArray()), 'ipRules', if(contains(parameters('networkAcls'), 'ipRules'), parameters('networkAcls').ipRules, createArray())), null())]",
                                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(parameters('hasPrivateEndpoint'), empty(parameters('networkAcls'))), 'Disabled', null()))]",
                                "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]"
                              }
                            }
                          ],
                          "outputs": {
                            "keyvaultId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults', variables('keyvaultName'))]"
                            },
                            "keyvaultName": {
                              "type": "string",
                              "value": "[variables('keyvaultName')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('subnetPrivateEndpointId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "keyvaultPrivateDnsZoneDeployment",
                      "subscriptionId": "[variables('vnetHubSplitTokens')[2]]",
                      "resourceGroup": "[variables('vnetHubSplitTokens')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('keyvaultDnsZoneName')]"
                          },
                          "virtualNetworkLinks": {
                            "value": "[parameters('virtualNetworkLinks')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "698709463730837083"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "virtualNetworkLinks": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                              }
                            },
                            "aRecords": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of A records to be added to the DNS Zone"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('name')]",
                              "location": "global",
                              "tags": "[parameters('tags')]"
                            },
                            {
                              "copy": {
                                "name": "privateDnsZoneLink",
                                "count": "[length(parameters('virtualNetworkLinks'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2018-09-01",
                              "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
                              "location": "global",
                              "properties": {
                                "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                                "virtualNetwork": {
                                  "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "dnsARecord",
                                "count": "[length(parameters('aRecords'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
                              "properties": {
                                "ttl": 60,
                                "aRecords": [
                                  {
                                    "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "privateDnsZonesId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('subnetPrivateEndpointId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "peKeyvaultDeployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[take(format('pe-{0}', reference(resourceId('Microsoft.Resources/deployments', 'keyvaultDeployment'), '2022-09-01').outputs.keyvaultName.value), 64)]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "privateDnsZonesId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('vnetHubSplitTokens')[2], variables('vnetHubSplitTokens')[4]), 'Microsoft.Resources/deployments', 'keyvaultPrivateDnsZoneDeployment'), '2022-09-01').outputs.privateDnsZonesId.value]"
                          },
                          "privateLinkServiceId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'keyvaultDeployment'), '2022-09-01').outputs.keyvaultId.value]"
                          },
                          "snetId": {
                            "value": "[parameters('subnetPrivateEndpointId')]"
                          },
                          "subresource": {
                            "value": "vault"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "14445154365330656192"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 64,
                              "minLength": 2,
                              "metadata": {
                                "description": "Required. Name of your pruvate endpoint. Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens."
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "snetId": {
                              "type": "string",
                              "metadata": {
                                "description": "The subnet resource ID where the nic of the PE will be attached to"
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource id of private link service. The resource ID of the Az Resource that we need to attach the pe to."
                              }
                            },
                            "subresource": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource that the private endpoint will be attached to, as shown in https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-overview#private-link-resource"
                              }
                            },
                            "privateDnsZonesId": {
                              "type": "string",
                              "metadata": {
                                "description": "Id of the relevant private DNS Zone, so that the PE can create an A record for the implicitly created nic"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "subnet": {
                                  "id": "[parameters('snetId')]"
                                },
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('pl-{0}', parameters('name'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                      "groupIds": [
                                        "[parameters('subresource')]"
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'dnsgroupname')]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "config1",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('privateDnsZonesId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'keyvaultDeployment')]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('vnetHubSplitTokens')[2], variables('vnetHubSplitTokens')[4]), 'Microsoft.Resources/deployments', 'keyvaultPrivateDnsZoneDeployment')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "keyvaultId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'keyvaultDeployment'), '2022-09-01').outputs.keyvaultId.value]"
                    },
                    "keyvaultName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'keyvaultDeployment'), '2022-09-01').outputs.keyvaultName.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "webAppModule-Deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "appServicePlanName": {
                    "value": "[variables('resourceNames').aspName]"
                  },
                  "webAppName": {
                    "value": "[variables('resourceNames').webApp]"
                  },
                  "managedIdentityName": {
                    "value": "[variables('resourceNames').appSvcUserAssignedManagedIdentity]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWsId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logAnalyticsWs-Deployment'), '2022-09-01').outputs.logAnalyticsWsId.value]"
                  },
                  "subnetIdForVnetInjection": {
                    "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetName.value, variables('resourceNames').snetAppSvc), '/')[0], split(format('{0}/{1}', reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetName.value, variables('resourceNames').snetAppSvc), '/')[1])]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "vnetHubResourceId": {
                    "value": "[parameters('vnetHubResourceId')]"
                  },
                  "webAppBaseOs": {
                    "value": "[parameters('webAppBaseOs')]"
                  },
                  "subnetPrivateEndpointId": {
                    "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetName.value, variables('resourceNames').snetPe), '/')[0], split(format('{0}/{1}', reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetName.value, variables('resourceNames').snetPe), '/')[1])]"
                  },
                  "virtualNetworkLinks": {
                    "value": [
                      {
                        "vnetName": "[reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetName.value]",
                        "vnetId": "[reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetId.value]",
                        "registrationEnabled": false
                      },
                      {
                        "vnetName": "[variables('vnetHubSplitTokens')[8]]",
                        "vnetId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('vnetHubSplitTokens')[2], variables('vnetHubSplitTokens')[4]), 'Microsoft.Network/virtualNetworks', variables('vnetHubSplitTokens')[8])]",
                        "registrationEnabled": false
                      }
                    ]
                  },
                  "appConfigurationName": {
                    "value": "[variables('resourceNames').appConfig]"
                  },
                  "sku": {
                    "value": "[parameters('webAppPlanSku')]"
                  },
                  "keyvaultName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-keyvaultModule-Deployment', variables('resourceNames').keyvault), 64)), '2022-09-01').outputs.keyvaultName.value]"
                  },
                  "sqlDbConnectionString": "[if(parameters('deployAzureSql'), createObject('value', format('Server=tcp:{0}{1};Authentication=Active Directory Default;Database={2};', reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-sqlServer-Deployment', variables('resourceNames').sqlServer), 64)), '2022-09-01').outputs.sqlServerName.value, environment().suffixes.sqlServerHostname, variables('resourceNames').sqlDb)), createObject('value', ''))]",
                  "redisConnectionStringSecretName": "[if(parameters('deployRedis'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-redisModule-Deployment', variables('resourceNames').redisCache), 64)), '2022-09-01').outputs.redisConnectionStringSecretName.value), createObject('value', ''))]",
                  "deployAppConfig": {
                    "value": "[parameters('deployAppConfig')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "18367502449983650133"
                    }
                  },
                  "parameters": {
                    "appServicePlanName": {
                      "type": "string",
                      "maxLength": 40,
                      "minLength": 1,
                      "metadata": {
                        "description": "Required. Name of the App Service Plan."
                      }
                    },
                    "webAppName": {
                      "type": "string",
                      "maxLength": 60,
                      "metadata": {
                        "description": "Required. Name of the web app."
                      }
                    },
                    "managedIdentityName": {
                      "type": "string",
                      "maxLength": 128,
                      "minLength": 3,
                      "metadata": {
                        "description": "Required. Name of the managed Identity that will be assigned to the web app."
                      }
                    },
                    "appConfigurationName": {
                      "type": "string",
                      "maxLength": 50,
                      "minLength": 5,
                      "metadata": {
                        "description": "Required. Name of the Azure App Configuration. Alphanumerics, underscores, and hyphens. Must be unique"
                      }
                    },
                    "sku": {
                      "type": "string",
                      "allowedValues": [
                        "S1",
                        "S2",
                        "S3",
                        "P1V3",
                        "P2V3",
                        "P3V3",
                        "P1V3_AZ",
                        "P2V3_AZ",
                        "P3V3_AZ",
                        "EP1",
                        "EP2",
                        "EP3"
                      ],
                      "metadata": {
                        "description": "Optional S1 is default. Defines the name, tier, size, family and capacity of the App Service Plan. Plans ending to _AZ, are deplying at least three instances in three Availability Zones. EP* is only for functions"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Resource tags that we might need to add to all resources (i.e. Environment, Cost center, application name etc)"
                      }
                    },
                    "subnetPrivateEndpointId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Default is empty. If empty no Private Endpoint will be created for the resoure. Otherwise, the subnet where the private endpoint will be attached to"
                      }
                    },
                    "virtualNetworkLinks": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                      }
                    },
                    "vnetHubResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "if empty, private dns zone will be deployed in the current RG scope"
                      }
                    },
                    "webAppBaseOs": {
                      "type": "string",
                      "allowedValues": [
                        "Windows",
                        "Linux"
                      ],
                      "metadata": {
                        "description": "Kind of server OS of the App Service Plan"
                      }
                    },
                    "logAnalyticsWsId": {
                      "type": "string",
                      "metadata": {
                        "description": "An existing Log Analytics WS Id for creating app Insights, diagnostics etc."
                      }
                    },
                    "subnetIdForVnetInjection": {
                      "type": "string",
                      "metadata": {
                        "description": "The subnet ID that is dedicated to Web Server, for Vnet Injection of the web app"
                      }
                    },
                    "keyvaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of an existing keyvault, that it will be used to store secrets (connection string)"
                      }
                    },
                    "redisConnectionStringSecretName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of secret that stores the redis connection string"
                      }
                    },
                    "sqlDbConnectionString": {
                      "type": "string",
                      "metadata": {
                        "description": "The connection string of the default SQL Database"
                      }
                    },
                    "deployAppConfig": {
                      "type": "bool",
                      "metadata": {
                        "description": "Deploy an azure app configuration, or not"
                      }
                    }
                  },
                  "variables": {
                    "vnetHubSplitTokens": "[if(not(empty(parameters('vnetHubResourceId'))), split(parameters('vnetHubResourceId'), '/'), array(''))]",
                    "webAppDnsZoneName": "privatelink.azurewebsites.net",
                    "appConfigurationDnsZoneName": "privatelink.azconfig.io",
                    "slotName": "staging",
                    "redisConnStr": "[if(not(empty(parameters('redisConnectionStringSecretName'))), createObject('redisConnectionStringSecret', format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', parameters('keyvaultName'), parameters('redisConnectionStringSecretName'))), createObject())]"
                  },
                  "resources": [
                    {
                      "condition": "[not(empty(parameters('sqlDbConnectionString')))]",
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2019-08-01",
                      "name": "[format('{0}/{1}', parameters('webAppName'), 'connectionstrings')]",
                      "properties": {
                        "sqlDbConnectionString": {
                          "value": "[parameters('sqlDbConnectionString')]",
                          "type": "SQLAzure"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', take(format('{0}-webApp-Deployment', parameters('webAppName')), 64))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "appInsights-Deployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('appi-{0}', parameters('webAppName'))]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "workspaceResourceId": {
                            "value": "[parameters('logAnalyticsWsId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "5493405942198387733"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Application Insights."
                              }
                            },
                            "appInsightsType": {
                              "type": "string",
                              "defaultValue": "web",
                              "allowedValues": [
                                "web",
                                "other"
                              ],
                              "metadata": {
                                "description": "Optional. Application type."
                              }
                            },
                            "workspaceResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource ID of the log analytics workspace which the data will be ingested to. If left empty, appInsights will create one for us. This property is required to create an application with this API version. Applications from older versions will not have this property."
                              }
                            },
                            "publicNetworkAccessForIngestion": {
                              "type": "string",
                              "defaultValue": "Enabled",
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. The network access type for accessing Application Insights ingestion. - Enabled or Disabled."
                              }
                            },
                            "publicNetworkAccessForQuery": {
                              "type": "string",
                              "defaultValue": "Enabled",
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. The network access type for accessing Application Insights query. - Enabled or Disabled."
                              }
                            },
                            "retentionInDays": {
                              "type": "int",
                              "defaultValue": 90,
                              "allowedValues": [
                                30,
                                60,
                                90,
                                120,
                                180,
                                270,
                                365,
                                550,
                                730
                              ],
                              "metadata": {
                                "description": "Optional. Retention period in days."
                              }
                            },
                            "samplingPercentage": {
                              "type": "int",
                              "defaultValue": 100,
                              "maxValue": 100,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone."
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/components",
                              "apiVersion": "2020-02-02",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "kind": "[parameters('kind')]",
                              "properties": {
                                "Application_Type": "[parameters('appInsightsType')]",
                                "Request_Source": "rest",
                                "WorkspaceResourceId": "[parameters('workspaceResourceId')]",
                                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                                "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                                "RetentionInDays": "[parameters('retentionInDays')]",
                                "SamplingPercentage": "[parameters('samplingPercentage')]"
                              }
                            }
                          ],
                          "outputs": {
                            "appInsNname": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the application insights component."
                              },
                              "value": "[parameters('name')]"
                            },
                            "appInsResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the application insights component."
                              },
                              "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
                            },
                            "appInsInstrumentationKey": {
                              "type": "string",
                              "metadata": {
                                "description": "The appInsights Instrumentation Key."
                              },
                              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').InstrumentationKey]"
                            },
                            "appInsConnectionString": {
                              "type": "string",
                              "metadata": {
                                "description": "The appInsights Connection String."
                              },
                              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').ConnectionString]"
                            },
                            "applicationId": {
                              "type": "string",
                              "metadata": {
                                "description": "The application ID of the application insights component."
                              },
                              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').AppId]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('appSvcPlan-{0}-Deployment', parameters('appServicePlanName')), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('appServicePlanName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "sku": {
                            "value": "[parameters('sku')]"
                          },
                          "serverOS": "[if(equals(toLower(parameters('webAppBaseOs')), toLower('linux')), createObject('value', 'Linux'), createObject('value', 'Windows'))]",
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('logAnalyticsWsId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "8203858587180465886"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 40,
                              "minLength": 1,
                              "metadata": {
                                "description": "Required. The name of the app service plan to deploy."
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "sku": {
                              "type": "string",
                              "allowedValues": [
                                "S1",
                                "S2",
                                "S3",
                                "P1V3",
                                "P2V3",
                                "P3V3",
                                "P1V3_AZ",
                                "P2V3_AZ",
                                "P3V3_AZ",
                                "EP1",
                                "EP2",
                                "EP3"
                              ],
                              "metadata": {
                                "description": "Optional S1 is default. Defines the name, tier, size, family and capacity of the App Service Plan. Plans ending to _AZ, are deplying at least three instances in three Availability Zones. EP* is only for functions"
                              }
                            },
                            "serverOS": {
                              "type": "string",
                              "defaultValue": "Windows",
                              "allowedValues": [
                                "Windows",
                                "Linux"
                              ],
                              "metadata": {
                                "description": "Optional, default is Windows. Kind of server OS."
                              }
                            },
                            "perSiteScaling": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If true, apps assigned to this App Service plan can be scaled independently. If false, apps assigned to this App Service plan will scale to all instances of the plan."
                              }
                            },
                            "maximumElasticWorkerCount": {
                              "type": "int",
                              "defaultValue": 20,
                              "metadata": {
                                "description": "Optional, dafualt is 20. Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan."
                              }
                            },
                            "targetWorkerCount": {
                              "type": "int",
                              "defaultValue": 0,
                              "metadata": {
                                "description": "Optional. Scaling worker count."
                              }
                            },
                            "targetWorkerSize": {
                              "type": "int",
                              "defaultValue": 0,
                              "allowedValues": [
                                0,
                                1,
                                2
                              ],
                              "metadata": {
                                "description": "Optional. The instance size of the hosting plan (small, medium, or large)."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "AllMetrics"
                              ],
                              "allowedValues": [
                                "AllMetrics"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ],
                            "zoneRedundant": "[if(endsWith(parameters('sku'), 'LZA'), true(), false())]",
                            "isElasticPremium": "[if(startsWith(parameters('sku'), 'EP'), true(), false())]",
                            "aspKind": "[if(variables('isElasticPremium'), 'elastic', if(equals(parameters('serverOS'), 'Windows'), '', 'linux'))]",
                            "skuConfigurationMap": {
                              "EP1": {
                                "name": "EP1",
                                "tier": "ElasticPremium",
                                "size": "EP1",
                                "family": "EP",
                                "capacity": 1
                              },
                              "EP2": {
                                "name": "EP2",
                                "tier": "ElasticPremium",
                                "size": "EP2",
                                "family": "EP",
                                "capacity": 1
                              },
                              "EP3": {
                                "name": "EP3",
                                "tier": "ElasticPremium",
                                "size": "EP3",
                                "family": "EP",
                                "capacity": 1
                              },
                              "B1": {
                                "name": "B1",
                                "tier": "Basic",
                                "size": "B1",
                                "family": "B",
                                "capacity": 1
                              },
                              "B2": {
                                "name": "B2",
                                "tier": "Basic",
                                "size": "B2",
                                "family": "B",
                                "capacity": 1
                              },
                              "B3": {
                                "name": "B3",
                                "tier": "Basic",
                                "size": "B3",
                                "family": "B",
                                "capacity": 1
                              },
                              "S1": {
                                "name": "S1",
                                "tier": "Standard",
                                "size": "S1",
                                "family": "S",
                                "capacity": 1
                              },
                              "S2": {
                                "name": "S2",
                                "tier": "Standard",
                                "size": "S2",
                                "family": "S",
                                "capacity": 1
                              },
                              "S3": {
                                "name": "S3",
                                "tier": "Standard",
                                "size": "S3",
                                "family": "S",
                                "capacity": 1
                              },
                              "P1V3": {
                                "name": "P1V3",
                                "tier": "PremiumV2",
                                "size": "P1V3",
                                "family": "Pv3",
                                "capacity": 1
                              },
                              "P1V3_AZ": {
                                "name": "P1V3",
                                "tier": "PremiumV2",
                                "size": "P1V3",
                                "family": "Pv3",
                                "capacity": 3
                              },
                              "P2V3": {
                                "name": "P2V3",
                                "tier": "PremiumV2",
                                "size": "P2V3",
                                "family": "Pv3",
                                "capacity": 1
                              },
                              "P2V3_AZ": {
                                "name": "P2V3",
                                "tier": "PremiumV2",
                                "size": "P2V3",
                                "family": "Pv3",
                                "capacity": 3
                              },
                              "P3V3": {
                                "name": "P3V3",
                                "tier": "PremiumV2",
                                "size": "P3V3",
                                "family": "Pv3",
                                "capacity": 1
                              },
                              "P3V3_AZ": {
                                "name": "P3V3",
                                "tier": "PremiumV2",
                                "size": "P3V3",
                                "family": "Pv3",
                                "capacity": 3
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/serverfarms",
                              "apiVersion": "2022-03-01",
                              "name": "[parameters('name')]",
                              "kind": "[variables('aspKind')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "sku": "[variables('skuConfigurationMap')[parameters('sku')]]",
                              "properties": {
                                "perSiteScaling": "[parameters('perSiteScaling')]",
                                "maximumElasticWorkerCount": "[if(and(less(parameters('maximumElasticWorkerCount'), 3), variables('zoneRedundant')), 3, parameters('maximumElasticWorkerCount'))]",
                                "reserved": "[equals(parameters('serverOS'), 'Linux')]",
                                "targetWorkerCount": "[if(and(less(parameters('targetWorkerCount'), 3), variables('zoneRedundant')), 3, parameters('targetWorkerCount'))]",
                                "targetWorkerSizeId": "[parameters('targetWorkerSize')]",
                                "zoneRedundant": "[variables('zoneRedundant')]"
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('diagnosticWorkspaceId')))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": null,
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": null,
                                "eventHubName": null,
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": []
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the app service plan was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the app service plan."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the app service plan."
                              },
                              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Web/serverfarms', parameters('name')), '2022-03-01', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('{0}-webApp-Deployment', parameters('webAppName')), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "kind": "[if(equals(toLower(parameters('webAppBaseOs')), toLower('linux')), createObject('value', 'app,linux'), createObject('value', 'app'))]",
                          "name": {
                            "value": "[parameters('webAppName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "serverFarmResourceId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('appSvcPlan-{0}-Deployment', parameters('appServicePlanName')), 64)), '2022-09-01').outputs.resourceId.value]"
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('logAnalyticsWsId')]"
                          },
                          "virtualNetworkSubnetId": {
                            "value": "[parameters('subnetIdForVnetInjection')]"
                          },
                          "appInsightId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appInsights-Deployment'), '2022-09-01').outputs.appInsResourceId.value]"
                          },
                          "siteConfigSelection": "[if(equals(toLower(parameters('webAppBaseOs')), toLower('linux')), createObject('value', 'linuxNet6'), createObject('value', 'windowsNet6'))]",
                          "hasPrivateLink": {
                            "value": "[not(empty(parameters('subnetPrivateEndpointId')))]"
                          },
                          "systemAssignedIdentity": {
                            "value": false
                          },
                          "userAssignedIdentities": {
                            "value": {
                              "[format('{0}', reference(resourceId('Microsoft.Resources/deployments', 'appSvcUserAssignedManagedIdenity-Deployment'), '2022-09-01').outputs.id.value)]": {}
                            }
                          },
                          "appSettingsKeyValuePairs": {
                            "value": "[variables('redisConnStr')]"
                          },
                          "slots": {
                            "value": [
                              {
                                "name": "[variables('slotName')]"
                              }
                            ]
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "14737079603874479965"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the site."
                              },
                              "maxLength": 60
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "allowedValues": [
                                "functionapp",
                                "functionapp,linux",
                                "app",
                                "app,linux",
                                "app,linux,container"
                              ],
                              "metadata": {
                                "description": "Required. Type of site to deploy."
                              }
                            },
                            "serverFarmResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the app service plan to use for the site."
                              }
                            },
                            "httpsOnly": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Configures a site to accept only HTTPS requests. Issues redirect for HTTP requests."
                              }
                            },
                            "clientAffinityEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. If client affinity is enabled."
                              }
                            },
                            "appServiceEnvironmentId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the app service environment to use for this resource."
                              }
                            },
                            "systemAssignedIdentity": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enables system assigned managed identity on the resource."
                              }
                            },
                            "userAssignedIdentities": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The ID(s) to assign to the resource."
                              }
                            },
                            "keyVaultAccessIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the assigned identity to be used to access a key vault with."
                              }
                            },
                            "storageAccountRequired": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Checks if Customer provided storage account is required."
                              }
                            },
                            "virtualNetworkSubnetId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}."
                              }
                            },
                            "siteConfigSelection": {
                              "type": "string",
                              "metadata": {
                                "description": "Mandatory. Predefined set of config settings."
                              },
                              "allowedValues": [
                                "windowsNet6",
                                "windowsNet7",
                                "windowsAspNet486",
                                "linuxJava17Se",
                                "linuxNet7",
                                "linuxNet6",
                                "linuxNode18"
                              ]
                            },
                            "storageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                              }
                            },
                            "appInsightId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the app insight to leverage for this resource."
                              }
                            },
                            "setAzureWebJobsDashboard": {
                              "type": "bool",
                              "defaultValue": "[if(contains(parameters('kind'), 'functionapp'), true(), false())]",
                              "metadata": {
                                "description": "Optional. For function apps. If true the app settings \"AzureWebJobsDashboard\" will be set. If false not. In case you use Application Insights it can make sense to not set it for performance reasons."
                              }
                            },
                            "appSettingsKeyValuePairs": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The app settings-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                              }
                            },
                            "slots": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Configuration for deployment slots for an app."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of log analytics workspace."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": "[if(equals(parameters('kind'), 'functionapp'), createArray('FunctionAppLogs'), createArray('AppServiceHTTPLogs', 'AppServiceConsoleLogs', 'AppServiceAppLogs', 'AppServiceAuditLogs', 'AppServiceIPSecAuditLogs', 'AppServicePlatformLogs'))]",
                              "allowedValues": [
                                "allLogs",
                                "AppServiceHTTPLogs",
                                "AppServiceConsoleLogs",
                                "AppServiceAppLogs",
                                "AppServiceAuditLogs",
                                "AppServiceIPSecAuditLogs",
                                "AppServicePlatformLogs",
                                "FunctionAppLogs"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "AllMetrics"
                              ],
                              "allowedValues": [
                                "AllMetrics"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            },
                            "containerSize": {
                              "type": "int",
                              "defaultValue": -1,
                              "metadata": {
                                "description": "Optional. Size of the function container."
                              }
                            },
                            "customDomainVerificationId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Unique identifier that verifies the custom domains assigned to the app. Customer will add this ID to a txt record for verification."
                              }
                            },
                            "dailyMemoryTimeQuota": {
                              "type": "int",
                              "defaultValue": -1,
                              "metadata": {
                                "description": "Optional. Maximum allowed daily memory-time quota (applicable on dynamic apps only)."
                              }
                            },
                            "enabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Setting this value to false disables the app (takes the app offline)."
                              }
                            },
                            "hostNameSslStates": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Hostname SSL states are used to manage the SSL bindings for app's hostnames."
                              }
                            },
                            "hasPrivateLink": {
                              "type": "bool",
                              "metadata": {
                                "description": "Optional, default is false. If true, then a private endpoint must be assigned to the web app"
                              }
                            },
                            "redundancyMode": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "ActiveActive",
                                "Failover",
                                "GeoRedundant",
                                "Manual",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Site redundancy mode."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogsSpecified",
                                "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                                "input": {
                                  "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ],
                            "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true(), 'retentionPolicy', createObject('enabled', true(), 'days', parameters('diagnosticLogsRetentionInDays')))), variables('diagnosticsLogsSpecified'))]",
                            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]",
                            "webapp_dns_name": ".azurewebsites.net",
                            "siteConfigConfigurationMap": {
                              "windowsNet6": {
                                "metadata": [
                                  {
                                    "name": "CURRENT_STACK",
                                    "value": "dotnet"
                                  }
                                ],
                                "netFrameworkVersion": "v6.0",
                                "use32BitWorkerProcess": false
                              },
                              "windowsNet7": {
                                "metadata": [
                                  {
                                    "name": "CURRENT_STACK",
                                    "value": "dotnet"
                                  }
                                ],
                                "netFrameworkVersion": "v7.0",
                                "use32BitWorkerProcess": false
                              },
                              "windowsAspNet486": {
                                "metadata": [
                                  {
                                    "name": "CURRENT_STACK",
                                    "value": "dotnet"
                                  }
                                ],
                                "netFrameworkVersion": "v4.0",
                                "use32BitWorkerProcess": false
                              },
                              "linuxJava17Se": {
                                "linuxFxVersion": "JAVA|17-java17",
                                "use32BitWorkerProcess": false
                              },
                              "linuxNet7": {
                                "linuxFxVersion": "DOTNETCORE|7.0",
                                "use32BitWorkerProcess": false
                              },
                              "linuxNet6": {
                                "linuxFxVersion": "DOTNETCORE|6.0",
                                "use32BitWorkerProcess": false
                              },
                              "linuxNode18": {
                                "linuxFxVersion": "NODE|18-lts",
                                "use32BitWorkerProcess": false
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites",
                              "apiVersion": "2022-03-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "kind": "[parameters('kind')]",
                              "tags": "[parameters('tags')]",
                              "identity": "[variables('identity')]",
                              "properties": {
                                "serverFarmId": "[parameters('serverFarmResourceId')]",
                                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                                "httpsOnly": "[parameters('httpsOnly')]",
                                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentId'))), createObject('id', parameters('appServiceEnvironmentId')), null())]",
                                "storageAccountRequired": "[parameters('storageAccountRequired')]",
                                "keyVaultReferenceIdentity": "[if(not(empty(parameters('keyVaultAccessIdentityResourceId'))), parameters('keyVaultAccessIdentityResourceId'), null())]",
                                "virtualNetworkSubnetId": "[if(not(empty(parameters('virtualNetworkSubnetId'))), parameters('virtualNetworkSubnetId'), null())]",
                                "vnetRouteAllEnabled": "[if(not(empty(parameters('virtualNetworkSubnetId'))), true(), false())]",
                                "siteConfig": "[variables('siteConfigConfigurationMap')[parameters('siteConfigSelection')]]",
                                "clientCertEnabled": false,
                                "clientCertExclusionPaths": null,
                                "clientCertMode": "Optional",
                                "cloningInfo": null,
                                "containerSize": "[if(not(equals(parameters('containerSize'), -1)), parameters('containerSize'), null())]",
                                "customDomainVerificationId": "[if(not(empty(parameters('customDomainVerificationId'))), parameters('customDomainVerificationId'), null())]",
                                "dailyMemoryTimeQuota": "[if(not(equals(parameters('dailyMemoryTimeQuota'), -1)), parameters('dailyMemoryTimeQuota'), null())]",
                                "enabled": "[parameters('enabled')]",
                                "hostNameSslStates": "[parameters('hostNameSslStates')]",
                                "hyperV": false,
                                "redundancyMode": "[parameters('redundancyMode')]"
                              }
                            },
                            {
                              "condition": "[equals(parameters('hasPrivateLink'), true())]",
                              "type": "Microsoft.Web/sites/hostNameBindings",
                              "apiVersion": "2022-03-01",
                              "name": "[format('{0}/{1}', parameters('name'), format('{0}{1}', parameters('name'), variables('webapp_dns_name')))]",
                              "properties": {
                                "siteName": "[parameters('name')]",
                                "hostNameType": "Verified"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
                              ]
                            },
                            {
                              "condition": "[not(empty(parameters('diagnosticWorkspaceId')))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": null,
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": null,
                                "eventHubName": null,
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('Site-Config-AppSettings-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "appName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "kind": {
                                    "value": "[parameters('kind')]"
                                  },
                                  "storageAccountId": {
                                    "value": "[parameters('storageAccountId')]"
                                  },
                                  "appInsightId": {
                                    "value": "[parameters('appInsightId')]"
                                  },
                                  "setAzureWebJobsDashboard": {
                                    "value": "[parameters('setAzureWebJobsDashboard')]"
                                  },
                                  "appSettingsKeyValuePairs": {
                                    "value": "[parameters('appSettingsKeyValuePairs')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.17.1.54307",
                                      "templateHash": "14165506043480703418"
                                    }
                                  },
                                  "parameters": {
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "kind": {
                                      "type": "string",
                                      "allowedValues": [
                                        "functionapp",
                                        "functionapp,linux",
                                        "app",
                                        "app,linux",
                                        "app,linux,container"
                                      ],
                                      "metadata": {
                                        "description": "Required. Type of site to deploy."
                                      }
                                    },
                                    "storageAccountId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                                      }
                                    },
                                    "appInsightId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the app insight to leverage for this resource."
                                      }
                                    },
                                    "setAzureWebJobsDashboard": {
                                      "type": "bool",
                                      "defaultValue": "[if(contains(parameters('kind'), 'functionapp'), true(), false())]",
                                      "metadata": {
                                        "description": "Optional. For function apps. If true the app settings \"AzureWebJobsDashboard\" will be set. If false not. In case you use Application Insights it can make sense to not set it for performance reasons."
                                      }
                                    },
                                    "appSettingsKeyValuePairs": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. The app settings key-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Web/sites/config",
                                      "apiVersion": "2022-03-01",
                                      "name": "[format('{0}/{1}', parameters('appName'), 'appsettings')]",
                                      "kind": "[parameters('kind')]",
                                      "properties": "[union(parameters('appSettingsKeyValuePairs'), if(not(empty(parameters('storageAccountId'))), union(createObject('AzureWebJobsStorage', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value)), if(equals(parameters('setAzureWebJobsDashboard'), true()), createObject('AzureWebJobsDashboard', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value)), createObject())), createObject()), if(not(empty(parameters('appInsightId'))), createObject('APPINSIGHTS_INSTRUMENTATIONKEY', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').InstrumentationKey, 'APPLICATIONINSIGHTS_CONNECTION_STRING', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').ConnectionString, 'XDT_MicrosoftApplicationInsights_Mode', 'recommended', 'ApplicationInsightsAgent_EXTENSION_VERSION', if(contains(parameters('kind'), 'linux'), '~3', '~2')), createObject()))]"
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the site config."
                                      },
                                      "value": "appsettings"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the site config."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), 'appsettings')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the site config was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "app_slots",
                                "count": "[length(parameters('slots'))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('Slot-{0}-{1}', parameters('slots')[copyIndex()].name, uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('slots')[copyIndex()].name]"
                                  },
                                  "appName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "kind": {
                                    "value": "[parameters('kind')]"
                                  },
                                  "serverFarmResourceId": {
                                    "value": "[parameters('serverFarmResourceId')]"
                                  },
                                  "httpsOnly": "[if(contains(parameters('slots')[copyIndex()], 'httpsOnly'), createObject('value', parameters('slots')[copyIndex()].httpsOnly), createObject('value', parameters('httpsOnly')))]",
                                  "appServiceEnvironmentId": "[if(not(empty(parameters('appServiceEnvironmentId'))), createObject('value', parameters('appServiceEnvironmentId')), createObject('value', ''))]",
                                  "clientAffinityEnabled": "[if(contains(parameters('slots')[copyIndex()], 'clientAffinityEnabled'), createObject('value', parameters('slots')[copyIndex()].clientAffinityEnabled), createObject('value', parameters('clientAffinityEnabled')))]",
                                  "systemAssignedIdentity": "[if(contains(parameters('slots')[copyIndex()], 'systemAssignedIdentity'), createObject('value', parameters('slots')[copyIndex()].systemAssignedIdentity), createObject('value', parameters('systemAssignedIdentity')))]",
                                  "userAssignedIdentities": "[if(contains(parameters('slots')[copyIndex()], 'userAssignedIdentities'), createObject('value', parameters('slots')[copyIndex()].userAssignedIdentities), createObject('value', parameters('userAssignedIdentities')))]",
                                  "keyVaultAccessIdentityResourceId": "[if(contains(parameters('slots')[copyIndex()], 'keyVaultAccessIdentityResourceId'), createObject('value', parameters('slots')[copyIndex()].keyVaultAccessIdentityResourceId), createObject('value', parameters('keyVaultAccessIdentityResourceId')))]",
                                  "storageAccountRequired": "[if(contains(parameters('slots')[copyIndex()], 'storageAccountRequired'), createObject('value', parameters('slots')[copyIndex()].storageAccountRequired), createObject('value', parameters('storageAccountRequired')))]",
                                  "virtualNetworkSubnetId": "[if(contains(parameters('slots')[copyIndex()], 'virtualNetworkSubnetId'), createObject('value', parameters('slots')[copyIndex()].virtualNetworkSubnetId), createObject('value', parameters('virtualNetworkSubnetId')))]",
                                  "siteConfig": "[if(contains(parameters('slots')[copyIndex()], 'siteConfig'), createObject('value', parameters('slots')[copyIndex()].siteConfig), createObject('value', variables('siteConfigConfigurationMap')[parameters('siteConfigSelection')]))]",
                                  "storageAccountId": "[if(contains(parameters('slots')[copyIndex()], 'storageAccountId'), createObject('value', parameters('slots')[copyIndex()].storageAccountId), createObject('value', parameters('storageAccountId')))]",
                                  "appInsightId": "[if(contains(parameters('slots')[copyIndex()], 'appInsightId'), createObject('value', parameters('slots')[copyIndex()].appInsightId), createObject('value', parameters('appInsightId')))]",
                                  "setAzureWebJobsDashboard": "[if(contains(parameters('slots')[copyIndex()], 'setAzureWebJobsDashboard'), createObject('value', parameters('slots')[copyIndex()].setAzureWebJobsDashboard), createObject('value', parameters('setAzureWebJobsDashboard')))]",
                                  "diagnosticLogsRetentionInDays": "[if(contains(parameters('slots')[copyIndex()], 'diagnosticLogsRetentionInDays'), createObject('value', parameters('slots')[copyIndex()].diagnosticLogsRetentionInDays), createObject('value', parameters('diagnosticLogsRetentionInDays')))]",
                                  "diagnosticWorkspaceId": {
                                    "value": "[parameters('diagnosticWorkspaceId')]"
                                  },
                                  "diagnosticLogCategoriesToEnable": "[if(contains(parameters('slots')[copyIndex()], 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('slots')[copyIndex()].diagnosticLogCategoriesToEnable), createObject('value', parameters('diagnosticLogCategoriesToEnable')))]",
                                  "diagnosticMetricsToEnable": "[if(contains(parameters('slots')[copyIndex()], 'diagnosticMetricsToEnable'), createObject('value', parameters('slots')[copyIndex()].diagnosticMetricsToEnable), createObject('value', parameters('diagnosticMetricsToEnable')))]",
                                  "appSettingsKeyValuePairs": "[if(contains(parameters('slots')[copyIndex()], 'appSettingsKeyValuePairs'), createObject('value', parameters('slots')[copyIndex()].appSettingsKeyValuePairs), createObject('value', parameters('appSettingsKeyValuePairs')))]",
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "containerSize": "[if(contains(parameters('slots')[copyIndex()], 'containerSize'), createObject('value', parameters('slots')[copyIndex()].containerSize), createObject('value', -1))]",
                                  "customDomainVerificationId": "[if(contains(parameters('slots')[copyIndex()], 'customDomainVerificationId'), createObject('value', parameters('slots')[copyIndex()].customDomainVerificationId), createObject('value', ''))]",
                                  "dailyMemoryTimeQuota": "[if(contains(parameters('slots')[copyIndex()], 'dailyMemoryTimeQuota'), createObject('value', parameters('slots')[copyIndex()].dailyMemoryTimeQuota), createObject('value', -1))]",
                                  "enabled": "[if(contains(parameters('slots')[copyIndex()], 'enabled'), createObject('value', parameters('slots')[copyIndex()].enabled), createObject('value', true()))]",
                                  "hostNameSslStates": "[if(contains(parameters('slots')[copyIndex()], 'hostNameSslStates'), createObject('value', parameters('slots')[copyIndex()].hostNameSslStates), createObject('value', createArray()))]",
                                  "publicNetworkAccess": "[if(contains(parameters('slots')[copyIndex()], 'publicNetworkAccess'), createObject('value', parameters('slots')[copyIndex()].publicNetworkAccess), createObject('value', ''))]",
                                  "redundancyMode": "[if(contains(parameters('slots')[copyIndex()], 'redundancyMode'), createObject('value', parameters('slots')[copyIndex()].redundancyMode), createObject('value', 'None'))]",
                                  "vnetContentShareEnabled": "[if(contains(parameters('slots')[copyIndex()], 'vnetContentShareEnabled'), createObject('value', parameters('slots')[copyIndex()].vnetContentShareEnabled), createObject('value', false()))]",
                                  "vnetImagePullEnabled": "[if(contains(parameters('slots')[copyIndex()], 'vnetImagePullEnabled'), createObject('value', parameters('slots')[copyIndex()].vnetImagePullEnabled), createObject('value', false()))]",
                                  "vnetRouteAllEnabled": "[if(contains(parameters('slots')[copyIndex()], 'vnetRouteAllEnabled'), createObject('value', parameters('slots')[copyIndex()].vnetRouteAllEnabled), createObject('value', false()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.17.1.54307",
                                      "templateHash": "4018853689576160044"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the slot."
                                      }
                                    },
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "kind": {
                                      "type": "string",
                                      "allowedValues": [
                                        "functionapp",
                                        "functionapp,linux",
                                        "app",
                                        "app,linux",
                                        "app,linux,container"
                                      ],
                                      "metadata": {
                                        "description": "Required. Type of slot to deploy."
                                      }
                                    },
                                    "serverFarmResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The resource ID of the app service plan to use for the slot."
                                      }
                                    },
                                    "httpsOnly": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Configures a slot to accept only HTTPS requests. Issues redirect for HTTP requests."
                                      }
                                    },
                                    "clientAffinityEnabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. If client affinity is enabled."
                                      }
                                    },
                                    "appServiceEnvironmentId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The resource ID of the app service environment to use for this resource."
                                      }
                                    },
                                    "systemAssignedIdentity": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Enables system assigned managed identity on the resource."
                                      }
                                    },
                                    "userAssignedIdentities": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. The ID(s) to assign to the resource."
                                      }
                                    },
                                    "keyVaultAccessIdentityResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The resource ID of the assigned identity to be used to access a key vault with."
                                      }
                                    },
                                    "storageAccountRequired": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Checks if Customer provided storage account is required."
                                      }
                                    },
                                    "virtualNetworkSubnetId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}."
                                      }
                                    },
                                    "siteConfig": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. The site config object."
                                      }
                                    },
                                    "storageAccountId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                                      }
                                    },
                                    "appInsightId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the app insight to leverage for this resource."
                                      }
                                    },
                                    "setAzureWebJobsDashboard": {
                                      "type": "bool",
                                      "defaultValue": "[if(contains(parameters('kind'), 'functionapp'), true(), false())]",
                                      "metadata": {
                                        "description": "Optional. For function apps. If true the app settings \"AzureWebJobsDashboard\" will be set. If false not. In case you use Application Insights it can make sense to not set it for performance reasons."
                                      }
                                    },
                                    "appSettingsKeyValuePairs": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. The app settings-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "diagnosticLogsRetentionInDays": {
                                      "type": "int",
                                      "defaultValue": 365,
                                      "maxValue": 365,
                                      "minValue": 0,
                                      "metadata": {
                                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                                      }
                                    },
                                    "diagnosticWorkspaceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of log analytics workspace."
                                      }
                                    },
                                    "diagnosticLogCategoriesToEnable": {
                                      "type": "array",
                                      "defaultValue": "[if(equals(parameters('kind'), 'functionapp'), createArray('FunctionAppLogs'), createArray('AppServiceHTTPLogs', 'AppServiceConsoleLogs', 'AppServiceAppLogs', 'AppServiceAuditLogs', 'AppServiceIPSecAuditLogs', 'AppServicePlatformLogs'))]",
                                      "allowedValues": [
                                        "AppServiceHTTPLogs",
                                        "AppServiceConsoleLogs",
                                        "AppServiceAppLogs",
                                        "AppServiceAuditLogs",
                                        "AppServiceIPSecAuditLogs",
                                        "AppServicePlatformLogs",
                                        "FunctionAppLogs"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The name of logs that will be streamed."
                                      }
                                    },
                                    "diagnosticMetricsToEnable": {
                                      "type": "array",
                                      "defaultValue": [
                                        "AllMetrics"
                                      ],
                                      "allowedValues": [
                                        "AllMetrics"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The name of metrics that will be streamed."
                                      }
                                    },
                                    "diagnosticSettingsName": {
                                      "type": "string",
                                      "defaultValue": "[format('slot-{0}-diagnosticSettings', parameters('name'))]",
                                      "metadata": {
                                        "description": "Optional. The name of the diagnostic setting, if deployed."
                                      }
                                    },
                                    "containerSize": {
                                      "type": "int",
                                      "defaultValue": -1,
                                      "metadata": {
                                        "description": "Optional. Size of the function container."
                                      }
                                    },
                                    "customDomainVerificationId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Unique identifier that verifies the custom domains assigned to the app. Customer will add this ID to a txt record for verification."
                                      }
                                    },
                                    "dailyMemoryTimeQuota": {
                                      "type": "int",
                                      "defaultValue": -1,
                                      "metadata": {
                                        "description": "Optional. Maximum allowed daily memory-time quota (applicable on dynamic apps only)."
                                      }
                                    },
                                    "enabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Setting this value to false disables the app (takes the app offline)."
                                      }
                                    },
                                    "hostNameSslStates": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Hostname SSL states are used to manage the SSL bindings for app's hostnames."
                                      }
                                    },
                                    "publicNetworkAccess": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "Enabled",
                                        "Disabled",
                                        ""
                                      ],
                                      "metadata": {
                                        "description": "Optional. Allow or block all public traffic."
                                      }
                                    },
                                    "redundancyMode": {
                                      "type": "string",
                                      "defaultValue": "None",
                                      "allowedValues": [
                                        "ActiveActive",
                                        "Failover",
                                        "GeoRedundant",
                                        "Manual",
                                        "None"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Site redundancy mode."
                                      }
                                    },
                                    "vnetContentShareEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. To enable accessing content over virtual network."
                                      }
                                    },
                                    "vnetImagePullEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. To enable pulling image over Virtual Network."
                                      }
                                    },
                                    "vnetRouteAllEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "diagnosticsLogs",
                                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                        "input": {
                                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                          "enabled": true,
                                          "retentionPolicy": {
                                            "enabled": true,
                                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                          }
                                        }
                                      },
                                      {
                                        "name": "diagnosticsMetrics",
                                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                        "input": {
                                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                          "timeGrain": null,
                                          "enabled": true,
                                          "retentionPolicy": {
                                            "enabled": true,
                                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                          }
                                        }
                                      }
                                    ],
                                    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Web/sites/slots",
                                      "apiVersion": "2022-03-01",
                                      "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "kind": "[parameters('kind')]",
                                      "tags": "[parameters('tags')]",
                                      "identity": "[variables('identity')]",
                                      "properties": {
                                        "serverFarmId": "[parameters('serverFarmResourceId')]",
                                        "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                                        "httpsOnly": "[parameters('httpsOnly')]",
                                        "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentId'))), createObject('id', parameters('appServiceEnvironmentId')), null())]",
                                        "storageAccountRequired": "[parameters('storageAccountRequired')]",
                                        "keyVaultReferenceIdentity": "[if(not(empty(parameters('keyVaultAccessIdentityResourceId'))), parameters('keyVaultAccessIdentityResourceId'), null())]",
                                        "virtualNetworkSubnetId": "[if(not(empty(parameters('virtualNetworkSubnetId'))), parameters('virtualNetworkSubnetId'), null())]",
                                        "siteConfig": "[parameters('siteConfig')]",
                                        "clientCertEnabled": false,
                                        "clientCertExclusionPaths": null,
                                        "clientCertMode": "Optional",
                                        "cloningInfo": null,
                                        "containerSize": "[if(not(equals(parameters('containerSize'), -1)), parameters('containerSize'), null())]",
                                        "customDomainVerificationId": "[if(not(empty(parameters('customDomainVerificationId'))), parameters('customDomainVerificationId'), null())]",
                                        "dailyMemoryTimeQuota": "[if(not(equals(parameters('dailyMemoryTimeQuota'), -1)), parameters('dailyMemoryTimeQuota'), null())]",
                                        "enabled": "[parameters('enabled')]",
                                        "hostNameSslStates": "[parameters('hostNameSslStates')]",
                                        "hyperV": false,
                                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                                        "redundancyMode": "[parameters('redundancyMode')]",
                                        "vnetContentShareEnabled": "[parameters('vnetContentShareEnabled')]",
                                        "vnetImagePullEnabled": "[parameters('vnetImagePullEnabled')]",
                                        "vnetRouteAllEnabled": "[parameters('vnetRouteAllEnabled')]"
                                      }
                                    },
                                    {
                                      "condition": "[not(empty(parameters('diagnosticWorkspaceId')))]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
                                      "name": "[parameters('diagnosticSettingsName')]",
                                      "properties": {
                                        "storageAccountId": null,
                                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                        "eventHubAuthorizationRuleId": null,
                                        "eventHubName": null,
                                        "metrics": "[variables('diagnosticsMetrics')]",
                                        "logs": "[variables('diagnosticsLogs')]"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[take(format('Slot-{0}-Config-AppSettings-{1}', parameters('name'), uniqueString(deployment().name, parameters('location'))), 64)]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "slotName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "appName": {
                                            "value": "[parameters('appName')]"
                                          },
                                          "kind": {
                                            "value": "[parameters('kind')]"
                                          },
                                          "storageAccountId": {
                                            "value": "[parameters('storageAccountId')]"
                                          },
                                          "appInsightId": {
                                            "value": "[parameters('appInsightId')]"
                                          },
                                          "setAzureWebJobsDashboard": {
                                            "value": "[parameters('setAzureWebJobsDashboard')]"
                                          },
                                          "appSettingsKeyValuePairs": {
                                            "value": "[parameters('appSettingsKeyValuePairs')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.17.1.54307",
                                              "templateHash": "15599280375124632122"
                                            }
                                          },
                                          "parameters": {
                                            "slotName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Slot name to be configured."
                                              }
                                            },
                                            "appName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "kind": {
                                              "type": "string",
                                              "allowedValues": [
                                                "functionapp",
                                                "functionapp,linux",
                                                "app",
                                                "app,linux",
                                                "app,linux,container"
                                              ],
                                              "metadata": {
                                                "description": "Required. Type of slot to deploy."
                                              }
                                            },
                                            "storageAccountId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                                              }
                                            },
                                            "appInsightId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Resource ID of the app insight to leverage for this resource."
                                              }
                                            },
                                            "setAzureWebJobsDashboard": {
                                              "type": "bool",
                                              "defaultValue": "[if(contains(parameters('kind'), 'functionapp'), true(), false())]",
                                              "metadata": {
                                                "description": "Optional. For function apps. If true the app settings \"AzureWebJobsDashboard\" will be set. If false not. In case you use Application Insights it can make sense to not set it for performance reasons."
                                              }
                                            },
                                            "appSettingsKeyValuePairs": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. The app settings key-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Web/sites/slots/config",
                                              "apiVersion": "2022-03-01",
                                              "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), 'appsettings')]",
                                              "kind": "[parameters('kind')]",
                                              "properties": "[union(parameters('appSettingsKeyValuePairs'), if(not(empty(parameters('storageAccountId'))), union(createObject('AzureWebJobsStorage', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value)), if(equals(parameters('setAzureWebJobsDashboard'), true()), createObject('AzureWebJobsDashboard', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', last(split(parameters('storageAccountId'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountId'), '/')[2], split(parameters('storageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-02-01').keys[0].value)), createObject())), createObject()), if(not(empty(parameters('appInsightId'))), createObject('APPINSIGHTS_INSTRUMENTATIONKEY', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').InstrumentationKey, 'APPLICATIONINSIGHTS_CONNECTION_STRING', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').ConnectionString, 'XDT_MicrosoftApplicationInsights_Mode', 'recommended', 'ApplicationInsightsAgent_EXTENSION_VERSION', if(contains(parameters('kind'), 'linux'), '~3', '~2')), createObject()))]"
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the slot config."
                                              },
                                              "value": "appsettings"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the slot config."
                                              },
                                              "value": "[resourceId('Microsoft.Web/sites/slots/config', parameters('appName'), parameters('slotName'), 'appsettings')]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the slot config was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the slot."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the slot."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name'))]"
                                    },
                                    "systemAssignedPrincipalId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The principal ID of the system assigned identity."
                                      },
                                      "value": "[if(and(parameters('systemAssignedIdentity'), if(contains(reference(resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name')), '2022-03-01', 'full'), 'identity'), contains(reference(resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name')), '2022-03-01', 'full').identity, 'principalId'), false())), reference(resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name')), '2022-03-01', 'full').identity.principalId, '')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference(resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name')), '2022-03-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the site."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the site."
                              },
                              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The azure location of the site."
                              },
                              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('name')), '2022-03-01', 'full').location]"
                            },
                            "slots": {
                              "type": "array",
                              "metadata": {
                                "description": "The list of the slots (names)."
                              },
                              "copy": {
                                "count": "[length(parameters('slots'))]",
                                "input": "[reference(resourceId('Microsoft.Resources/deployments', format('Slot-{0}-{1}', parameters('slots')[copyIndex()].name, uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.name.value]"
                              }
                            },
                            "slotResourceIds": {
                              "type": "array",
                              "metadata": {
                                "description": "The list of the slot resource ids."
                              },
                              "copy": {
                                "count": "[length(parameters('slots'))]",
                                "input": "[reference(resourceId('Microsoft.Resources/deployments', format('Slot-{0}-{1}', parameters('slots')[copyIndex()].name, uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.resourceId.value]"
                              }
                            },
                            "systemAssignedPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Web/sites', parameters('name')), '2022-03-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Web/sites', parameters('name')), '2022-03-01', 'full').identity.principalId, '')]"
                            },
                            "slotSystemAssignedPrincipalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity of slots."
                              },
                              "copy": {
                                "count": "[length(parameters('slots'))]",
                                "input": "[reference(resourceId('Microsoft.Resources/deployments', format('Slot-{0}-{1}', parameters('slots')[copyIndex()].name, uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.systemAssignedPrincipalId.value]"
                              }
                            },
                            "defaultHostname": {
                              "type": "string",
                              "metadata": {
                                "description": "Default hostname of the app."
                              },
                              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('name')), '2022-03-01').defaultHostName]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'appInsights-Deployment')]",
                        "[resourceId('Microsoft.Resources/deployments', take(format('appSvcPlan-{0}-Deployment', parameters('appServicePlanName')), 64))]",
                        "[resourceId('Microsoft.Resources/deployments', 'appSvcUserAssignedManagedIdenity-Deployment')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "appSvcUserAssignedManagedIdenity-Deployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('managedIdentityName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "18120221178179977349"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 128,
                              "minLength": 3,
                              "metadata": {
                                "description": "Required. The name of the user assigned managed Identity. 3-128, can contain \"-\" and \"_\""
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2018-11-30",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]"
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the managedIDentity."
                              },
                              "value": "[parameters('name')]"
                            },
                            "id": {
                              "type": "string",
                              "metadata": {
                                "description": "The id of the managedIDentity."
                              },
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "The type of the managedIDentity."
                              },
                              "value": "Microsoft.ManagedIdentity/userAssignedIdentities"
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The ServicePrincipalId of the managedIDentity."
                              },
                              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
                            },
                            "tenantId": {
                              "type": "string",
                              "metadata": {
                                "description": "The TenantId of the managedIDentity."
                              },
                              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').tenantId]"
                            },
                            "clientId": {
                              "type": "string",
                              "metadata": {
                                "description": "The clientId of the managedIDentity."
                              },
                              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').clientId]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('subnetPrivateEndpointId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('{0}-PrivateDnsZoneDeployment', replace(variables('webAppDnsZoneName'), '.', '-')), 64)]",
                      "subscriptionId": "[variables('vnetHubSplitTokens')[2]]",
                      "resourceGroup": "[variables('vnetHubSplitTokens')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('webAppDnsZoneName')]"
                          },
                          "virtualNetworkLinks": {
                            "value": "[parameters('virtualNetworkLinks')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "698709463730837083"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "virtualNetworkLinks": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                              }
                            },
                            "aRecords": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of A records to be added to the DNS Zone"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('name')]",
                              "location": "global",
                              "tags": "[parameters('tags')]"
                            },
                            {
                              "copy": {
                                "name": "privateDnsZoneLink",
                                "count": "[length(parameters('virtualNetworkLinks'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2018-09-01",
                              "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
                              "location": "global",
                              "properties": {
                                "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                                "virtualNetwork": {
                                  "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "dnsARecord",
                                "count": "[length(parameters('aRecords'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
                              "properties": {
                                "ttl": 60,
                                "aRecords": [
                                  {
                                    "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "privateDnsZonesId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('subnetPrivateEndpointId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('pe-{0}-Deployment', parameters('webAppName')), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[take(format('pe-{0}', reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-webApp-Deployment', parameters('webAppName')), 64)), '2022-09-01').outputs.name.value), 64)]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "privateDnsZonesId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('vnetHubSplitTokens')[2], variables('vnetHubSplitTokens')[4]), 'Microsoft.Resources/deployments', take(format('{0}-PrivateDnsZoneDeployment', replace(variables('webAppDnsZoneName'), '.', '-')), 64)), '2022-09-01').outputs.privateDnsZonesId.value]"
                          },
                          "privateLinkServiceId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-webApp-Deployment', parameters('webAppName')), 64)), '2022-09-01').outputs.resourceId.value]"
                          },
                          "snetId": {
                            "value": "[parameters('subnetPrivateEndpointId')]"
                          },
                          "subresource": {
                            "value": "sites"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "14445154365330656192"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 64,
                              "minLength": 2,
                              "metadata": {
                                "description": "Required. Name of your pruvate endpoint. Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens."
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "snetId": {
                              "type": "string",
                              "metadata": {
                                "description": "The subnet resource ID where the nic of the PE will be attached to"
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource id of private link service. The resource ID of the Az Resource that we need to attach the pe to."
                              }
                            },
                            "subresource": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource that the private endpoint will be attached to, as shown in https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-overview#private-link-resource"
                              }
                            },
                            "privateDnsZonesId": {
                              "type": "string",
                              "metadata": {
                                "description": "Id of the relevant private DNS Zone, so that the PE can create an A record for the implicitly created nic"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "subnet": {
                                  "id": "[parameters('snetId')]"
                                },
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('pl-{0}', parameters('name'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                      "groupIds": [
                                        "[parameters('subresource')]"
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'dnsgroupname')]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "config1",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('privateDnsZonesId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', take(format('{0}-webApp-Deployment', parameters('webAppName')), 64))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('vnetHubSplitTokens')[2], variables('vnetHubSplitTokens')[4]), 'Microsoft.Resources/deployments', take(format('{0}-PrivateDnsZoneDeployment', replace(variables('webAppDnsZoneName'), '.', '-')), 64))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('subnetPrivateEndpointId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('pe-{0}-slot-{1}-Deployment', parameters('webAppName'), variables('slotName')), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[take(format('pe-{0}-slot-{1}', parameters('webAppName'), variables('slotName')), 64)]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "privateDnsZonesId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('vnetHubSplitTokens')[2], variables('vnetHubSplitTokens')[4]), 'Microsoft.Resources/deployments', take(format('{0}-PrivateDnsZoneDeployment', replace(variables('webAppDnsZoneName'), '.', '-')), 64)), '2022-09-01').outputs.privateDnsZonesId.value]"
                          },
                          "privateLinkServiceId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-webApp-Deployment', parameters('webAppName')), 64)), '2022-09-01').outputs.resourceId.value]"
                          },
                          "snetId": {
                            "value": "[parameters('subnetPrivateEndpointId')]"
                          },
                          "subresource": {
                            "value": "[format('sites-{0}', variables('slotName'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "14445154365330656192"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 64,
                              "minLength": 2,
                              "metadata": {
                                "description": "Required. Name of your pruvate endpoint. Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens."
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "snetId": {
                              "type": "string",
                              "metadata": {
                                "description": "The subnet resource ID where the nic of the PE will be attached to"
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource id of private link service. The resource ID of the Az Resource that we need to attach the pe to."
                              }
                            },
                            "subresource": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource that the private endpoint will be attached to, as shown in https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-overview#private-link-resource"
                              }
                            },
                            "privateDnsZonesId": {
                              "type": "string",
                              "metadata": {
                                "description": "Id of the relevant private DNS Zone, so that the PE can create an A record for the implicitly created nic"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "subnet": {
                                  "id": "[parameters('snetId')]"
                                },
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('pl-{0}', parameters('name'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                      "groupIds": [
                                        "[parameters('subresource')]"
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'dnsgroupname')]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "config1",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('privateDnsZonesId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', take(format('{0}-webApp-Deployment', parameters('webAppName')), 64))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('vnetHubSplitTokens')[2], variables('vnetHubSplitTokens')[4]), 'Microsoft.Resources/deployments', take(format('{0}-PrivateDnsZoneDeployment', replace(variables('webAppDnsZoneName'), '.', '-')), 64))]"
                      ]
                    },
                    {
                      "condition": "[parameters('deployAppConfig')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('{0}-app-configuration-Deployment', parameters('appConfigurationName')), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('appConfigurationName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "hasPrivateEndpoint": {
                            "value": "[not(empty(parameters('subnetPrivateEndpointId')))]"
                          },
                          "disableLocalAuth": {
                            "value": false
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "9895518615263357712"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Azure App Configuration. Alphanumerics, underscores, and hyphens"
                              },
                              "maxLength": 50,
                              "minLength": 5
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "systemAssignedIdentity": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enables system assigned managed identity on the resource."
                              }
                            },
                            "userAssignedIdentities": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The ID(s) to assign to the resource."
                              }
                            },
                            "sku": {
                              "type": "string",
                              "defaultValue": "Standard",
                              "metadata": {
                                "description": "Optional. Pricing tier of App Configuration."
                              },
                              "allowedValues": [
                                "Free",
                                "Standard"
                              ]
                            },
                            "disableLocalAuth": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional, default is true. Disables all authentication methods other than AAD authentication."
                              }
                            },
                            "enablePurgeProtection": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional default is false. Property specifying whether protection against purge is enabled for this configuration store."
                              }
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "",
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set."
                              }
                            },
                            "hasPrivateEndpoint": {
                              "type": "bool",
                              "metadata": {
                                "description": "If the resourcw has private endpoints enabled."
                              }
                            },
                            "softDeleteRetentionInDays": {
                              "type": "int",
                              "defaultValue": 7,
                              "maxValue": 7,
                              "minValue": 1,
                              "metadata": {
                                "description": "Optional. The amount of time in days that the configuration store will be retained when it is soft deleted."
                              }
                            }
                          },
                          "variables": {
                            "identityType": "[if(parameters('systemAssignedIdentity'), 'SystemAssigned', if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                            "identity": {
                              "type": "[variables('identityType')]",
                              "userAssignedIdentities": "[if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.AppConfiguration/configurationStores",
                              "apiVersion": "2021-10-01-preview",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('sku')]"
                              },
                              "identity": "[variables('identity')]",
                              "properties": {
                                "disableLocalAuth": "[parameters('disableLocalAuth')]",
                                "enablePurgeProtection": "[if(equals(parameters('sku'), 'Free'), false(), parameters('enablePurgeProtection'))]",
                                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(parameters('hasPrivateEndpoint'), 'Disabled', null()))]",
                                "softDeleteRetentionInDays": "[if(equals(parameters('sku'), 'Free'), 0, parameters('softDeleteRetentionInDays'))]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the app configuration."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the app configuration."
                              },
                              "value": "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the app configuration store was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "systemAssignedPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name')), '2021-10-01-preview', 'full').identity, 'principalId')), reference(resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name')), '2021-10-01-preview', 'full').identity.principalId, '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name')), '2021-10-01-preview', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(not(empty(parameters('subnetPrivateEndpointId'))), parameters('deployAppConfig'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('{0}-PrivateDnsZoneDeployment', replace(variables('appConfigurationDnsZoneName'), '.', '-')), 64)]",
                      "subscriptionId": "[variables('vnetHubSplitTokens')[2]]",
                      "resourceGroup": "[variables('vnetHubSplitTokens')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('appConfigurationDnsZoneName')]"
                          },
                          "virtualNetworkLinks": {
                            "value": "[parameters('virtualNetworkLinks')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "698709463730837083"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "virtualNetworkLinks": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                              }
                            },
                            "aRecords": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of A records to be added to the DNS Zone"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('name')]",
                              "location": "global",
                              "tags": "[parameters('tags')]"
                            },
                            {
                              "copy": {
                                "name": "privateDnsZoneLink",
                                "count": "[length(parameters('virtualNetworkLinks'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2018-09-01",
                              "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
                              "location": "global",
                              "properties": {
                                "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                                "virtualNetwork": {
                                  "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "dnsARecord",
                                "count": "[length(parameters('aRecords'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
                              "properties": {
                                "ttl": 60,
                                "aRecords": [
                                  {
                                    "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "privateDnsZonesId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(not(empty(parameters('subnetPrivateEndpointId'))), parameters('deployAppConfig'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('pe-{0}-Deployment', parameters('appConfigurationName')), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": "[if(and(not(empty(parameters('subnetPrivateEndpointId'))), parameters('deployAppConfig')), createObject('value', format('pe-{0}', reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-app-configuration-Deployment', parameters('appConfigurationName')), 64)), '2022-09-01').outputs.name.value)), createObject('value', ''))]",
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "privateDnsZonesId": "[if(and(not(empty(parameters('subnetPrivateEndpointId'))), parameters('deployAppConfig')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('vnetHubSplitTokens')[2], variables('vnetHubSplitTokens')[4]), 'Microsoft.Resources/deployments', take(format('{0}-PrivateDnsZoneDeployment', replace(variables('appConfigurationDnsZoneName'), '.', '-')), 64)), '2022-09-01').outputs.privateDnsZonesId.value), createObject('value', ''))]",
                          "privateLinkServiceId": "[if(and(not(empty(parameters('subnetPrivateEndpointId'))), parameters('deployAppConfig')), createObject('value', reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-app-configuration-Deployment', parameters('appConfigurationName')), 64)), '2022-09-01').outputs.resourceId.value), createObject('value', ''))]",
                          "snetId": {
                            "value": "[parameters('subnetPrivateEndpointId')]"
                          },
                          "subresource": {
                            "value": "configurationStores"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "14445154365330656192"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 64,
                              "minLength": 2,
                              "metadata": {
                                "description": "Required. Name of your pruvate endpoint. Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens."
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "snetId": {
                              "type": "string",
                              "metadata": {
                                "description": "The subnet resource ID where the nic of the PE will be attached to"
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource id of private link service. The resource ID of the Az Resource that we need to attach the pe to."
                              }
                            },
                            "subresource": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource that the private endpoint will be attached to, as shown in https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-overview#private-link-resource"
                              }
                            },
                            "privateDnsZonesId": {
                              "type": "string",
                              "metadata": {
                                "description": "Id of the relevant private DNS Zone, so that the PE can create an A record for the implicitly created nic"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "subnet": {
                                  "id": "[parameters('snetId')]"
                                },
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('pl-{0}', parameters('name'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                      "groupIds": [
                                        "[parameters('subresource')]"
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'dnsgroupname')]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "config1",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('privateDnsZonesId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', take(format('{0}-app-configuration-Deployment', parameters('appConfigurationName')), 64))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('vnetHubSplitTokens')[2], variables('vnetHubSplitTokens')[4]), 'Microsoft.Resources/deployments', take(format('{0}-PrivateDnsZoneDeployment', replace(variables('appConfigurationDnsZoneName'), '.', '-')), 64))]"
                      ]
                    },
                    {
                      "condition": "[parameters('deployAppConfig')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "webAppSystemIdentityOnAppConfigDataReader-Deployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "ra-webAppSystemIdentityOnAppConfigDataReader"
                          },
                          "principalId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appSvcUserAssignedManagedIdenity-Deployment'), '2022-09-01').outputs.principalId.value]"
                          },
                          "resourceId": "[if(parameters('deployAppConfig'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-app-configuration-Deployment', parameters('appConfigurationName')), 64)), '2022-09-01').outputs.resourceId.value), createObject('value', ''))]",
                          "roleDefinitionId": {
                            "value": "516239f1-63e1-4d78-a4de-a74fb236a071"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "757317532981319179"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 64,
                              "metadata": {
                                "description": "The name of the RoleAssignment. Can be found by running: az role assignment list --output json"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The type of resource you wish to assign the role to. Can be found by running: az resource list --output json"
                              }
                            },
                            "roleDefinitionId": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the RoleDefinition you wish to assign. Can be found by running: az role definition list --output json"
                              }
                            },
                            "principalId": {
                              "type": "string"
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "ServicePrincipal",
                              "metadata": {
                                "description": "Optional, default ServicePrincipal"
                              },
                              "allowedValues": [
                                "ServicePrincipal",
                                "Device",
                                "ForeignGroup",
                                "Group",
                                "User"
                              ]
                            },
                            "roledescription": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "variables": {
                            "$fxv#0": "{\r\n    \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n    \"contentVersion\": \"1.0.0.0\",\r\n    \"parameters\": {\r\n        \"scope\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"name\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"roleDefinitionId\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"principalId\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"principalType\": {\r\n            \"type\": \"string\"\r\n        }\r\n    },\r\n    \"resources\": [\r\n        {\r\n            \"type\": \"Microsoft.Authorization/roleAssignments\",\r\n            \"apiVersion\": \"2020-08-01-preview\",\r\n            \"scope\": \"[parameters('scope')]\",\r\n            \"name\": \"[parameters('name')]\",\r\n            \"properties\": {\r\n                \"roleDefinitionId\": \"[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]\",\r\n                \"principalId\": \"[parameters('principalId')]\",\r\n                \"principalType\": \"[parameters('principalType')]\"\r\n            }\r\n        }\r\n    ],\r\n    \"outputs\": {\r\n        \"roleAssignmentId\": {\r\n            \"type\": \"string\",\r\n            \"value\": \"[extensionResourceId(parameters('scope'), 'Microsoft.Authorization/roleAssignments', parameters('name'))]\"\r\n        }\r\n    }\r\n}"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "mode": "Incremental",
                                "expressionEvaluationOptions": {
                                  "scope": "Outer"
                                },
                                "template": "[json(variables('$fxv#0'))]",
                                "parameters": {
                                  "scope": {
                                    "value": "[parameters('resourceId')]"
                                  },
                                  "name": {
                                    "value": "[guid(parameters('principalId'), parameters('roleDefinitionId'), parameters('resourceId'))]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[parameters('roleDefinitionId')]"
                                  },
                                  "principalId": {
                                    "value": "[parameters('principalId')]"
                                  },
                                  "principalType": {
                                    "value": "[parameters('principalType')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceid": {
                              "type": "string",
                              "value": "[parameters('resourceId')]"
                            },
                            "roleAssignmentId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('name')), '2021-04-01').outputs.roleAssignmentId.value]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', take(format('{0}-app-configuration-Deployment', parameters('appConfigurationName')), 64))]",
                        "[resourceId('Microsoft.Resources/deployments', 'appSvcUserAssignedManagedIdenity-Deployment')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "webAppSystemIdentityOnKeyvaultSecretsUser-Deployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "ra-webAppSystemIdentityOnKeyvaultSecretsUser"
                          },
                          "principalId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appSvcUserAssignedManagedIdenity-Deployment'), '2022-09-01').outputs.principalId.value]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
                          },
                          "roleDefinitionId": {
                            "value": "4633458b-17de-408a-b874-0445c86b69e6"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "757317532981319179"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 64,
                              "metadata": {
                                "description": "The name of the RoleAssignment. Can be found by running: az role assignment list --output json"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The type of resource you wish to assign the role to. Can be found by running: az resource list --output json"
                              }
                            },
                            "roleDefinitionId": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the RoleDefinition you wish to assign. Can be found by running: az role definition list --output json"
                              }
                            },
                            "principalId": {
                              "type": "string"
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "ServicePrincipal",
                              "metadata": {
                                "description": "Optional, default ServicePrincipal"
                              },
                              "allowedValues": [
                                "ServicePrincipal",
                                "Device",
                                "ForeignGroup",
                                "Group",
                                "User"
                              ]
                            },
                            "roledescription": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "variables": {
                            "$fxv#0": "{\r\n    \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n    \"contentVersion\": \"1.0.0.0\",\r\n    \"parameters\": {\r\n        \"scope\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"name\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"roleDefinitionId\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"principalId\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"principalType\": {\r\n            \"type\": \"string\"\r\n        }\r\n    },\r\n    \"resources\": [\r\n        {\r\n            \"type\": \"Microsoft.Authorization/roleAssignments\",\r\n            \"apiVersion\": \"2020-08-01-preview\",\r\n            \"scope\": \"[parameters('scope')]\",\r\n            \"name\": \"[parameters('name')]\",\r\n            \"properties\": {\r\n                \"roleDefinitionId\": \"[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]\",\r\n                \"principalId\": \"[parameters('principalId')]\",\r\n                \"principalType\": \"[parameters('principalType')]\"\r\n            }\r\n        }\r\n    ],\r\n    \"outputs\": {\r\n        \"roleAssignmentId\": {\r\n            \"type\": \"string\",\r\n            \"value\": \"[extensionResourceId(parameters('scope'), 'Microsoft.Authorization/roleAssignments', parameters('name'))]\"\r\n        }\r\n    }\r\n}"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "mode": "Incremental",
                                "expressionEvaluationOptions": {
                                  "scope": "Outer"
                                },
                                "template": "[json(variables('$fxv#0'))]",
                                "parameters": {
                                  "scope": {
                                    "value": "[parameters('resourceId')]"
                                  },
                                  "name": {
                                    "value": "[guid(parameters('principalId'), parameters('roleDefinitionId'), parameters('resourceId'))]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[parameters('roleDefinitionId')]"
                                  },
                                  "principalId": {
                                    "value": "[parameters('principalId')]"
                                  },
                                  "principalType": {
                                    "value": "[parameters('principalType')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceid": {
                              "type": "string",
                              "value": "[parameters('resourceId')]"
                            },
                            "roleAssignmentId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('name')), '2021-04-01').outputs.roleAssignmentId.value]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'appSvcUserAssignedManagedIdenity-Deployment')]"
                      ]
                    },
                    {
                      "condition": "[parameters('deployAppConfig')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "webAppStagingSlotSystemIdentityOnAppConfigDataReader-Deployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "ra-webAppStagingSlotSystemIdentityOnAppConfigDataReader"
                          },
                          "principalId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appSvcUserAssignedManagedIdenity-Deployment'), '2022-09-01').outputs.principalId.value]"
                          },
                          "resourceId": "[if(parameters('deployAppConfig'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-app-configuration-Deployment', parameters('appConfigurationName')), 64)), '2022-09-01').outputs.resourceId.value), createObject('value', ''))]",
                          "roleDefinitionId": {
                            "value": "516239f1-63e1-4d78-a4de-a74fb236a071"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "757317532981319179"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 64,
                              "metadata": {
                                "description": "The name of the RoleAssignment. Can be found by running: az role assignment list --output json"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The type of resource you wish to assign the role to. Can be found by running: az resource list --output json"
                              }
                            },
                            "roleDefinitionId": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the RoleDefinition you wish to assign. Can be found by running: az role definition list --output json"
                              }
                            },
                            "principalId": {
                              "type": "string"
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "ServicePrincipal",
                              "metadata": {
                                "description": "Optional, default ServicePrincipal"
                              },
                              "allowedValues": [
                                "ServicePrincipal",
                                "Device",
                                "ForeignGroup",
                                "Group",
                                "User"
                              ]
                            },
                            "roledescription": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "variables": {
                            "$fxv#0": "{\r\n    \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n    \"contentVersion\": \"1.0.0.0\",\r\n    \"parameters\": {\r\n        \"scope\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"name\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"roleDefinitionId\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"principalId\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"principalType\": {\r\n            \"type\": \"string\"\r\n        }\r\n    },\r\n    \"resources\": [\r\n        {\r\n            \"type\": \"Microsoft.Authorization/roleAssignments\",\r\n            \"apiVersion\": \"2020-08-01-preview\",\r\n            \"scope\": \"[parameters('scope')]\",\r\n            \"name\": \"[parameters('name')]\",\r\n            \"properties\": {\r\n                \"roleDefinitionId\": \"[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]\",\r\n                \"principalId\": \"[parameters('principalId')]\",\r\n                \"principalType\": \"[parameters('principalType')]\"\r\n            }\r\n        }\r\n    ],\r\n    \"outputs\": {\r\n        \"roleAssignmentId\": {\r\n            \"type\": \"string\",\r\n            \"value\": \"[extensionResourceId(parameters('scope'), 'Microsoft.Authorization/roleAssignments', parameters('name'))]\"\r\n        }\r\n    }\r\n}"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "mode": "Incremental",
                                "expressionEvaluationOptions": {
                                  "scope": "Outer"
                                },
                                "template": "[json(variables('$fxv#0'))]",
                                "parameters": {
                                  "scope": {
                                    "value": "[parameters('resourceId')]"
                                  },
                                  "name": {
                                    "value": "[guid(parameters('principalId'), parameters('roleDefinitionId'), parameters('resourceId'))]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[parameters('roleDefinitionId')]"
                                  },
                                  "principalId": {
                                    "value": "[parameters('principalId')]"
                                  },
                                  "principalType": {
                                    "value": "[parameters('principalType')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceid": {
                              "type": "string",
                              "value": "[parameters('resourceId')]"
                            },
                            "roleAssignmentId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('name')), '2021-04-01').outputs.roleAssignmentId.value]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', take(format('{0}-app-configuration-Deployment', parameters('appConfigurationName')), 64))]",
                        "[resourceId('Microsoft.Resources/deployments', 'appSvcUserAssignedManagedIdenity-Deployment')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "webAppStagingSlotSystemIdentityOnKeyvaultSecretsUser-Deployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "ra-webAppStagingSlotSystemIdentityOnKeyvaultSecretsUser"
                          },
                          "principalId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appSvcUserAssignedManagedIdenity-Deployment'), '2022-09-01').outputs.principalId.value]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
                          },
                          "roleDefinitionId": {
                            "value": "4633458b-17de-408a-b874-0445c86b69e6"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "757317532981319179"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 64,
                              "metadata": {
                                "description": "The name of the RoleAssignment. Can be found by running: az role assignment list --output json"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The type of resource you wish to assign the role to. Can be found by running: az resource list --output json"
                              }
                            },
                            "roleDefinitionId": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the RoleDefinition you wish to assign. Can be found by running: az role definition list --output json"
                              }
                            },
                            "principalId": {
                              "type": "string"
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "ServicePrincipal",
                              "metadata": {
                                "description": "Optional, default ServicePrincipal"
                              },
                              "allowedValues": [
                                "ServicePrincipal",
                                "Device",
                                "ForeignGroup",
                                "Group",
                                "User"
                              ]
                            },
                            "roledescription": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "variables": {
                            "$fxv#0": "{\r\n    \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n    \"contentVersion\": \"1.0.0.0\",\r\n    \"parameters\": {\r\n        \"scope\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"name\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"roleDefinitionId\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"principalId\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"principalType\": {\r\n            \"type\": \"string\"\r\n        }\r\n    },\r\n    \"resources\": [\r\n        {\r\n            \"type\": \"Microsoft.Authorization/roleAssignments\",\r\n            \"apiVersion\": \"2020-08-01-preview\",\r\n            \"scope\": \"[parameters('scope')]\",\r\n            \"name\": \"[parameters('name')]\",\r\n            \"properties\": {\r\n                \"roleDefinitionId\": \"[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]\",\r\n                \"principalId\": \"[parameters('principalId')]\",\r\n                \"principalType\": \"[parameters('principalType')]\"\r\n            }\r\n        }\r\n    ],\r\n    \"outputs\": {\r\n        \"roleAssignmentId\": {\r\n            \"type\": \"string\",\r\n            \"value\": \"[extensionResourceId(parameters('scope'), 'Microsoft.Authorization/roleAssignments', parameters('name'))]\"\r\n        }\r\n    }\r\n}"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "mode": "Incremental",
                                "expressionEvaluationOptions": {
                                  "scope": "Outer"
                                },
                                "template": "[json(variables('$fxv#0'))]",
                                "parameters": {
                                  "scope": {
                                    "value": "[parameters('resourceId')]"
                                  },
                                  "name": {
                                    "value": "[guid(parameters('principalId'), parameters('roleDefinitionId'), parameters('resourceId'))]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[parameters('roleDefinitionId')]"
                                  },
                                  "principalId": {
                                    "value": "[parameters('principalId')]"
                                  },
                                  "principalType": {
                                    "value": "[parameters('principalType')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceid": {
                              "type": "string",
                              "value": "[parameters('resourceId')]"
                            },
                            "roleAssignmentId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('name')), '2021-04-01').outputs.roleAssignmentId.value]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'appSvcUserAssignedManagedIdenity-Deployment')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "appConfigStoreName": {
                      "type": "string",
                      "value": "[if(parameters('deployAppConfig'), reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-app-configuration-Deployment', parameters('appConfigurationName')), 64)), '2022-09-01').outputs.name.value, '')]"
                    },
                    "appConfigStoreId": {
                      "type": "string",
                      "value": "[if(parameters('deployAppConfig'), reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-app-configuration-Deployment', parameters('appConfigurationName')), 64)), '2022-09-01').outputs.resourceId.value, '')]"
                    },
                    "webAppName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-webApp-Deployment', parameters('webAppName')), 64)), '2022-09-01').outputs.name.value]"
                    },
                    "webAppHostName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-webApp-Deployment', parameters('webAppName')), 64)), '2022-09-01').outputs.defaultHostname.value]"
                    },
                    "webAppResourceId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-webApp-Deployment', parameters('webAppName')), 64)), '2022-09-01').outputs.resourceId.value]"
                    },
                    "webAppLocation": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-webApp-Deployment', parameters('webAppName')), 64)), '2022-09-01').outputs.location.value]"
                    },
                    "webAppSystemAssignedPrincipalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-webApp-Deployment', parameters('webAppName')), 64)), '2022-09-01').outputs.systemAssignedPrincipalId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('{0}-keyvaultModule-Deployment', variables('resourceNames').keyvault), 64))]",
                "[resourceId('Microsoft.Resources/deployments', 'logAnalyticsWs-Deployment')]",
                "[resourceId('Microsoft.Resources/deployments', take(format('{0}-redisModule-Deployment', variables('resourceNames').redisCache), 64))]",
                "[resourceId('Microsoft.Resources/deployments', take(format('{0}-sqlServer-Deployment', variables('resourceNames').sqlServer), 64))]",
                "[resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('AzureFrontDoor-{0}-deployment', variables('resourceNames').frontDoor), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "afdName": {
                    "value": "[variables('resourceNames').frontDoor]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logAnalyticsWs-Deployment'), '2022-09-01').outputs.logAnalyticsWsId.value]"
                  },
                  "endpointName": {
                    "value": "[variables('resourceNames').frontDoorEndPoint]"
                  },
                  "originGroupName": {
                    "value": "[variables('resourceNames').frontDoorEndPoint]"
                  },
                  "origins": {
                    "value": [
                      {
                        "name": "[reference(resourceId('Microsoft.Resources/deployments', 'webAppModule-Deployment'), '2022-09-01').outputs.webAppName.value]",
                        "hostname": "[reference(resourceId('Microsoft.Resources/deployments', 'webAppModule-Deployment'), '2022-09-01').outputs.webAppHostName.value]",
                        "enabledState": true,
                        "privateLinkOrigin": {
                          "privateEndpointResourceId": "[reference(resourceId('Microsoft.Resources/deployments', 'webAppModule-Deployment'), '2022-09-01').outputs.webAppResourceId.value]",
                          "privateLinkResourceType": "sites",
                          "privateEndpointLocation": "[reference(resourceId('Microsoft.Resources/deployments', 'webAppModule-Deployment'), '2022-09-01').outputs.webAppLocation.value]"
                        }
                      }
                    ]
                  },
                  "skuName": {
                    "value": "Premium_AzureFrontDoor"
                  },
                  "wafPolicyName": {
                    "value": "[variables('resourceNames').frontDoorWaf]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "13232520068507076660"
                    }
                  },
                  "parameters": {
                    "afdName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the AFD profile."
                      }
                    },
                    "endpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the endpoint under the profile which is unique globally."
                      }
                    },
                    "endpointEnabled": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "metadata": {
                        "description": "AFD Endpoint State"
                      },
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ]
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Endpoint tags."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The pricing tier (defines a CDN provider, feature list and rate) of the CDN profile."
                      },
                      "allowedValues": [
                        "Standard_AzureFrontDoor",
                        "Premium_AzureFrontDoor"
                      ]
                    },
                    "originGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Origin Group"
                      }
                    },
                    "origins": {
                      "type": "array",
                      "metadata": {
                        "description": "Origin List"
                      }
                    },
                    "enableCaching": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional, default value false. Set true if you need to cache content at the AFD level"
                      }
                    },
                    "wafPolicyName": {
                      "type": "string",
                      "maxLength": 128,
                      "metadata": {
                        "description": "Name of the WAF policy to create."
                      }
                    },
                    "wafRuleSetAction": {
                      "type": "string",
                      "defaultValue": "Log",
                      "allowedValues": [
                        "Block",
                        "Log",
                        "Redirect"
                      ]
                    },
                    "wafPolicyState": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "optional, default value Enabled. "
                      }
                    },
                    "wafPolicyMode": {
                      "type": "string",
                      "defaultValue": "Prevention",
                      "allowedValues": [
                        "Detection",
                        "Prevention"
                      ],
                      "metadata": {
                        "description": "optional, default value Prevention. "
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "if no diagnostic serttings are required, provide an empty string. Resource ID of log analytics workspace."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "allLogs",
                        "FrontDoorAccessLog",
                        "FrontDoorWebApplicationFirewallLog",
                        "FrontDoorHealthProbeLog"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('afdName'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ],
                    "endPointIdsForWaf": [
                      {
                        "id": "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', parameters('afdName'), parameters('endpointName'))]"
                      }
                    ],
                    "contentTypeCompressionList": [
                      "application/eot",
                      "application/font",
                      "application/font-sfnt",
                      "application/javascript",
                      "application/json",
                      "application/opentype",
                      "application/otf",
                      "application/pkcs7-mime",
                      "application/truetype",
                      "application/ttf",
                      "application/vnd.ms-fontobject",
                      "application/xhtml+xml",
                      "application/xml",
                      "application/xml+rss",
                      "application/x-font-opentype",
                      "application/x-font-truetype",
                      "application/x-font-ttf",
                      "application/x-httpd-cgi",
                      "application/x-javascript",
                      "application/x-mpegurl",
                      "application/x-opentype",
                      "application/x-otf",
                      "application/x-perl",
                      "application/x-ttf",
                      "font/eot",
                      "font/ttf",
                      "font/otf",
                      "font/opentype",
                      "image/svg+xml",
                      "text/css",
                      "text/csv",
                      "text/html",
                      "text/javascript",
                      "text/js",
                      "text/plain",
                      "text/richtext",
                      "text/tab-separated-values",
                      "text/xml",
                      "text/x-script",
                      "text/x-component",
                      "text/x-java-source"
                    ],
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true(), 'retentionPolicy', createObject('enabled', true(), 'days', parameters('diagnosticLogsRetentionInDays')))), variables('diagnosticsLogsSpecified'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Cdn/profiles",
                      "apiVersion": "2022-11-01-preview",
                      "name": "[parameters('afdName')]",
                      "location": "Global",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('skuName')]"
                      },
                      "properties": {
                        "originResponseTimeoutSeconds": 120
                      }
                    },
                    {
                      "type": "Microsoft.Cdn/profiles/afdEndpoints",
                      "apiVersion": "2022-11-01-preview",
                      "name": "[format('{0}/{1}', parameters('afdName'), parameters('endpointName'))]",
                      "location": "Global",
                      "properties": {
                        "enabledState": "[parameters('endpointEnabled')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Cdn/profiles', parameters('afdName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Cdn/profiles/originGroups",
                      "apiVersion": "2022-11-01-preview",
                      "name": "[format('{0}/{1}', parameters('afdName'), parameters('originGroupName'))]",
                      "properties": {
                        "loadBalancingSettings": {
                          "sampleSize": 4,
                          "successfulSamplesRequired": 3,
                          "additionalLatencyInMilliseconds": 50
                        },
                        "healthProbeSettings": {
                          "probePath": "/",
                          "probeRequestType": "GET",
                          "probeProtocol": "Https",
                          "probeIntervalInSeconds": 100
                        },
                        "sessionAffinityState": "Disabled",
                        "trafficRestorationTimeToHealedOrNewEndpointsInMinutes": 10
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Cdn/profiles', parameters('afdName'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "afdOrigins",
                        "count": "[length(parameters('origins'))]"
                      },
                      "type": "Microsoft.Cdn/profiles/originGroups/origins",
                      "apiVersion": "2022-11-01-preview",
                      "name": "[format('{0}/{1}/{2}', parameters('afdName'), parameters('originGroupName'), replace(parameters('origins')[copyIndex()].hostname, '.', '-'))]",
                      "properties": {
                        "hostName": "[parameters('origins')[copyIndex()].hostname]",
                        "httpPort": 80,
                        "httpsPort": 443,
                        "originHostHeader": "[parameters('origins')[copyIndex()].hostname]",
                        "priority": 1,
                        "weight": 1000,
                        "enabledState": "[if(parameters('origins')[copyIndex()].enabledState, 'Enabled', 'Disabled')]",
                        "enforceCertificateNameCheck": true,
                        "sharedPrivateLinkResource": "[if(empty(parameters('origins')[copyIndex()].privateLinkOrigin), null(), createObject('privateLink', createObject('id', parameters('origins')[copyIndex()].privateLinkOrigin.privateEndpointResourceId), 'groupId', if(not(equals(parameters('origins')[copyIndex()].privateLinkOrigin.privateLinkResourceType, '')), parameters('origins')[copyIndex()].privateLinkOrigin.privateLinkResourceType, null()), 'privateLinkLocation', parameters('origins')[copyIndex()].privateLinkOrigin.privateEndpointLocation, 'requestMessage', 'Please approve this connection.'))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Cdn/profiles/originGroups', parameters('afdName'), parameters('originGroupName'))]"
                      ],
                      "metadata": {
                        "description": "For a description of the sharedPrivateLinkResource type look the above comment"
                      }
                    },
                    {
                      "type": "Microsoft.Cdn/profiles/afdEndpoints/routes",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}/{2}', parameters('afdName'), parameters('endpointName'), format('{0}-route', parameters('originGroupName')))]",
                      "properties": {
                        "cacheConfiguration": "[if(not(parameters('enableCaching')), null(), createObject('compressionSettings', createObject('isCompressionEnabled', true(), 'contentTypesToCompress', variables('contentTypeCompressionList')), 'queryStringCachingBehavior', 'UseQueryString'))]",
                        "customDomains": [],
                        "originGroup": {
                          "id": "[resourceId('Microsoft.Cdn/profiles/originGroups', parameters('afdName'), parameters('originGroupName'))]"
                        },
                        "supportedProtocols": [
                          "Https",
                          "Http"
                        ],
                        "patternsToMatch": [
                          "/*"
                        ],
                        "forwardingProtocol": "HttpsOnly",
                        "linkToDefaultDomain": "Enabled",
                        "httpsRedirect": "Enabled",
                        "enabledState": "Enabled"
                      },
                      "dependsOn": [
                        "afdOrigins",
                        "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', parameters('afdName'), parameters('endpointName'))]",
                        "[resourceId('Microsoft.Cdn/profiles/originGroups', parameters('afdName'), parameters('originGroupName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Cdn/profiles/securityPolicies",
                      "apiVersion": "2022-11-01-preview",
                      "name": "[format('{0}/{1}', parameters('afdName'), 'afdWafSecurityPolicy')]",
                      "properties": {
                        "parameters": {
                          "wafPolicy": {
                            "id": "[resourceId('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies', parameters('wafPolicyName'))]"
                          },
                          "associations": [
                            {
                              "domains": "[variables('endPointIdsForWaf')]",
                              "patternsToMatch": [
                                "/*"
                              ]
                            }
                          ],
                          "type": "WebApplicationFirewall"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', parameters('afdName'), parameters('endpointName'))]",
                        "[resourceId('Microsoft.Cdn/profiles', parameters('afdName'))]",
                        "[resourceId('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies', parameters('wafPolicyName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('diagnosticWorkspaceId')))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Cdn/profiles/{0}', parameters('afdName'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Cdn/profiles', parameters('afdName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/FrontDoorWebApplicationFirewallPolicies",
                      "apiVersion": "2022-05-01",
                      "name": "[parameters('wafPolicyName')]",
                      "location": "Global",
                      "sku": {
                        "name": "[parameters('skuName')]"
                      },
                      "properties": {
                        "policySettings": {
                          "enabledState": "[parameters('wafPolicyState')]",
                          "mode": "[parameters('wafPolicyMode')]",
                          "requestBodyCheck": "Enabled"
                        },
                        "customRules": {
                          "rules": [
                            {
                              "name": "BlockMethod",
                              "enabledState": "Enabled",
                              "priority": 10,
                              "ruleType": "MatchRule",
                              "rateLimitDurationInMinutes": 1,
                              "rateLimitThreshold": 100,
                              "matchConditions": [
                                {
                                  "matchVariable": "RequestMethod",
                                  "operator": "Equal",
                                  "negateCondition": true,
                                  "matchValue": [
                                    "GET",
                                    "OPTIONS",
                                    "HEAD"
                                  ]
                                }
                              ],
                              "action": "Block"
                            }
                          ]
                        },
                        "managedRules": {
                          "managedRuleSets": [
                            {
                              "ruleSetType": "Microsoft_DefaultRuleSet",
                              "ruleSetVersion": "2.1",
                              "ruleSetAction": "[parameters('wafRuleSetAction')]",
                              "ruleGroupOverrides": []
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "afdProfileName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the CDN profile."
                      },
                      "value": "[parameters('afdName')]"
                    },
                    "afdProfileId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the CDN profile."
                      },
                      "value": "[resourceId('Microsoft.Cdn/profiles', parameters('afdName'))]"
                    },
                    "endpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the endpoint."
                      },
                      "value": "[parameters('endpointName')]"
                    },
                    "afdEndpointHostName": {
                      "type": "string",
                      "metadata": {
                        "description": "HostName of the endpoint."
                      },
                      "value": "[reference(resourceId('Microsoft.Cdn/profiles/afdEndpoints', parameters('afdName'), parameters('endpointName')), '2022-11-01-preview').hostName]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the CDN profile is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "profileType": {
                      "type": "string",
                      "metadata": {
                        "description": "The type of the CDN profile."
                      },
                      "value": "Microsoft.Cdn/profiles"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'logAnalyticsWs-Deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'webAppModule-Deployment')]"
              ]
            },
            {
              "condition": "[parameters('autoApproveAfdPrivateEndpoint')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('autoApproveAfdPe-{0}-deployment', variables('resourceNames').frontDoor), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "idAfdPeAutoApproverName": {
                    "value": "[variables('resourceNames').idAfdApprovePeAutoApprover]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "6324920352926996485"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. The location to deploy the Redis cache service."
                      }
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]",
                      "metadata": {
                        "description": "Default value is OK. Sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp"
                      }
                    },
                    "idAfdPeAutoApproverName": {
                      "type": "string",
                      "defaultValue": "[guid(resourceGroup().id, 'userAssignedIdentity')]",
                      "metadata": {
                        "description": "Optional. The name of the user-assigned identity to be used to auto-approve the private endpoint connection of the AFD. Changing this forces a new resource to be created."
                      }
                    }
                  },
                  "variables": {
                    "roleAssignmentName": "[guid(resourceGroup().id, 'contributor')]",
                    "contributorRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                    "deploymentScriptName": "runAfdApproval"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2018-11-30",
                      "name": "[parameters('idAfdPeAutoApproverName')]",
                      "location": "[parameters('location')]",
                      "metadata": {
                        "description": "The User Assigned MAnaged Identity that will be given Contributor role on the Resource Group in order to auto-approve the Private Endpoint Connection of the AFD."
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "name": "[variables('roleAssignmentName')]",
                      "properties": {
                        "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('idAfdPeAutoApproverName')), '2018-11-30').principalId]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('idAfdPeAutoApproverName'))]"
                      ],
                      "metadata": {
                        "description": "The role assignment that will be created to give the User Assigned Managed Identity Contributor role on the Resource Group in order to auto-approve the Private Endpoint Connection of the AFD."
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[variables('deploymentScriptName')]",
                      "location": "[parameters('location')]",
                      "kind": "AzureCLI",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('idAfdPeAutoApproverName')))]": {}
                        }
                      },
                      "properties": {
                        "forceUpdateTag": "[parameters('utcValue')]",
                        "azCliVersion": "2.47.0",
                        "timeout": "PT30M",
                        "environmentVariables": [
                          {
                            "name": "ResourceGroupName",
                            "value": "[resourceGroup().name]"
                          }
                        ],
                        "scriptContent": "rg_name=\"$ResourceGroupName\"; webapp_ids=$(az webapp list -g $rg_name --query \"[].id\" -o tsv); for webapp_id in $webapp_ids; do fd_conn_ids=$(az network private-endpoint-connection list --id $webapp_id --query \"[?properties.provisioningState == 'Pending'].id\" -o tsv); for fd_conn_id in $fd_conn_ids; do az network private-endpoint-connection approve --id \"$fd_conn_id\" --description \"ApprovedByCli\"; done; done",
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "P1D"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Authorization/roleAssignments', variables('roleAssignmentName'))]",
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('idAfdPeAutoApproverName'))]"
                      ],
                      "metadata": {
                        "description": "The deployment script that will be used to auto-approve the Private Endpoint Connection of the AFD."
                      }
                    }
                  ],
                  "outputs": {
                    "logs": {
                      "type": "string",
                      "metadata": {
                        "description": "The output of the deployment script that will be used to auto-approve the Private Endpoint Connection of the AFD."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts/logs', variables('deploymentScriptName'), 'default'), '2020-10-01').log]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('AzureFrontDoor-{0}-deployment', variables('resourceNames').frontDoor), 64))]"
              ]
            },
            {
              "condition": "[parameters('deployJumpHost')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "vmWindowsModule-Deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "adminPassword": {
                    "value": "[parameters('adminPassword')]"
                  },
                  "adminUsername": {
                    "value": "[parameters('adminUsername')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "vmJumpHostUserAssignedManagedIdentityName": {
                    "value": "[variables('resourceNames').vmJumpHostUserAssignedManagedIdentity]"
                  },
                  "vmWindowsJumpboxName": {
                    "value": "[variables('resourceNames').vmWindowsJumpbox]"
                  },
                  "keyvaultName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-keyvaultModule-Deployment', variables('resourceNames').keyvault), 64)), '2022-09-01').outputs.keyvaultName.value]"
                  },
                  "appConfigStoreId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'webAppModule-Deployment'), '2022-09-01').outputs.appConfigStoreId.value]"
                  },
                  "subnetDevOpsId": {
                    "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetName.value, variables('resourceNames').snetDevOps), '/')[0], split(format('{0}/{1}', reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetName.value, variables('resourceNames').snetDevOps), '/')[1])]"
                  },
                  "githubRepository": {
                    "value": "[parameters('githubRepository')]"
                  },
                  "githubToken": {
                    "value": "[parameters('githubToken')]"
                  },
                  "adoOrganization": {
                    "value": "[parameters('adoOrganization')]"
                  },
                  "adoToken": {
                    "value": "[parameters('adoToken')]"
                  },
                  "installClis": {
                    "value": "[parameters('installClis')]"
                  },
                  "installSsms": {
                    "value": "[parameters('installSsms')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "2982997895193326464"
                    }
                  },
                  "parameters": {
                    "vmWindowsJumpboxName": {
                      "type": "string",
                      "maxLength": 64,
                      "minLength": 2,
                      "metadata": {
                        "description": "Required. Name of windows VM."
                      }
                    },
                    "vmJumpHostUserAssignedManagedIdentityName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the vmJumpHostUserAssignedManagedIdenity."
                      },
                      "maxLength": 128,
                      "minLength": 3
                    },
                    "adminUsername": {
                      "type": "string",
                      "metadata": {
                        "description": "optional, default value is azureuser"
                      }
                    },
                    "adminPassword": {
                      "type": "securestring",
                      "metadata": {
                        "description": "mandatory, the password of the admin user"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Resource tags that we might need to add to all resources (i.e. Environment, Cost center, application name etc)"
                      }
                    },
                    "subnetDevOpsId": {
                      "type": "string",
                      "metadata": {
                        "description": "the subnet ID where the  VM will be attached to"
                      }
                    },
                    "keyvaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of an existing keyvault, that it will be used to store secrets (connection string)"
                      }
                    },
                    "appConfigStoreId": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of app config store, if any"
                      }
                    },
                    "githubRepository": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The URL of the Github repository to use for the Github Actions Runner. This parameter is optional. If not provided, the Github Actions Runner will not be installed. If this parameter is provided, then github_token must also be provided."
                      }
                    },
                    "githubToken": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The token to use for the Github Actions Runner. This parameter is optional. If not provided, the Github Actions Runner will not be installed. If this parameter is provided, then github_repository must also be provided."
                      }
                    },
                    "adoOrganization": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The URL of the Azure DevOps organization to use for the Azure DevOps Agent. This parameter is optional. If not provided, the Github Azure DevOps will not be installed. If this parameter is provided, then ado_token must also be provided."
                      }
                    },
                    "adoToken": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The PAT token to use for the Azure DevOps Agent. This parameter is optional. If not provided, the Github Azure DevOps will not be installed. If this parameter is provided, then ado_organization must also be provided."
                      }
                    },
                    "installClis": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "A switch to indicate whether or not to install the Azure CLI, AZD CLI and git. This parameter is optional. If not provided, the Azure CLI, AZD CLI and git will not be installed"
                      }
                    },
                    "installSsms": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "A switch to indicate whether or not to install Sql Server Management Studio (SSMS). This parameter is optional. If not provided, SSMS will not be installed."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "vmWindows-Deployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('vmWindowsJumpboxName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "adminPassword": {
                            "value": "[parameters('adminPassword')]"
                          },
                          "adminUsername": {
                            "value": "[parameters('adminUsername')]"
                          },
                          "subnetId": {
                            "value": "[parameters('subnetDevOpsId')]"
                          },
                          "enableAzureAdJoin": {
                            "value": true
                          },
                          "userAssignedIdentities": {
                            "value": {
                              "[format('{0}', reference(resourceId('Microsoft.Resources/deployments', 'vmJumpHostUserAssignedManagedIdenity-Deployment'), '2022-09-01').outputs.id.value)]": {}
                            }
                          },
                          "githubRepository": {
                            "value": "[parameters('githubRepository')]"
                          },
                          "githubToken": {
                            "value": "[parameters('githubToken')]"
                          },
                          "adoOrganization": {
                            "value": "[parameters('adoOrganization')]"
                          },
                          "adoToken": {
                            "value": "[parameters('adoToken')]"
                          },
                          "installClis": {
                            "value": "[parameters('installClis')]"
                          },
                          "installSsms": {
                            "value": "[parameters('installSsms')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "16379613978965958962"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 64,
                              "minLength": 2,
                              "metadata": {
                                "description": "Name of the resource Virtual Network (The name must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens)"
                              }
                            },
                            "computerWindowsName": {
                              "type": "string",
                              "defaultValue": "",
                              "maxLength": 15,
                              "metadata": {
                                "description": "Name of the windows PC. Optional, by default gets automatically constructed by the resource name. Use it to give more meaningful names, or avoid conflicts"
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Azure Region where the resource will be deployed in"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "metadata": {
                                "description": "key-value pairs as tags, to identify the resource"
                              }
                            },
                            "subnetId": {
                              "type": "string",
                              "metadata": {
                                "description": "The subnet where the VM will be attached to"
                              }
                            },
                            "adminUsername": {
                              "type": "string",
                              "defaultValue": "azureuser",
                              "metadata": {
                                "description": "optional, default value is azureuser"
                              }
                            },
                            "adminPassword": {
                              "type": "securestring",
                              "metadata": {
                                "description": "mandatory, the password of the admin user"
                              }
                            },
                            "enableAzureAdJoin": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "vmSize": {
                              "type": "string",
                              "defaultValue": "Standard_B2ms",
                              "metadata": {
                                "description": "optional, default value is Standard_B2ms"
                              }
                            },
                            "systemAssignedIdentity": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enables system assigned managed identity on the resource."
                              }
                            },
                            "userAssignedIdentities": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The ID(s) to assign to the resource."
                              }
                            },
                            "githubRepository": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "The URL of the Github repository to use for the Github Actions Runner. This parameter is optional. If not provided, the Github Actions Runner will not be installed. If this parameter is provided, then github_token must also be provided."
                              }
                            },
                            "githubToken": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "The token to use for the Github Actions Runner. This parameter is optional. If not provided, the Github Actions Runner will not be installed. If this parameter is provided, then github_repository must also be provided."
                              }
                            },
                            "adoOrganization": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "The URL of the Azure DevOps organization to use for the Azure DevOps Agent. This parameter is optional. If not provided, the Github Azure DevOps will not be installed. If this parameter is provided, then ado_token must also be provided."
                              }
                            },
                            "adoToken": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "The PAT token to use for the Azure DevOps Agent. This parameter is optional. If not provided, the Github Azure DevOps will not be installed. If this parameter is provided, then ado_organization must also be provided."
                              }
                            },
                            "installClis": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "A switch to indicate whether or not to install the Azure CLI, AZD CLI and git. This parameter is optional. If not provided, the Azure CLI, AZD CLI and git will not be installed"
                              }
                            },
                            "installSsms": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "A switch to indicate whether or not to install Sql Server Management Studio (SSMS). This parameter is optional. If not provided, SSMS will not be installed."
                              }
                            }
                          },
                          "variables": {
                            "aadLoginExtensionName": "AADLoginForWindows",
                            "vmNameMaxLength": 64,
                            "vmName": "[if(greater(length(parameters('name')), variables('vmNameMaxLength')), substring(parameters('name'), 0, variables('vmNameMaxLength')), parameters('name'))]",
                            "computerNameLength": 15,
                            "computerNameValid": "[replace(replace(parameters('name'), '-', ''), '_', '')]",
                            "computerName": "[if(greater(length(variables('computerNameValid')), variables('computerNameLength')), substring(variables('computerNameValid'), 0, variables('computerNameLength')), variables('computerNameValid'))]",
                            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]",
                            "installClisValue": "[if(parameters('installClis'), '-install_clis', '')]",
                            "installSsmsValue": "[if(parameters('installSsms'), '-install_ssms', '')]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines",
                              "apiVersion": "2022-08-01",
                              "name": "[variables('vmName')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "identity": "[variables('identity')]",
                              "properties": {
                                "hardwareProfile": {
                                  "vmSize": "[parameters('vmSize')]"
                                },
                                "storageProfile": {
                                  "imageReference": {
                                    "publisher": "MicrosoftWindowsDesktop",
                                    "offer": "Windows-11",
                                    "sku": "win11-22h2-pro",
                                    "version": "latest"
                                  },
                                  "osDisk": {
                                    "osType": "Windows",
                                    "createOption": "FromImage",
                                    "managedDisk": {
                                      "storageAccountType": "Standard_LRS"
                                    }
                                  }
                                },
                                "osProfile": {
                                  "computerName": "[if(empty(parameters('computerWindowsName')), variables('computerName'), parameters('computerWindowsName'))]",
                                  "adminUsername": "[parameters('adminUsername')]",
                                  "adminPassword": "[parameters('adminPassword')]",
                                  "windowsConfiguration": {
                                    "provisionVMAgent": true,
                                    "enableAutomaticUpdates": true,
                                    "patchSettings": {
                                      "patchMode": "AutomaticByOS",
                                      "assessmentMode": "ImageDefault",
                                      "enableHotpatching": false
                                    },
                                    "enableVMAgentPlatformUpdates": true
                                  }
                                },
                                "networkProfile": {
                                  "networkInterfaces": [
                                    {
                                      "id": "[reference(resourceId('Microsoft.Resources/deployments', 'jumphostNicDeployment'), '2022-09-01').outputs.nicId.value]",
                                      "properties": {
                                        "deleteOption": "Delete"
                                      }
                                    }
                                  ]
                                },
                                "diagnosticsProfile": {
                                  "bootDiagnostics": {
                                    "enabled": true
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', 'jumphostNicDeployment')]"
                              ]
                            },
                            {
                              "condition": "[parameters('enableAzureAdJoin')]",
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2022-11-01",
                              "name": "[format('{0}/{1}', variables('vmName'), variables('aadLoginExtensionName'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "Microsoft.Azure.ActiveDirectory",
                                "type": "[variables('aadLoginExtensionName')]",
                                "typeHandlerVersion": "1.0",
                                "autoUpgradeMinorVersion": true
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2023-03-01",
                              "name": "[format('{0}/{1}', variables('vmName'), 'customScriptExtension')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "CustomScriptExtension",
                                "typeHandlerVersion": "1.10",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "fileUris": [
                                    "https://raw.githubusercontent.com/thotheod/appservice-landing-zone-accelerator/fix/02-AutoApprovalAfdPe/scenarios/shared/scripts/win-devops-vm-extensions/post-deployment.ps1"
                                  ]
                                },
                                "protectedSettings": {
                                  "commandToExecute": "[format('powershell.exe -ExecutionPolicy Unrestricted -File post-deployment.ps1 -github_repository \"{0}\" -github_token \"{1}\" -ado_organization \"{2}\" -ado_token \"{3}\" {4} {5}', parameters('githubRepository'), parameters('githubToken'), parameters('adoOrganization'), parameters('adoToken'), variables('installClisValue'), variables('installSsmsValue'))]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "jumphostNicDeployment",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[format('nic-{0}', variables('vmName'))]"
                                  },
                                  "subnetId": {
                                    "value": "[parameters('subnetId')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.17.1.54307",
                                      "templateHash": "10954988008367803769"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the network interface."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "enableIPForwarding": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether IP forwarding is enabled on this network interface."
                                      }
                                    },
                                    "enableAcceleratedNetworking": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. If the network interface is accelerated networking enabled."
                                      }
                                    },
                                    "dnsServers": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection."
                                      }
                                    },
                                    "networkSecurityGroupResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The network security group (NSG) to attach to the network interface."
                                      }
                                    },
                                    "subnetId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Mandatory. subnet resource Id where the nic will be attached to."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-08-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "enableIPForwarding": "[parameters('enableIPForwarding')]",
                                        "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                                        "dnsSettings": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]",
                                        "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig01",
                                            "properties": {
                                              "primary": true,
                                              "privateIPAllocationMethod": "Dynamic",
                                              "subnet": {
                                                "id": "[parameters('subnetId')]"
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "nicName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed resource."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "nicId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed resource."
                                      },
                                      "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'vmJumpHostUserAssignedManagedIdenity-Deployment')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "vmJumpHostUserAssignedManagedIdenity-Deployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('vmJumpHostUserAssignedManagedIdentityName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "18120221178179977349"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 128,
                              "minLength": 3,
                              "metadata": {
                                "description": "Required. The name of the user assigned managed Identity. 3-128, can contain \"-\" and \"_\""
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2018-11-30",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]"
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the managedIDentity."
                              },
                              "value": "[parameters('name')]"
                            },
                            "id": {
                              "type": "string",
                              "metadata": {
                                "description": "The id of the managedIDentity."
                              },
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "The type of the managedIDentity."
                              },
                              "value": "Microsoft.ManagedIdentity/userAssignedIdentities"
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The ServicePrincipalId of the managedIDentity."
                              },
                              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
                            },
                            "tenantId": {
                              "type": "string",
                              "metadata": {
                                "description": "The TenantId of the managedIDentity."
                              },
                              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').tenantId]"
                            },
                            "clientId": {
                              "type": "string",
                              "metadata": {
                                "description": "The clientId of the managedIDentity."
                              },
                              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').clientId]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "vmJumpHostIdentityOnKeyvaultSecretsOfficer-Deployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "ra-vmJumpHostIdentityOnKeyvaultSecretsOfficer"
                          },
                          "principalId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vmJumpHostUserAssignedManagedIdenity-Deployment'), '2022-09-01').outputs.principalId.value]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
                          },
                          "roleDefinitionId": {
                            "value": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "757317532981319179"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 64,
                              "metadata": {
                                "description": "The name of the RoleAssignment. Can be found by running: az role assignment list --output json"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The type of resource you wish to assign the role to. Can be found by running: az resource list --output json"
                              }
                            },
                            "roleDefinitionId": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the RoleDefinition you wish to assign. Can be found by running: az role definition list --output json"
                              }
                            },
                            "principalId": {
                              "type": "string"
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "ServicePrincipal",
                              "metadata": {
                                "description": "Optional, default ServicePrincipal"
                              },
                              "allowedValues": [
                                "ServicePrincipal",
                                "Device",
                                "ForeignGroup",
                                "Group",
                                "User"
                              ]
                            },
                            "roledescription": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "variables": {
                            "$fxv#0": "{\r\n    \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n    \"contentVersion\": \"1.0.0.0\",\r\n    \"parameters\": {\r\n        \"scope\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"name\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"roleDefinitionId\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"principalId\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"principalType\": {\r\n            \"type\": \"string\"\r\n        }\r\n    },\r\n    \"resources\": [\r\n        {\r\n            \"type\": \"Microsoft.Authorization/roleAssignments\",\r\n            \"apiVersion\": \"2020-08-01-preview\",\r\n            \"scope\": \"[parameters('scope')]\",\r\n            \"name\": \"[parameters('name')]\",\r\n            \"properties\": {\r\n                \"roleDefinitionId\": \"[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]\",\r\n                \"principalId\": \"[parameters('principalId')]\",\r\n                \"principalType\": \"[parameters('principalType')]\"\r\n            }\r\n        }\r\n    ],\r\n    \"outputs\": {\r\n        \"roleAssignmentId\": {\r\n            \"type\": \"string\",\r\n            \"value\": \"[extensionResourceId(parameters('scope'), 'Microsoft.Authorization/roleAssignments', parameters('name'))]\"\r\n        }\r\n    }\r\n}"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "mode": "Incremental",
                                "expressionEvaluationOptions": {
                                  "scope": "Outer"
                                },
                                "template": "[json(variables('$fxv#0'))]",
                                "parameters": {
                                  "scope": {
                                    "value": "[parameters('resourceId')]"
                                  },
                                  "name": {
                                    "value": "[guid(parameters('principalId'), parameters('roleDefinitionId'), parameters('resourceId'))]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[parameters('roleDefinitionId')]"
                                  },
                                  "principalId": {
                                    "value": "[parameters('principalId')]"
                                  },
                                  "principalType": {
                                    "value": "[parameters('principalType')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceid": {
                              "type": "string",
                              "value": "[parameters('resourceId')]"
                            },
                            "roleAssignmentId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('name')), '2021-04-01').outputs.roleAssignmentId.value]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'vmJumpHostUserAssignedManagedIdenity-Deployment')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "vmJumpHostIdentityOnKeyvaultCertificateOfficer-Deployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "ra-vmJumpHostIdentityOnKeyvaultCertificateOfficer"
                          },
                          "principalId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vmJumpHostUserAssignedManagedIdenity-Deployment'), '2022-09-01').outputs.principalId.value]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
                          },
                          "roleDefinitionId": {
                            "value": "a4417e6f-fecd-4de8-b567-7b0420556985"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "757317532981319179"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 64,
                              "metadata": {
                                "description": "The name of the RoleAssignment. Can be found by running: az role assignment list --output json"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The type of resource you wish to assign the role to. Can be found by running: az resource list --output json"
                              }
                            },
                            "roleDefinitionId": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the RoleDefinition you wish to assign. Can be found by running: az role definition list --output json"
                              }
                            },
                            "principalId": {
                              "type": "string"
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "ServicePrincipal",
                              "metadata": {
                                "description": "Optional, default ServicePrincipal"
                              },
                              "allowedValues": [
                                "ServicePrincipal",
                                "Device",
                                "ForeignGroup",
                                "Group",
                                "User"
                              ]
                            },
                            "roledescription": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "variables": {
                            "$fxv#0": "{\r\n    \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n    \"contentVersion\": \"1.0.0.0\",\r\n    \"parameters\": {\r\n        \"scope\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"name\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"roleDefinitionId\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"principalId\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"principalType\": {\r\n            \"type\": \"string\"\r\n        }\r\n    },\r\n    \"resources\": [\r\n        {\r\n            \"type\": \"Microsoft.Authorization/roleAssignments\",\r\n            \"apiVersion\": \"2020-08-01-preview\",\r\n            \"scope\": \"[parameters('scope')]\",\r\n            \"name\": \"[parameters('name')]\",\r\n            \"properties\": {\r\n                \"roleDefinitionId\": \"[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]\",\r\n                \"principalId\": \"[parameters('principalId')]\",\r\n                \"principalType\": \"[parameters('principalType')]\"\r\n            }\r\n        }\r\n    ],\r\n    \"outputs\": {\r\n        \"roleAssignmentId\": {\r\n            \"type\": \"string\",\r\n            \"value\": \"[extensionResourceId(parameters('scope'), 'Microsoft.Authorization/roleAssignments', parameters('name'))]\"\r\n        }\r\n    }\r\n}"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "mode": "Incremental",
                                "expressionEvaluationOptions": {
                                  "scope": "Outer"
                                },
                                "template": "[json(variables('$fxv#0'))]",
                                "parameters": {
                                  "scope": {
                                    "value": "[parameters('resourceId')]"
                                  },
                                  "name": {
                                    "value": "[guid(parameters('principalId'), parameters('roleDefinitionId'), parameters('resourceId'))]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[parameters('roleDefinitionId')]"
                                  },
                                  "principalId": {
                                    "value": "[parameters('principalId')]"
                                  },
                                  "principalType": {
                                    "value": "[parameters('principalType')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceid": {
                              "type": "string",
                              "value": "[parameters('resourceId')]"
                            },
                            "roleAssignmentId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('name')), '2021-04-01').outputs.roleAssignmentId.value]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'vmJumpHostUserAssignedManagedIdenity-Deployment')]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('appConfigStoreId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "vmJumpHostIdentityOnAppConfigDataOwner-Deployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "ra-vmJumpHostIdentityOnAppConfigDataOwner"
                          },
                          "principalId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vmJumpHostUserAssignedManagedIdenity-Deployment'), '2022-09-01').outputs.principalId.value]"
                          },
                          "resourceId": {
                            "value": "[parameters('appConfigStoreId')]"
                          },
                          "roleDefinitionId": {
                            "value": "5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "757317532981319179"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 64,
                              "metadata": {
                                "description": "The name of the RoleAssignment. Can be found by running: az role assignment list --output json"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The type of resource you wish to assign the role to. Can be found by running: az resource list --output json"
                              }
                            },
                            "roleDefinitionId": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the RoleDefinition you wish to assign. Can be found by running: az role definition list --output json"
                              }
                            },
                            "principalId": {
                              "type": "string"
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "ServicePrincipal",
                              "metadata": {
                                "description": "Optional, default ServicePrincipal"
                              },
                              "allowedValues": [
                                "ServicePrincipal",
                                "Device",
                                "ForeignGroup",
                                "Group",
                                "User"
                              ]
                            },
                            "roledescription": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "variables": {
                            "$fxv#0": "{\r\n    \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n    \"contentVersion\": \"1.0.0.0\",\r\n    \"parameters\": {\r\n        \"scope\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"name\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"roleDefinitionId\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"principalId\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"principalType\": {\r\n            \"type\": \"string\"\r\n        }\r\n    },\r\n    \"resources\": [\r\n        {\r\n            \"type\": \"Microsoft.Authorization/roleAssignments\",\r\n            \"apiVersion\": \"2020-08-01-preview\",\r\n            \"scope\": \"[parameters('scope')]\",\r\n            \"name\": \"[parameters('name')]\",\r\n            \"properties\": {\r\n                \"roleDefinitionId\": \"[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]\",\r\n                \"principalId\": \"[parameters('principalId')]\",\r\n                \"principalType\": \"[parameters('principalType')]\"\r\n            }\r\n        }\r\n    ],\r\n    \"outputs\": {\r\n        \"roleAssignmentId\": {\r\n            \"type\": \"string\",\r\n            \"value\": \"[extensionResourceId(parameters('scope'), 'Microsoft.Authorization/roleAssignments', parameters('name'))]\"\r\n        }\r\n    }\r\n}"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "mode": "Incremental",
                                "expressionEvaluationOptions": {
                                  "scope": "Outer"
                                },
                                "template": "[json(variables('$fxv#0'))]",
                                "parameters": {
                                  "scope": {
                                    "value": "[parameters('resourceId')]"
                                  },
                                  "name": {
                                    "value": "[guid(parameters('principalId'), parameters('roleDefinitionId'), parameters('resourceId'))]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[parameters('roleDefinitionId')]"
                                  },
                                  "principalId": {
                                    "value": "[parameters('principalId')]"
                                  },
                                  "principalType": {
                                    "value": "[parameters('principalType')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceid": {
                              "type": "string",
                              "value": "[parameters('resourceId')]"
                            },
                            "roleAssignmentId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('name')), '2021-04-01').outputs.roleAssignmentId.value]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'vmJumpHostUserAssignedManagedIdenity-Deployment')]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('{0}-keyvaultModule-Deployment', variables('resourceNames').keyvault), 64))]",
                "[resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'webAppModule-Deployment')]"
              ]
            },
            {
              "condition": "[parameters('deployRedis')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-redisModule-Deployment', variables('resourceNames').redisCache), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').redisCache]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "logAnalyticsWsId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logAnalyticsWs-Deployment'), '2022-09-01').outputs.logAnalyticsWsId.value]"
                  },
                  "vnetHubResourceId": {
                    "value": "[parameters('vnetHubResourceId')]"
                  },
                  "subnetPrivateEndpointId": {
                    "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetName.value, variables('resourceNames').snetPe), '/')[0], split(format('{0}/{1}', reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetName.value, variables('resourceNames').snetPe), '/')[1])]"
                  },
                  "virtualNetworkLinks": {
                    "value": [
                      {
                        "vnetName": "[reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetName.value]",
                        "vnetId": "[reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetId.value]",
                        "registrationEnabled": false
                      },
                      {
                        "vnetName": "[variables('vnetHubSplitTokens')[8]]",
                        "vnetId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('vnetHubSplitTokens')[2], variables('vnetHubSplitTokens')[4]), 'Microsoft.Network/virtualNetworks', variables('vnetHubSplitTokens')[8])]",
                        "registrationEnabled": false
                      }
                    ]
                  },
                  "keyvaultName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-keyvaultModule-Deployment', variables('resourceNames').keyvault), 64)), '2022-09-01').outputs.keyvaultName.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "6589372805357964201"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 63,
                      "metadata": {
                        "description": "Required. The name of the Redis cache resource. Start and end with alphanumeric. Consecutive hyphens not allowed"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. The location to deploy the Redis cache service."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "keyvaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of an existing keyvault, that it will be used to store secrets (connection string)"
                      }
                    },
                    "logAnalyticsWsId": {
                      "type": "string",
                      "metadata": {
                        "description": "An existing Log Analytics WS Id for creating app Insights, diagnostics etc."
                      }
                    },
                    "subnetPrivateEndpointId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Default is empty. If empty no Private endpoint will be created fro the resoure. Otherwise, the subnet where the private endpoint will be attached to"
                      }
                    },
                    "vnetHubResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "if empty, private dns zone will be deployed in the current RG scope"
                      }
                    },
                    "virtualNetworkLinks": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                      }
                    }
                  },
                  "variables": {
                    "vnetHubSplitTokens": "[if(not(empty(parameters('vnetHubResourceId'))), split(parameters('vnetHubResourceId'), '/'), array(''))]",
                    "redisCacheDnsZoneName": "privatelink.redis.cache.windows.net"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('{0}-redis-deployment', parameters('name')), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('name')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('logAnalyticsWsId')]"
                          },
                          "hasPrivateLink": {
                            "value": "[not(empty(parameters('subnetPrivateEndpointId')))]"
                          },
                          "keyvaultName": {
                            "value": "[parameters('keyvaultName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "10925798244505841343"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 63,
                              "metadata": {
                                "description": "Required. The name of the Redis cache resource. Start and end with alphanumeric. Consecutive hyphens not allowed"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location to deploy the Redis cache service."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "keyvaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of an existing keyvault, that it will be used to store secrets (connection string)"
                              }
                            },
                            "enableNonSslPort": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies whether the non-ssl Redis server port (6379) is enabled."
                              }
                            },
                            "redisConfiguration": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc."
                              }
                            },
                            "replicasPerMaster": {
                              "type": "int",
                              "defaultValue": 1,
                              "metadata": {
                                "description": "Optional. The number of replicas to be created per primary."
                              },
                              "minValue": 1
                            },
                            "replicasPerPrimary": {
                              "type": "int",
                              "defaultValue": 1,
                              "metadata": {
                                "description": "Optional. The number of replicas to be created per primary."
                              },
                              "minValue": 1
                            },
                            "shardCount": {
                              "type": "int",
                              "defaultValue": 1,
                              "metadata": {
                                "description": "Optional. The number of shards to be created on a Premium Cluster Cache."
                              },
                              "minValue": 1
                            },
                            "capacity": {
                              "type": "int",
                              "defaultValue": 2,
                              "metadata": {
                                "description": "Optional. The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4)."
                              },
                              "allowedValues": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                              ]
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "Standard",
                              "metadata": {
                                "description": "Optional, default is Standard. The type of Redis cache to deploy."
                              },
                              "allowedValues": [
                                "Basic",
                                "Premium",
                                "Standard"
                              ]
                            },
                            "subnetId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "allLogs"
                              ],
                              "allowedValues": [
                                "allLogs",
                                "ConnectedClientList"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "AllMetrics"
                              ],
                              "allowedValues": [
                                "AllMetrics"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "hasPrivateLink": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Has the resource private endpoint?"
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogsSpecified",
                                "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                                "input": {
                                  "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ],
                            "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true(), 'retentionPolicy', createObject('enabled', true(), 'days', parameters('diagnosticLogsRetentionInDays')))), variables('diagnosticsLogsSpecified'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Cache/redis",
                              "apiVersion": "2021-06-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "enableNonSslPort": "[parameters('enableNonSslPort')]",
                                "minimumTlsVersion": "1.2",
                                "publicNetworkAccess": "[if(parameters('hasPrivateLink'), 'Disabled', null())]",
                                "redisConfiguration": "[if(not(empty(parameters('redisConfiguration'))), parameters('redisConfiguration'), null())]",
                                "redisVersion": "6",
                                "replicasPerMaster": "[if(equals(parameters('skuName'), 'Premium'), parameters('replicasPerMaster'), null())]",
                                "replicasPerPrimary": "[if(equals(parameters('skuName'), 'Premium'), parameters('replicasPerPrimary'), null())]",
                                "shardCount": "[if(equals(parameters('skuName'), 'Premium'), parameters('shardCount'), null())]",
                                "sku": {
                                  "capacity": "[parameters('capacity')]",
                                  "family": "[if(equals(parameters('skuName'), 'Premium'), 'P', 'C')]",
                                  "name": "[parameters('skuName')]"
                                },
                                "subnetId": "[if(not(empty(parameters('subnetId'))), parameters('subnetId'), null())]"
                              },
                              "zones": "[if(equals(parameters('skuName'), 'Premium'), pickZones('Microsoft.Cache', 'redis', parameters('location'), 1), null())]"
                            },
                            {
                              "type": "Microsoft.KeyVault/vaults/secrets",
                              "apiVersion": "2018-02-14",
                              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'redisConStrSecret')]",
                              "properties": {
                                "value": "[format('{0},password={1},ssl=True,abortConnect=False', reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2021-06-01').hostName, listKeys(resourceId('Microsoft.Cache/redis', parameters('name')), '2021-06-01').primaryKey)]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
                              ]
                            },
                            {
                              "condition": "[not(empty(parameters('diagnosticWorkspaceId')))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Cache/redis/{0}', parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": null,
                                "workspaceId": "[if(empty(parameters('diagnosticWorkspaceId')), null(), parameters('diagnosticWorkspaceId'))]",
                                "eventHubAuthorizationRuleId": null,
                                "eventHubName": null,
                                "metrics": "[if(empty(parameters('diagnosticWorkspaceId')), null(), variables('diagnosticsMetrics'))]",
                                "logs": "[if(empty(parameters('diagnosticWorkspaceId')), null(), variables('diagnosticsLogs'))]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource name."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID."
                              },
                              "value": "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the Redis cache was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "hostName": {
                              "type": "string",
                              "metadata": {
                                "description": "Redis hostname."
                              },
                              "value": "[reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2021-06-01').hostName]"
                            },
                            "sslPort": {
                              "type": "int",
                              "metadata": {
                                "description": "Redis SSL port."
                              },
                              "value": "[reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2021-06-01').sslPort]"
                            },
                            "subnetId": {
                              "type": "string",
                              "metadata": {
                                "description": "The full resource ID of a subnet in a virtual network where the Redis cache was deployed in."
                              },
                              "value": "[if(not(empty(parameters('subnetId'))), reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2021-06-01').subnetId, '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2021-06-01', 'full').location]"
                            },
                            "redisConnectionStringSecretName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the secret in keyvault, holding the connection string to redis."
                              },
                              "value": "redisConStrSecret"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('subnetPrivateEndpointId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('{0}-PrivateDnsZoneDeployment', replace(variables('redisCacheDnsZoneName'), '.', '-')), 64)]",
                      "subscriptionId": "[variables('vnetHubSplitTokens')[2]]",
                      "resourceGroup": "[variables('vnetHubSplitTokens')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('redisCacheDnsZoneName')]"
                          },
                          "virtualNetworkLinks": {
                            "value": "[parameters('virtualNetworkLinks')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "698709463730837083"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "virtualNetworkLinks": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                              }
                            },
                            "aRecords": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of A records to be added to the DNS Zone"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('name')]",
                              "location": "global",
                              "tags": "[parameters('tags')]"
                            },
                            {
                              "copy": {
                                "name": "privateDnsZoneLink",
                                "count": "[length(parameters('virtualNetworkLinks'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2018-09-01",
                              "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
                              "location": "global",
                              "properties": {
                                "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                                "virtualNetwork": {
                                  "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "dnsARecord",
                                "count": "[length(parameters('aRecords'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
                              "properties": {
                                "ttl": 60,
                                "aRecords": [
                                  {
                                    "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "privateDnsZonesId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('subnetPrivateEndpointId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('pe-{0}-Deployment', parameters('name')), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[take(format('pe-{0}', reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-redis-deployment', parameters('name')), 64)), '2022-09-01').outputs.name.value), 64)]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "privateDnsZonesId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('vnetHubSplitTokens')[2], variables('vnetHubSplitTokens')[4]), 'Microsoft.Resources/deployments', take(format('{0}-PrivateDnsZoneDeployment', replace(variables('redisCacheDnsZoneName'), '.', '-')), 64)), '2022-09-01').outputs.privateDnsZonesId.value]"
                          },
                          "privateLinkServiceId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-redis-deployment', parameters('name')), 64)), '2022-09-01').outputs.resourceId.value]"
                          },
                          "snetId": {
                            "value": "[parameters('subnetPrivateEndpointId')]"
                          },
                          "subresource": {
                            "value": "redisCache"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "14445154365330656192"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 64,
                              "minLength": 2,
                              "metadata": {
                                "description": "Required. Name of your pruvate endpoint. Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens."
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "snetId": {
                              "type": "string",
                              "metadata": {
                                "description": "The subnet resource ID where the nic of the PE will be attached to"
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource id of private link service. The resource ID of the Az Resource that we need to attach the pe to."
                              }
                            },
                            "subresource": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource that the private endpoint will be attached to, as shown in https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-overview#private-link-resource"
                              }
                            },
                            "privateDnsZonesId": {
                              "type": "string",
                              "metadata": {
                                "description": "Id of the relevant private DNS Zone, so that the PE can create an A record for the implicitly created nic"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "subnet": {
                                  "id": "[parameters('snetId')]"
                                },
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('pl-{0}', parameters('name'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                      "groupIds": [
                                        "[parameters('subresource')]"
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'dnsgroupname')]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "config1",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('privateDnsZonesId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', take(format('{0}-redis-deployment', parameters('name')), 64))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('vnetHubSplitTokens')[2], variables('vnetHubSplitTokens')[4]), 'Microsoft.Resources/deployments', take(format('{0}-PrivateDnsZoneDeployment', replace(variables('redisCacheDnsZoneName'), '.', '-')), 64))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource name."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-redis-deployment', parameters('name')), 64)), '2022-09-01').outputs.name.value]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-redis-deployment', parameters('name')), 64)), '2022-09-01').outputs.resourceId.value]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the Redis cache was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "hostName": {
                      "type": "string",
                      "metadata": {
                        "description": "Redis hostname."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-redis-deployment', parameters('name')), 64)), '2022-09-01').outputs.hostName.value]"
                    },
                    "sslPort": {
                      "type": "int",
                      "metadata": {
                        "description": "Redis SSL port."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-redis-deployment', parameters('name')), 64)), '2022-09-01').outputs.sslPort.value]"
                    },
                    "redisConnectionStringSecretName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the secret in keyvault, holding the connection string to redis."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-redis-deployment', parameters('name')), 64)), '2022-09-01').outputs.redisConnectionStringSecretName.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('{0}-keyvaultModule-Deployment', variables('resourceNames').keyvault), 64))]",
                "[resourceId('Microsoft.Resources/deployments', 'logAnalyticsWs-Deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment')]"
              ]
            },
            {
              "condition": "[parameters('deployAzureSql')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-sqlServer-Deployment', variables('resourceNames').sqlServer), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').sqlServer]"
                  },
                  "databaseName": {
                    "value": "[variables('resourceNames').sqlDb]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "vnetHubResourceId": {
                    "value": "[parameters('vnetHubResourceId')]"
                  },
                  "subnetPrivateEndpointId": {
                    "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetName.value, variables('resourceNames').snetPe), '/')[0], split(format('{0}/{1}', reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetName.value, variables('resourceNames').snetPe), '/')[1])]"
                  },
                  "virtualNetworkLinks": {
                    "value": [
                      {
                        "vnetName": "[reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetName.value]",
                        "vnetId": "[reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetId.value]",
                        "registrationEnabled": false
                      },
                      {
                        "vnetName": "[variables('vnetHubSplitTokens')[8]]",
                        "vnetId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('vnetHubSplitTokens')[2], variables('vnetHubSplitTokens')[4]), 'Microsoft.Network/virtualNetworks', variables('vnetHubSplitTokens')[8])]",
                        "registrationEnabled": false
                      }
                    ]
                  },
                  "administrators": {
                    "value": "[parameters('sqlServerAdministrators')]"
                  },
                  "sqlAdminLogin": {
                    "value": "[parameters('sqlAdminLogin')]"
                  },
                  "sqlAdminPassword": {
                    "value": "[parameters('sqlAdminPassword')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "14050016351388336452"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 63,
                      "metadata": {
                        "description": "Required. The name of the DQL server resource. Lowercase letters, numbers, and hyphens. Cannot start or end with hyphen."
                      }
                    },
                    "databaseName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 128,
                      "metadata": {
                        "description": "Required. The name of the database. Cannot use: <>*%&:\\/? or control characters Cannot end with period or space"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. The location to deploy the Redis cache service."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "administrators": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Conditional. The Azure Active Directory (AAD) administrator authentication. Required if no `sqlAdminLogin` & `sqlAdminPassword` is provided."
                      }
                    },
                    "sqlAdminLogin": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Conditional. If sqlServerAdministrators is given, this is not required"
                      }
                    },
                    "sqlAdminPassword": {
                      "type": "securestring",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Conditional. If sqlServerAdministrators is given, this is not required"
                      }
                    },
                    "virtualNetworkLinks": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                      }
                    },
                    "subnetPrivateEndpointId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Default is empty. If empty no Private endpoint will be created for the resoure. Otherwise, the subnet where the private endpoint will be attached to"
                      }
                    },
                    "vnetHubResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "if empty, private dns zone will be deployed in the current RG scope"
                      }
                    }
                  },
                  "variables": {
                    "vnetHubSplitTokens": "[if(not(empty(parameters('vnetHubResourceId'))), split(parameters('vnetHubResourceId'), '/'), array(''))]",
                    "sqlDnsZoneName": "[format('privatelink{0}', environment().suffixes.sqlServerHostname)]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('sqlDbAndServer-{0}-Deployment', parameters('name'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('name')]"
                          },
                          "databaseName": {
                            "value": "[parameters('databaseName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "hasPrivateLinks": {
                            "value": "[not(empty(parameters('subnetPrivateEndpointId')))]"
                          },
                          "administrators": {
                            "value": "[parameters('administrators')]"
                          },
                          "administratorLogin": {
                            "value": "[parameters('sqlAdminLogin')]"
                          },
                          "administratorLoginPassword": {
                            "value": "[parameters('sqlAdminPassword')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "1692445394927047818"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the Sql server."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "hasPrivateLinks": {
                              "type": "bool",
                              "metadata": {
                                "description": "Whether the resource has private links or not"
                              }
                            },
                            "administratorLogin": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Conditional. The administrator username for the server. Required if no `administrators` object for AAD authentication is provided."
                              }
                            },
                            "administratorLoginPassword": {
                              "type": "securestring",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Conditional. The administrator login password. Required if no `administrators` object for AAD authentication is provided."
                              }
                            },
                            "administrators": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Conditional. The Azure Active Directory (AAD) administrator authentication. Required if no `administratorLogin` & `administratorLoginPassword` is provided."
                              }
                            },
                            "primaryUserAssignedIdentityId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Conditional. The resource ID of a user assigned identity to be used by default. Required if \"userAssignedIdentities\" is not empty."
                              }
                            },
                            "systemAssignedIdentity": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enables system assigned managed identity on the resource."
                              }
                            },
                            "userAssignedIdentities": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The ID(s) to assign to the resource."
                              }
                            },
                            "databaseName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the Sql database."
                              }
                            },
                            "databaseCollation": {
                              "type": "string",
                              "defaultValue": "SQL_Latin1_General_CP1_CI_AS",
                              "metadata": {
                                "description": "Optional, default SQL_Latin1_General_CP1_CI_AS. The collation of the database."
                              }
                            },
                            "databaseSkuName": {
                              "type": "string",
                              "defaultValue": "S0",
                              "allowedValues": [
                                "S0",
                                "S1",
                                "S2",
                                "S3",
                                "S4",
                                "S6",
                                "S7",
                                "S9",
                                "S12"
                              ],
                              "metadata": {
                                "description": "Optional, default is S0. The SKU of the database "
                              }
                            },
                            "enableTransparentDataEncryption": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Whether to enable Transparent Data Encryption -defaults to 'true'"
                              }
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "",
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and neither firewall rules nor virtual network rules are set."
                              }
                            }
                          },
                          "variables": {
                            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Sql/servers",
                              "apiVersion": "2022-05-01-preview",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "identity": "[variables('identity')]",
                              "properties": {
                                "administratorLogin": "[if(not(empty(parameters('administratorLogin'))), parameters('administratorLogin'), null())]",
                                "administratorLoginPassword": "[if(not(empty(parameters('administratorLoginPassword'))), parameters('administratorLoginPassword'), null())]",
                                "administrators": "[if(not(empty(parameters('administrators'))), createObject('administratorType', 'ActiveDirectory', 'azureADOnlyAuthentication', parameters('administrators').azureADOnlyAuthentication, 'login', parameters('administrators').login, 'principalType', parameters('administrators').principalType, 'sid', parameters('administrators').sid, 'tenantId', parameters('administrators').tenantId), null())]",
                                "version": "12.0",
                                "minimalTlsVersion": "1.2",
                                "primaryUserAssignedIdentityId": "[if(not(empty(parameters('primaryUserAssignedIdentityId'))), parameters('primaryUserAssignedIdentityId'), null())]",
                                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(parameters('hasPrivateLinks'), 'Disabled', null()))]"
                              }
                            },
                            {
                              "type": "Microsoft.Sql/servers/databases",
                              "apiVersion": "2021-02-01-preview",
                              "name": "[format('{0}/{1}', parameters('name'), parameters('databaseName'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('databaseSkuName')]"
                              },
                              "properties": {
                                "collation": "[parameters('databaseCollation')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Sql/servers/databases/transparentDataEncryption",
                              "apiVersion": "2021-02-01-preview",
                              "name": "[format('{0}/{1}/{2}', parameters('name'), parameters('databaseName'), 'current')]",
                              "properties": {
                                "state": "[if(parameters('enableTransparentDataEncryption'), 'Enabled', 'Disabled')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Sql/servers/databases', parameters('name'), parameters('databaseName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "sqlServerName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed SQL server."
                              },
                              "value": "[parameters('name')]"
                            },
                            "sqlServerId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed SQL server."
                              },
                              "value": "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed SQL server."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "systemAssignedPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Sql/servers', parameters('name')), '2022-05-01-preview', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Sql/servers', parameters('name')), '2022-05-01-preview', 'full').identity.principalId, '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Sql/servers', parameters('name')), '2022-05-01-preview', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('subnetPrivateEndpointId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('{0}-PrivateDnsZoneDeployment', replace(variables('sqlDnsZoneName'), '.', '-')), 64)]",
                      "subscriptionId": "[variables('vnetHubSplitTokens')[2]]",
                      "resourceGroup": "[variables('vnetHubSplitTokens')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('sqlDnsZoneName')]"
                          },
                          "virtualNetworkLinks": {
                            "value": "[parameters('virtualNetworkLinks')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "698709463730837083"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "virtualNetworkLinks": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                              }
                            },
                            "aRecords": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of A records to be added to the DNS Zone"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('name')]",
                              "location": "global",
                              "tags": "[parameters('tags')]"
                            },
                            {
                              "copy": {
                                "name": "privateDnsZoneLink",
                                "count": "[length(parameters('virtualNetworkLinks'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2018-09-01",
                              "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
                              "location": "global",
                              "properties": {
                                "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                                "virtualNetwork": {
                                  "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "dnsARecord",
                                "count": "[length(parameters('aRecords'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
                              "properties": {
                                "ttl": 60,
                                "aRecords": [
                                  {
                                    "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "privateDnsZonesId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('subnetPrivateEndpointId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('pe-{0}-Deployment', parameters('name')), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[take(format('pe-{0}', reference(resourceId('Microsoft.Resources/deployments', format('sqlDbAndServer-{0}-Deployment', parameters('name'))), '2022-09-01').outputs.sqlServerName.value), 64)]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "privateDnsZonesId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('vnetHubSplitTokens')[2], variables('vnetHubSplitTokens')[4]), 'Microsoft.Resources/deployments', take(format('{0}-PrivateDnsZoneDeployment', replace(variables('sqlDnsZoneName'), '.', '-')), 64)), '2022-09-01').outputs.privateDnsZonesId.value]"
                          },
                          "privateLinkServiceId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('sqlDbAndServer-{0}-Deployment', parameters('name'))), '2022-09-01').outputs.sqlServerId.value]"
                          },
                          "snetId": {
                            "value": "[parameters('subnetPrivateEndpointId')]"
                          },
                          "subresource": {
                            "value": "sqlServer"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.17.1.54307",
                              "templateHash": "14445154365330656192"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 64,
                              "minLength": 2,
                              "metadata": {
                                "description": "Required. Name of your pruvate endpoint. Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens."
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "snetId": {
                              "type": "string",
                              "metadata": {
                                "description": "The subnet resource ID where the nic of the PE will be attached to"
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource id of private link service. The resource ID of the Az Resource that we need to attach the pe to."
                              }
                            },
                            "subresource": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource that the private endpoint will be attached to, as shown in https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-overview#private-link-resource"
                              }
                            },
                            "privateDnsZonesId": {
                              "type": "string",
                              "metadata": {
                                "description": "Id of the relevant private DNS Zone, so that the PE can create an A record for the implicitly created nic"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "subnet": {
                                  "id": "[parameters('snetId')]"
                                },
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('pl-{0}', parameters('name'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                      "groupIds": [
                                        "[parameters('subresource')]"
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'dnsgroupname')]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "config1",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('privateDnsZonesId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('sqlDbAndServer-{0}-Deployment', parameters('name')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('vnetHubSplitTokens')[2], variables('vnetHubSplitTokens')[4]), 'Microsoft.Resources/deployments', take(format('{0}-PrivateDnsZoneDeployment', replace(variables('sqlDnsZoneName'), '.', '-')), 64))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "sqlServerName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('sqlDbAndServer-{0}-Deployment', parameters('name'))), '2022-09-01').outputs.sqlServerName.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment')]"
              ]
            }
          ],
          "outputs": {
            "vnetSpokeName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetName.value]"
            },
            "vnetSpokeId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.vnetId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hubResourceGroupName')), 'Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('spokeResourceGroupName')), 'Microsoft.Resources/deployments', 'namingModule-Deployment')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('spokeResourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('peerings-{0}-deployment', deployment().name), 64)]",
      "resourceGroup": "[variables('spokeResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "rgSpokeName": {
            "value": "[variables('spokeResourceGroupName')]"
          },
          "spokeName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('spokeResourceGroupName')), 'Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.vnetSpokeName.value]"
          },
          "vnetHubResourceId": "[if(not(empty(parameters('vnetHubResourceId'))), createObject('value', parameters('vnetHubResourceId')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hubResourceGroupName')), 'Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.vnetHubId.value))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "9746862502566108013"
            }
          },
          "parameters": {
            "spokeName": {
              "type": "string",
              "metadata": {
                "description": "The name of the spoke vnet"
              }
            },
            "rgSpokeName": {
              "type": "string",
              "metadata": {
                "description": "The name of the spoke  resource group"
              }
            },
            "vnetHubResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource if of the hub vnet"
              }
            }
          },
          "variables": {
            "vnetHubResourceIdSplitTokens": "[split(parameters('vnetHubResourceId'), '/')]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "peerSpokeToHubDeployment",
              "subscriptionId": "[last(split(subscription().id, '/'))]",
              "resourceGroup": "[parameters('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "localVnetName": {
                    "value": "[parameters('spokeName')]"
                  },
                  "remoteVnetName": {
                    "value": "[variables('vnetHubResourceIdSplitTokens')[8]]"
                  },
                  "remoteRgName": {
                    "value": "[variables('vnetHubResourceIdSplitTokens')[4]]"
                  },
                  "remoteSubscriptionId": {
                    "value": "[variables('vnetHubResourceIdSplitTokens')[2]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "13181302078385014318"
                    }
                  },
                  "parameters": {
                    "localVnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the local Virtual Network"
                      }
                    },
                    "remoteVnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the remote Virtual Network"
                      }
                    },
                    "remoteRgName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group of the remote virtual netowrk"
                      }
                    },
                    "remoteSubscriptionId": {
                      "type": "string",
                      "metadata": {
                        "description": "The id of the subscription of the remote virtual netowrk"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/peerTo-{1}', parameters('localVnetName'), parameters('remoteVnetName'))]",
                      "properties": {
                        "allowVirtualNetworkAccess": true,
                        "allowGatewayTransit": false,
                        "allowForwardedTraffic": false,
                        "useRemoteGateways": false,
                        "remoteVirtualNetwork": {
                          "id": "[resourceId(parameters('remoteSubscriptionId'), parameters('remoteRgName'), 'Microsoft.Network/virtualNetworks', parameters('remoteVnetName'))]"
                        }
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "peerHubToSpokeDeployment",
              "subscriptionId": "[variables('vnetHubResourceIdSplitTokens')[2]]",
              "resourceGroup": "[variables('vnetHubResourceIdSplitTokens')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "localVnetName": {
                    "value": "[variables('vnetHubResourceIdSplitTokens')[8]]"
                  },
                  "remoteVnetName": {
                    "value": "[parameters('spokeName')]"
                  },
                  "remoteRgName": {
                    "value": "[parameters('rgSpokeName')]"
                  },
                  "remoteSubscriptionId": {
                    "value": "[last(split(subscription().id, '/'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "13181302078385014318"
                    }
                  },
                  "parameters": {
                    "localVnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the local Virtual Network"
                      }
                    },
                    "remoteVnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the remote Virtual Network"
                      }
                    },
                    "remoteRgName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group of the remote virtual netowrk"
                      }
                    },
                    "remoteSubscriptionId": {
                      "type": "string",
                      "metadata": {
                        "description": "The id of the subscription of the remote virtual netowrk"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/peerTo-{1}', parameters('localVnetName'), parameters('remoteVnetName'))]",
                      "properties": {
                        "allowVirtualNetworkAccess": true,
                        "allowGatewayTransit": false,
                        "allowForwardedTraffic": false,
                        "useRemoteGateways": false,
                        "remoteVirtualNetwork": {
                          "id": "[resourceId(parameters('remoteSubscriptionId'), parameters('remoteRgName'), 'Microsoft.Network/virtualNetworks', parameters('remoteVnetName'))]"
                        }
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hubResourceGroupName')), 'Microsoft.Resources/deployments', take(format('hub-{0}-deployment', deployment().name), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('spokeResourceGroupName')), 'Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('spokeResourceGroupName'))]"
      ]
    }
  ]
}