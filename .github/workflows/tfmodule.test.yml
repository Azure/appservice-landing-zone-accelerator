name: 'Single-tenant ASEv3 Secure Baseline: Terraform Deploy'

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy resources?'
        required: true
        default: 'false'
        options:
          - 'true'
          - 'false'
  push:
    branches:
      - feature/106/tf-modularization
    paths:
      - '.github/workflows/tfmodule.test.yml'
      - 'scenarios/secure-baseline-ase/terraform/**'
      - '!scenarios/secure-baseline-ase/**.md'

  pull_request:
    branches:
      - main
      - feature/*
    paths:
      - '.github/workflows/tfmodule.test.yml'
      - 'scenarios/secure-baseline-ase/terraform/**'
      - '!scenarios/secure-baseline-ase/**.md'

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  modulePath: 'scenarios/secure-baseline-ase/terraform'
  terraformVersion: 1.3.9 # must be greater than or equal to 1.2 for OIDC
  backendStateKey: secure-baseline-ase.tfstate
  tfvarPath: 'Parameters/uat.tfvars'

jobs:
  terraform-validate-and-plan:
    name: 'Module'
    uses: ./.github/actions/templates/tfValidatePlan
    with:
      terraformVersion: ${{ env.terraformVersion }}
      modulePath: ${{ env.modulePath }}
      tfvarPath: ${{ env.tfvarPath }}
      backendStateKey: ${{ env.backendStateKey }}
      destroy: ${{ github.event.inputs.destroy }}
    secrets: inherit

  # deploy:
  #   if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
  #   needs: validate-plan
  #   environment: 'Production'
  #   timeout-minutes: 360
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ${{ env.modulePath }}
  #   steps:
  #     - name: Checkout the code
  #       uses: actions/checkout@main
    
  #     # Log into Azure via OIDC
  #     - uses: azure/login@v1
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION }}

  #     - name: Download a single artifact
  #       id: download
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: ${{ github.run_id }}.tfplan
  #         path: ${{ env.modulePath }}

  #     - name: Setup Terraform
  #       if: steps.download.outcome == 'success'
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraformVersion: ${{ env.terraformVersion }}

  #     - name: Terraform Init
  #       id: init
  #       run: |
  #         terraform init \
  #           -backend-config="resource_group_name=${{ secrets.AZURE_TF_STATE_RESOURCE_GROUP_NAME }}"   \
  #           -backend-config="storage_account_name=${{ secrets.AZURE_TF_STATE_STORAGE_ACCOUNT_NAME }}" \
  #           -backend-config="container_name=${{ secrets.AZURE_TF_STATE_STORAGE_CONTAINER_NAME }}"     \
  #           -backend-config="key=${{ env.backendStateKey }}"
  #       env:
  #         ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  #         ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION }}
  #         ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  #         ARM_USE_OIDC: true

  #     - name: Terraform Apply
  #       id: apply
  #       run: |
  #         terraform apply \
  #           -auto-approve \
  #           -input=false \
  #           -no-color \
  #           tfplan
  #       env:
  #         ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  #         ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION }}
  #         ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  #         ARM_USE_OIDC: true
