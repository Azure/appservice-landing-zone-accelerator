name: 'Single-tenant ASEv3 Secure Baseline: Terraform Deploy'

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy resources?'
        required: true
        default: 'false'
        options:
          - 'true'
          - 'false'
  push:
    branches:
      - main
    paths:
      - '.github/workflows/terraform.secure-baseline.ase.yml'
      - 'scenarios/secure-baseline-ase/terraform/**'
      - '!scenarios/secure-baseline-ase/**.md'

  pull_request:
    branches:
      - main
      - feature/*
    paths:
      - '.github/workflows/terraform.secure-baseline.ase.yml'
      - 'scenarios/secure-baseline-ase/terraform/**'
      - '!scenarios/secure-baseline-ase/**.md'

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  modulePath: 'scenarios/secure-baseline-ase/terraform'
  terraform_version: 1.3.9 # must be greater than or equal to 1.2 for OIDC
  backend_key: secure-baseline-ase.tfstate
  tfvarPath: 'Parameters/uat.tfvars'

jobs:
  validate-plan:
    timeout-minutes: 360
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.modulePath }}
    steps:
    - name: Checkout the code
      uses: actions/checkout@main
  
    # Log into Azure via OIDC
    - uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.terraform_version }}

    - name: Terraform Init
      id: init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.AZURE_TF_STATE_RESOURCE_GROUP_NAME }}"   \
          -backend-config="storage_account_name=${{ secrets.AZURE_TF_STATE_STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=${{ secrets.AZURE_TF_STATE_STORAGE_CONTAINER_NAME }}"     \
          -backend-config="key=${{ env.backend_key }}"
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: tfsec
      uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
      with:
        tfsec_args: --soft-fail
        github_token: ${{ github.token }}

    - name: Terraform Plan
      id: plan
      continue-on-error: true
      run: |
        if [ "${{ github.event.inputs.destroy }}" = "true" ]; then
          terraform plan \
            -destroy \
            -input=false \
            -out=tfplan \
            -no-color \
            -var-file="${{ env.tfvarPath }}"
        else
          terraform plan \
            -input=false \
            -out=tfplan \
            -no-color \
            -var-file="${{ env.tfvarPath }}"
        fi
      env:  
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

    - name: Show TFPlan
      id: show
      if: steps.plan.outcome == 'success'
      run: terraform show -no-color tfplan

    - name: 'Upload TFPlan Artifact'
      if: steps.plan.outcome == 'success'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ github.run_id }}.tfplan
        path: ${{ env.modulePath }}/tfplan
        retention-days: 5

    - name: Post Plan to GitHub PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && steps.plan.outcome == 'success'
      env:
        PLAN: "terraform\n${{ steps.show.outputs.stdout }}"
      with:
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${{ steps.show.outputs.stdout }}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.modulePath }}\`, Workflow: \`${{ github.workflow }}\`*`;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Post Plan Failure
      if: github.event_name == 'pull_request' && steps.plan.outcome == 'failure'
      uses: actions/github-script@v6
      with:
        script: |
          const output = `#### Terraform Plan failed
          <details><summary>Plan Error Output</summary>

          \`\`\`\n
          ${{ steps.plan.outputs.stderr }}
          \`\`\`

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.modulePath }}\`, Workflow: \`${{ github.workflow }}\`*`;
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    - name: Exit if plan failed
      if: steps.plan.outcome == 'failure'
      run: exit 1

  deploy:
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    needs: validate-plan
    environment: 'Production'
    timeout-minutes: 360
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.modulePath }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@main
    
      # Log into Azure via OIDC
      - uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION }}

      - name: Download a single artifact
        id: download
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.run_id }}.tfplan
          path: ${{ env.modulePath }}

      - name: Setup Terraform
        if: steps.download.outcome == 'success'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.terraform_version }}

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.AZURE_TF_STATE_RESOURCE_GROUP_NAME }}"   \
            -backend-config="storage_account_name=${{ secrets.AZURE_TF_STATE_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ secrets.AZURE_TF_STATE_STORAGE_CONTAINER_NAME }}"     \
            -backend-config="key=${{ env.backend_key }}"
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply \
            -auto-approve \
            -input=false \
            -no-color \
            tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

  cleanup-deployment:
    environment: 'Production'
    if: github.ref == 'refs/heads/main'
    needs: deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.modulePath }}
    steps:
    - name: Checkout the code
      uses: actions/checkout@main
  
    # Log into Azure via OIDC
    - uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.terraform_version }}

    - name: Terraform Init
      id: init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.AZURE_TF_STATE_RESOURCE_GROUP_NAME }}"   \
          -backend-config="storage_account_name=${{ secrets.AZURE_TF_STATE_STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=${{ secrets.AZURE_TF_STATE_STORAGE_CONTAINER_NAME }}"     \
          -backend-config="key=${{ env.backend_key }}"
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

    - name: Terraform Destroy
      id: destroy
      continue-on-error: true
      run: |
        terraform destroy \
          -auto-approve \
          -input=false \
          -no-color \
          -var-file="${{ env.tfvarPath }}"
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true