name: 'Single-tenant ASEv3 Secure Baseline: Terraform Deploy'

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/terraform.secure-baseline.ase.yml'
      - 'scenarios/secure-baseline-ase/terraform/**'
      - '!scenarios/secure-baseline-ase/**.md'

  pull_request:
    branches:
      - main
      - feature/*
    paths:
      - '.github/workflows/terraform.secure-baseline.ase.yml'
      - 'scenarios/secure-baseline-ase/terraform/**'
      - '!scenarios/secure-baseline-ase/**.md'

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  modulePath: 'scenarios/secure-baseline-ase/terraform'
  terraform_version: 1.3.7 # must be greater than or equal to 1.2 for OIDC
  backend_key: secure-baseline-ase.tfstate

jobs:
  validate-plan-and-apply:
    timeout-minutes: 360
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.modulePath }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@main

      # Log into Azure via OIDC
      - uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.terraform_version }}

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.AZURE_TF_STATE_RESOURCE_GROUP_NAME }}"   \
            -backend-config="storage_account_name=${{ secrets.AZURE_TF_STATE_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ secrets.AZURE_TF_STATE_STORAGE_CONTAINER_NAME }}"     \
            -backend-config="key=${{ env.backend_key }}"
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        continue-on-error: true
        run: |
          terraform plan \
            -input=false \
            -out=tfplan \
            -no-color \
            -var-file="Parameters/uat.tfvars" \
            && terraform show -no-color tfplan 
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true
          
      - name: Terraform Apply
        if: steps.plan.outcome == 'success'
        id: apply
        run: |
          terraform apply \
            -auto-approve \
            -input=false \
            -no-color \
            tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

      - name: Post Plan and Apply to GitHub PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request' && steps.apply.outcome == 'success'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${{ steps.plan.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Apply üìñ\`${{ steps.apply.outcome }}\`

            <details><summary>Show Apply</summary>

            \`\`\`\n
            ${{ steps.apply.outputs.stdout }}
            \`\`\`
            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.modulePath }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })



      - name: Post Plan Failure
        if: steps.plan.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            Plan failed:

            ```
            ${{ steps.plan.outputs.stderr }}
            ```            
      - name: Post Apply Failure to GitHub PR
        if: steps.apply.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            Apply failed:

            ```
            ${{ steps.apply.outputs.stderr }}
            ```